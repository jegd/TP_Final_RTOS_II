
Tp3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006414  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006724  08006724  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800672c  0800672c  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800672c  0800672c  0001672c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08006734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c64  200000e8  0800681c  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d4c  0800681c  00024d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ae5f  00000000  00000000  0002015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004156  00000000  00000000  0003afba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  0003f110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e9  00000000  00000000  00040868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264cb  00000000  00000000  00041a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c7ba  00000000  00000000  00067f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddf66  00000000  00000000  000846d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006838  00000000  00000000  0016263c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00168e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080065cc 	.word	0x080065cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	080065cc 	.word	0x080065cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000104 	.word	0x20000104
 80005dc:	200001a4 	.word	0x200001a4

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fc0d 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f821 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f8e3 	bl	80007b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f889 	bl	8000708 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 f8b1 	bl	800075c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 80005fa:	f004 ff5f 	bl	80054bc <app_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <main+0x48>)
 8000600:	1d3c      	adds	r4, r7, #4
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f003 fba4 	bl	8003d62 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <main+0x4c>)
 800061e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000620:	f003 fb98 	bl	8003d54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x44>
 8000626:	bf00      	nop
 8000628:	080065f0 	.word	0x080065f0
 800062c:	200008f4 	.word	0x200008f4

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 f9fb 	bl	8005a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a28      	ldr	r2, [pc, #160]	; (8000700 <SystemClock_Config+0xd0>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a22      	ldr	r2, [pc, #136]	; (8000704 <SystemClock_Config+0xd4>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000694:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	; 0xa8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fe87 	bl	80023cc <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c4:	f000 f940 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2105      	movs	r1, #5
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 ffca 	bl	8001680 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f2:	f000 f929 	bl	8000948 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART3_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000740:	f002 fb90 	bl	8002e64 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 f8fd 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200003a4 	.word	0x200003a4
 8000758:	40004800 	.word	0x40004800

0800075c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000766:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2206      	movs	r2, #6
 800076c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2202      	movs	r2, #2
 8000772:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2202      	movs	r2, #2
 800077e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2201      	movs	r2, #1
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	f000 fe25 	bl	80013ee <HAL_PCD_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 f8cd 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200003e8 	.word	0x200003e8

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a4b      	ldr	r2, [pc, #300]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b49      	ldr	r3, [pc, #292]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	4b45      	ldr	r3, [pc, #276]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a44      	ldr	r2, [pc, #272]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b42      	ldr	r3, [pc, #264]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a3d      	ldr	r2, [pc, #244]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b37      	ldr	r3, [pc, #220]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a36      	ldr	r2, [pc, #216]	; (8000904 <MX_GPIO_Init+0x14c>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a2f      	ldr	r2, [pc, #188]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b29      	ldr	r3, [pc, #164]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a28      	ldr	r2, [pc, #160]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b26      	ldr	r3, [pc, #152]	; (8000904 <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f244 0181 	movw	r1, #16513	; 0x4081
 800087c:	4822      	ldr	r0, [pc, #136]	; (8000908 <MX_GPIO_Init+0x150>)
 800087e:	f000 fd9d 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	4821      	ldr	r0, [pc, #132]	; (800090c <MX_GPIO_Init+0x154>)
 8000888:	f000 fd98 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000892:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	481b      	ldr	r0, [pc, #108]	; (8000910 <MX_GPIO_Init+0x158>)
 80008a4:	f000 fbf6 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <MX_GPIO_Init+0x150>)
 80008c2:	f000 fbe7 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <MX_GPIO_Init+0x154>)
 80008de:	f000 fbd9 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_GPIO_Init+0x154>)
 80008f6:	f000 fbcd 	bl	8001094 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40021800 	.word	0x40021800
 8000910:	40020800 	.word	0x40020800

08000914 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f003 fa6c 	bl	8003dfa <osDelay>
 8000922:	e7fb      	b.n	800091c <StartDefaultTask+0x8>

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 fa87 	bl	8000e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40010000 	.word	0x40010000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_MspInit+0x54>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <HAL_MspInit+0x54>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x54>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_MspInit+0x54>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_MspInit+0x54>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x54>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	f06f 0001 	mvn.w	r0, #1
 800099a:	f000 fb51 	bl	8001040 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12c      	bne.n	8000a28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_UART_MspInit+0x8c>)
 8000a24:	f000 fb36 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40004800 	.word	0x40004800
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020c00 	.word	0x40020c00

08000a3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0a0      	sub	sp, #128	; 0x80
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	225c      	movs	r2, #92	; 0x5c
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f004 ffec 	bl	8005a3a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a6a:	d14e      	bne.n	8000b0a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a72:	2300      	movs	r3, #0
 8000a74:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 ff4c 	bl	8001918 <HAL_RCCEx_PeriphCLKConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000a86:	f7ff ff5f 	bl	8000948 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <HAL_PCD_MspInit+0xd8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a20      	ldr	r2, [pc, #128]	; (8000b14 <HAL_PCD_MspInit+0xd8>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <HAL_PCD_MspInit+0xd8>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aa6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab8:	230a      	movs	r3, #10
 8000aba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4815      	ldr	r0, [pc, #84]	; (8000b18 <HAL_PCD_MspInit+0xdc>)
 8000ac4:	f000 fae6 	bl	8001094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000acc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ada:	4619      	mov	r1, r3
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <HAL_PCD_MspInit+0xdc>)
 8000ade:	f000 fad9 	bl	8001094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_PCD_MspInit+0xd8>)
 8000ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <HAL_PCD_MspInit+0xd8>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	6353      	str	r3, [r2, #52]	; 0x34
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_PCD_MspInit+0xd8>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_PCD_MspInit+0xd8>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_PCD_MspInit+0xd8>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3780      	adds	r7, #128	; 0x80
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000

08000b1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b34:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3c:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b48:	f107 020c 	add.w	r2, r7, #12
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 feae 	bl	80018b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b58:	f000 fe98 	bl	800188c <HAL_RCC_GetPCLK2Freq>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b64:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <HAL_InitTick+0xd8>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0c9b      	lsrs	r3, r3, #18
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b72:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_InitTick+0xe0>)
 8000b74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b7e:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b96:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b98:	f001 feb6 	bl	8002908 <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ba2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d11b      	bne.n	8000be2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000baa:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000bac:	f001 ff06 	bl	80029bc <HAL_TIM_Base_Start_IT>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d111      	bne.n	8000be2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bbe:	2019      	movs	r0, #25
 8000bc0:	f000 fa5a 	bl	8001078 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b0f      	cmp	r3, #15
 8000bc8:	d808      	bhi.n	8000bdc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	2019      	movs	r0, #25
 8000bd0:	f000 fa36 	bl	8001040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_InitTick+0xe4>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	e002      	b.n	8000be2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3730      	adds	r7, #48	; 0x30
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	200008f8 	.word	0x200008f8
 8000bfc:	40010000 	.word	0x40010000
 8000c00:	20000004 	.word	0x20000004

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c36:	f001 ff31 	bl	8002a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200008f8 	.word	0x200008f8

08000c44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e00a      	b.n	8000c6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c56:	f3af 8000 	nop.w
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	60ba      	str	r2, [r7, #8]
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf0      	blt.n	8000c56 <_read+0x12>
  }

  return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e009      	b.n	8000ca4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 fabf 	bl	800521c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf1      	blt.n	8000c90 <_write+0x12>
  }
  return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_close>:

int _close(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cde:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_isatty>:

int _isatty(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f004 ff18 	bl	8005b84 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20020000 	.word	0x20020000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	20000940 	.word	0x20000940
 8000d88:	20004d50 	.word	0x20004d50

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db6:	490e      	ldr	r1, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dcc:	4c0b      	ldr	r4, [pc, #44]	; (8000dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dda:	f7ff ffd7 	bl	8000d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dde:	f004 fed7 	bl	8005b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fbfd 	bl	80005e0 <main>
  bx  lr    
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000df4:	08006734 	.word	0x08006734
  ldr r2, =_sbss
 8000df8:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000dfc:	20004d4c 	.word	0x20004d4c

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_Init+0x40>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_Init+0x40>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x40>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f8fc 	bl	800102a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e32:	200f      	movs	r0, #15
 8000e34:	f7ff fe72 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e38:	f7ff fd8c 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000944 	.word	0x20000944

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000944 	.word	0x20000944

08000e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff ffee 	bl	8000e70 <HAL_GetTick>
 8000e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea0:	d005      	beq.n	8000eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_Delay+0x44>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eae:	bf00      	nop
 8000eb0:	f7ff ffde 	bl	8000e70 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d8f7      	bhi.n	8000eb0 <HAL_Delay+0x28>
  {
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4907      	ldr	r1, [pc, #28]	; (8000f6c <__NVIC_EnableIRQ+0x38>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ff4c 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001052:	f7ff ff61 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001056:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f7ff ffb1 	bl	8000fc4 <NVIC_EncodePriority>
 8001062:	4602      	mov	r2, r0
 8001064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff80 	bl	8000f70 <__NVIC_SetPriority>
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff54 	bl	8000f34 <__NVIC_EnableIRQ>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e165      	b.n	800137c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8154 	bne.w	8001376 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b03      	cmp	r3, #3
 8001152:	d017      	beq.n	8001184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d123      	bne.n	80011d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	69b9      	ldr	r1, [r7, #24]
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80ae 	beq.w	8001376 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a5c      	ldr	r2, [pc, #368]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <HAL_GPIO_Init+0x300>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001236:	4a58      	ldr	r2, [pc, #352]	; (8001398 <HAL_GPIO_Init+0x304>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <HAL_GPIO_Init+0x308>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d025      	beq.n	80012ae <HAL_GPIO_Init+0x21a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4e      	ldr	r2, [pc, #312]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d01f      	beq.n	80012aa <HAL_GPIO_Init+0x216>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <HAL_GPIO_Init+0x310>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x212>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4c      	ldr	r2, [pc, #304]	; (80013a8 <HAL_GPIO_Init+0x314>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x20e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <HAL_GPIO_Init+0x318>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x20a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4a      	ldr	r2, [pc, #296]	; (80013b0 <HAL_GPIO_Init+0x31c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x206>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a49      	ldr	r2, [pc, #292]	; (80013b4 <HAL_GPIO_Init+0x320>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x202>
 8001292:	2306      	movs	r3, #6
 8001294:	e00c      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 8001296:	2307      	movs	r3, #7
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	; (8001398 <HAL_GPIO_Init+0x304>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <HAL_GPIO_Init+0x324>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a31      	ldr	r2, [pc, #196]	; (80013b8 <HAL_GPIO_Init+0x324>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_GPIO_Init+0x324>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <HAL_GPIO_Init+0x324>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_GPIO_Init+0x324>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001346:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <HAL_GPIO_Init+0x324>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_GPIO_Init+0x324>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <HAL_GPIO_Init+0x324>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae96 	bls.w	80010b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40013c00 	.word	0x40013c00

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f0:	b08f      	sub	sp, #60	; 0x3c
 80013f2:	af0a      	add	r7, sp, #40	; 0x28
 80013f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e116      	b.n	800162e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fb0e 	bl	8000a3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2203      	movs	r2, #3
 8001424:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f002 f9d5 	bl	80037ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	687e      	ldr	r6, [r7, #4]
 800144c:	466d      	mov	r5, sp
 800144e:	f106 0410 	add.w	r4, r6, #16
 8001452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800145e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001462:	1d33      	adds	r3, r6, #4
 8001464:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001466:	6838      	ldr	r0, [r7, #0]
 8001468:	f002 f960 	bl	800372c <USB_CoreInit>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2202      	movs	r2, #2
 8001476:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0d7      	b.n	800162e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f002 f9c3 	bl	8003810 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e04a      	b.n	8001526 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	333d      	adds	r3, #61	; 0x3d
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	333c      	adds	r3, #60	; 0x3c
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	b298      	uxth	r0, r3
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	3344      	adds	r3, #68	; 0x44
 80014cc:	4602      	mov	r2, r0
 80014ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3340      	adds	r3, #64	; 0x40
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	3348      	adds	r3, #72	; 0x48
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	334c      	adds	r3, #76	; 0x4c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3354      	adds	r3, #84	; 0x54
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3af      	bcc.n	8001490 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e044      	b.n	80015c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	3301      	adds	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d3b5      	bcc.n	8001536 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	687e      	ldr	r6, [r7, #4]
 80015d2:	466d      	mov	r5, sp
 80015d4:	f106 0410 	add.w	r4, r6, #16
 80015d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015e8:	1d33      	adds	r3, r6, #4
 80015ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ec:	6838      	ldr	r0, [r7, #0]
 80015ee:	f002 f95b 	bl	80038a8 <USB_DevInit>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2202      	movs	r2, #2
 80015fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e014      	b.n	800162e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	2b01      	cmp	r3, #1
 800161a:	d102      	bne.n	8001622 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f80a 	bl	8001636 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fb19 	bl	8003c5e <USB_DevDisconnect>

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001636 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	f043 0303 	orr.w	r3, r3, #3
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0cc      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d90c      	bls.n	80016bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b65      	ldr	r3, [pc, #404]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b63      	ldr	r3, [pc, #396]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b8      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b59      	ldr	r3, [pc, #356]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a58      	ldr	r2, [pc, #352]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ec:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a52      	ldr	r2, [pc, #328]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b50      	ldr	r3, [pc, #320]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	494d      	ldr	r1, [pc, #308]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d044      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d119      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d003      	beq.n	800173e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173a:	2b03      	cmp	r3, #3
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e06f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e067      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4934      	ldr	r1, [pc, #208]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fb7e 	bl	8000e70 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff fb7a 	bl	8000e70 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e04f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e032      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	490e      	ldr	r1, [pc, #56]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001806:	f000 fbb1 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 800180a:	4602      	mov	r2, r0
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	490a      	ldr	r1, [pc, #40]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f978 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00
 800183c:	40023800 	.word	0x40023800
 8001840:	080066d8 	.word	0x080066d8
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_RCC_GetHCLKFreq+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000000 	.word	0x20000000

08001864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001868:	f7ff fff0 	bl	800184c <HAL_RCC_GetHCLKFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	0a9b      	lsrs	r3, r3, #10
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	4903      	ldr	r1, [pc, #12]	; (8001888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800187a:	5ccb      	ldrb	r3, [r1, r3]
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	080066e8 	.word	0x080066e8

0800188c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001890:	f7ff ffdc 	bl	800184c <HAL_RCC_GetHCLKFreq>
 8001894:	4602      	mov	r2, r0
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	0b5b      	lsrs	r3, r3, #13
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	4903      	ldr	r1, [pc, #12]	; (80018b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018a2:	5ccb      	ldrb	r3, [r1, r3]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	080066e8 	.word	0x080066e8

080018b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	220f      	movs	r2, #15
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_RCC_GetClockConfig+0x60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 020f 	and.w	r2, r3, #15
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	601a      	str	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40023c00 	.word	0x40023c00

08001918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d010      	beq.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001956:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195e:	496c      	ldr	r1, [pc, #432]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001960:	4313      	orrs	r3, r2
 8001962:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800196e:	2301      	movs	r3, #1
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d010      	beq.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800197e:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001984:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198c:	4960      	ldr	r1, [pc, #384]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800198e:	4313      	orrs	r3, r2
 8001990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800199c:	2301      	movs	r3, #1
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d017      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019ac:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4955      	ldr	r1, [pc, #340]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ca:	d101      	bne.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d017      	beq.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019e8:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f6:	4946      	ldr	r1, [pc, #280]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a06:	d101      	bne.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a14:	2301      	movs	r3, #1
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 808a 	beq.w	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a33      	ldr	r2, [pc, #204]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a4e:	f7ff fa0f 	bl	8000e70 <HAL_GetTick>
 8001a52:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7ff fa0b 	bl	8000e70 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e278      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a68:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d02f      	beq.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a8c:	6a3a      	ldr	r2, [r7, #32]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d028      	beq.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a9a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d114      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff f9d9 	bl	8000e70 <HAL_GetTick>
 8001abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f9d5 	bl	8000e70 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e240      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001af0:	d114      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b06:	4902      	ldr	r1, [pc, #8]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
 8001b0c:	e00c      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000
 8001b18:	42470e40 	.word	0x42470e40
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b26:	6093      	str	r3, [r2, #8]
 8001b28:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b34:	4944      	ldr	r1, [pc, #272]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d004      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001b4e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00a      	beq.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	4937      	ldr	r1, [pc, #220]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00a      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b7e:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b84:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8c:	492e      	ldr	r1, [pc, #184]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d011      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ba0:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	4926      	ldr	r1, [pc, #152]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00a      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	491a      	ldr	r1, [pc, #104]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d011      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c00:	4911      	ldr	r1, [pc, #68]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c10:	d101      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001c12:	2301      	movs	r3, #1
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c24:	f040 80ff 	bne.w	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c2e:	f7ff f91f 	bl	8000e70 <HAL_GetTick>
 8001c32:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c34:	e00e      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c36:	f7ff f91b 	bl	8000e70 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e188      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	424711e0 	.word	0x424711e0
 8001c50:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c54:	4b7e      	ldr	r3, [pc, #504]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d028      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d124      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c88:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c8e:	0c1b      	lsrs	r3, r3, #16
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	3301      	adds	r3, #1
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ca0:	0e1b      	lsrs	r3, r3, #24
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	071b      	lsls	r3, r3, #28
 8001cca:	4961      	ldr	r1, [pc, #388]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ce6:	d00a      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d035      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cfc:	d130      	bne.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001cfe:	4b54      	ldr	r3, [pc, #336]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d10:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d16:	0f1b      	lsrs	r3, r3, #28
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	019b      	lsls	r3, r3, #6
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	061b      	lsls	r3, r3, #24
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	071b      	lsls	r3, r3, #28
 8001d40:	4943      	ldr	r1, [pc, #268]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d48:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d4e:	f023 021f 	bic.w	r2, r3, #31
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	3b01      	subs	r3, #1
 8001d58:	493d      	ldr	r1, [pc, #244]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d029      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d74:	d124      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d76:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	3301      	adds	r3, #1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d8e:	0f1b      	lsrs	r3, r3, #28
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	019b      	lsls	r3, r3, #6
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	3b01      	subs	r3, #1
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	431a      	orrs	r2, r3
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	431a      	orrs	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	071b      	lsls	r3, r3, #28
 8001db8:	4925      	ldr	r1, [pc, #148]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d016      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	019b      	lsls	r3, r3, #6
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	3b01      	subs	r3, #1
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	071b      	lsls	r3, r3, #28
 8001df2:	4917      	ldr	r1, [pc, #92]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e00:	f7ff f836 	bl	8000e70 <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e08:	f7ff f832 	bl	8000e70 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e09f      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	f040 8095 	bne.w	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e34:	f7ff f81c 	bl	8000e70 <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e3c:	f7ff f818 	bl	8000e70 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d908      	bls.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e085      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	42470068 	.word	0x42470068
 8001e58:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e5c:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e68:	d0e8      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d02b      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d127      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e98:	0c1b      	lsrs	r3, r3, #16
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699a      	ldr	r2, [r3, #24]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	061b      	lsls	r3, r3, #24
 8001ec0:	4928      	ldr	r1, [pc, #160]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ec8:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ece:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	4922      	ldr	r1, [pc, #136]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01d      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ef6:	d118      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	0e1b      	lsrs	r3, r3, #24
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	019b      	lsls	r3, r3, #6
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	4910      	ldr	r1, [pc, #64]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f30:	f7fe ff9e 	bl	8000e70 <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f38:	f7fe ff9a 	bl	8000e70 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e007      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f56:	d1ef      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3730      	adds	r7, #48	; 0x30
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	42470070 	.word	0x42470070

08001f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f70:	b0ae      	sub	sp, #184	; 0xb8
 8001f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f92:	4bcb      	ldr	r3, [pc, #812]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	f200 8206 	bhi.w	80023ac <HAL_RCC_GetSysClockFreq+0x440>
 8001fa0:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fdd 	.word	0x08001fdd
 8001fac:	080023ad 	.word	0x080023ad
 8001fb0:	080023ad 	.word	0x080023ad
 8001fb4:	080023ad 	.word	0x080023ad
 8001fb8:	08001fe5 	.word	0x08001fe5
 8001fbc:	080023ad 	.word	0x080023ad
 8001fc0:	080023ad 	.word	0x080023ad
 8001fc4:	080023ad 	.word	0x080023ad
 8001fc8:	08001fed 	.word	0x08001fed
 8001fcc:	080023ad 	.word	0x080023ad
 8001fd0:	080023ad 	.word	0x080023ad
 8001fd4:	080023ad 	.word	0x080023ad
 8001fd8:	080021dd 	.word	0x080021dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4bb9      	ldr	r3, [pc, #740]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001fe2:	e1e7      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fe4:	4bb8      	ldr	r3, [pc, #736]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fea:	e1e3      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fec:	4bb4      	ldr	r3, [pc, #720]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff8:	4bb1      	ldr	r3, [pc, #708]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d071      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002004:	4bae      	ldr	r3, [pc, #696]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	2200      	movs	r2, #0
 800200c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002010:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800202a:	4622      	mov	r2, r4
 800202c:	462b      	mov	r3, r5
 800202e:	f04f 0000 	mov.w	r0, #0
 8002032:	f04f 0100 	mov.w	r1, #0
 8002036:	0159      	lsls	r1, r3, #5
 8002038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800203c:	0150      	lsls	r0, r2, #5
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4621      	mov	r1, r4
 8002044:	1a51      	subs	r1, r2, r1
 8002046:	6439      	str	r1, [r7, #64]	; 0x40
 8002048:	4629      	mov	r1, r5
 800204a:	eb63 0301 	sbc.w	r3, r3, r1
 800204e:	647b      	str	r3, [r7, #68]	; 0x44
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800205c:	4649      	mov	r1, r9
 800205e:	018b      	lsls	r3, r1, #6
 8002060:	4641      	mov	r1, r8
 8002062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002066:	4641      	mov	r1, r8
 8002068:	018a      	lsls	r2, r1, #6
 800206a:	4641      	mov	r1, r8
 800206c:	1a51      	subs	r1, r2, r1
 800206e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002070:	4649      	mov	r1, r9
 8002072:	eb63 0301 	sbc.w	r3, r3, r1
 8002076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002084:	4649      	mov	r1, r9
 8002086:	00cb      	lsls	r3, r1, #3
 8002088:	4641      	mov	r1, r8
 800208a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800208e:	4641      	mov	r1, r8
 8002090:	00ca      	lsls	r2, r1, #3
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4603      	mov	r3, r0
 8002098:	4622      	mov	r2, r4
 800209a:	189b      	adds	r3, r3, r2
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
 800209e:	462b      	mov	r3, r5
 80020a0:	460a      	mov	r2, r1
 80020a2:	eb42 0303 	adc.w	r3, r2, r3
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020b4:	4629      	mov	r1, r5
 80020b6:	024b      	lsls	r3, r1, #9
 80020b8:	4621      	mov	r1, r4
 80020ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020be:	4621      	mov	r1, r4
 80020c0:	024a      	lsls	r2, r1, #9
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80020d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80020d8:	f7fe f8ea 	bl	80002b0 <__aeabi_uldivmod>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4613      	mov	r3, r2
 80020e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020e6:	e067      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e8:	4b75      	ldr	r3, [pc, #468]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	2200      	movs	r2, #0
 80020f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80020f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002100:	67bb      	str	r3, [r7, #120]	; 0x78
 8002102:	2300      	movs	r3, #0
 8002104:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002106:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800210a:	4622      	mov	r2, r4
 800210c:	462b      	mov	r3, r5
 800210e:	f04f 0000 	mov.w	r0, #0
 8002112:	f04f 0100 	mov.w	r1, #0
 8002116:	0159      	lsls	r1, r3, #5
 8002118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800211c:	0150      	lsls	r0, r2, #5
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4621      	mov	r1, r4
 8002124:	1a51      	subs	r1, r2, r1
 8002126:	62b9      	str	r1, [r7, #40]	; 0x28
 8002128:	4629      	mov	r1, r5
 800212a:	eb63 0301 	sbc.w	r3, r3, r1
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800213c:	4649      	mov	r1, r9
 800213e:	018b      	lsls	r3, r1, #6
 8002140:	4641      	mov	r1, r8
 8002142:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002146:	4641      	mov	r1, r8
 8002148:	018a      	lsls	r2, r1, #6
 800214a:	4641      	mov	r1, r8
 800214c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002150:	4649      	mov	r1, r9
 8002152:	eb63 0b01 	sbc.w	fp, r3, r1
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002162:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800216a:	4692      	mov	sl, r2
 800216c:	469b      	mov	fp, r3
 800216e:	4623      	mov	r3, r4
 8002170:	eb1a 0303 	adds.w	r3, sl, r3
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	462b      	mov	r3, r5
 8002178:	eb4b 0303 	adc.w	r3, fp, r3
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800218a:	4629      	mov	r1, r5
 800218c:	028b      	lsls	r3, r1, #10
 800218e:	4621      	mov	r1, r4
 8002190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002194:	4621      	mov	r1, r4
 8002196:	028a      	lsls	r2, r1, #10
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021a0:	2200      	movs	r2, #0
 80021a2:	673b      	str	r3, [r7, #112]	; 0x70
 80021a4:	677a      	str	r2, [r7, #116]	; 0x74
 80021a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80021aa:	f7fe f881 	bl	80002b0 <__aeabi_uldivmod>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4613      	mov	r3, r2
 80021b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	3301      	adds	r3, #1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80021ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021da:	e0eb      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021dc:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e8:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d06b      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	2200      	movs	r2, #0
 80021fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80021fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002206:	663b      	str	r3, [r7, #96]	; 0x60
 8002208:	2300      	movs	r3, #0
 800220a:	667b      	str	r3, [r7, #100]	; 0x64
 800220c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002210:	4622      	mov	r2, r4
 8002212:	462b      	mov	r3, r5
 8002214:	f04f 0000 	mov.w	r0, #0
 8002218:	f04f 0100 	mov.w	r1, #0
 800221c:	0159      	lsls	r1, r3, #5
 800221e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002222:	0150      	lsls	r0, r2, #5
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4621      	mov	r1, r4
 800222a:	1a51      	subs	r1, r2, r1
 800222c:	61b9      	str	r1, [r7, #24]
 800222e:	4629      	mov	r1, r5
 8002230:	eb63 0301 	sbc.w	r3, r3, r1
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002242:	4659      	mov	r1, fp
 8002244:	018b      	lsls	r3, r1, #6
 8002246:	4651      	mov	r1, sl
 8002248:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800224c:	4651      	mov	r1, sl
 800224e:	018a      	lsls	r2, r1, #6
 8002250:	4651      	mov	r1, sl
 8002252:	ebb2 0801 	subs.w	r8, r2, r1
 8002256:	4659      	mov	r1, fp
 8002258:	eb63 0901 	sbc.w	r9, r3, r1
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002268:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800226c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002270:	4690      	mov	r8, r2
 8002272:	4699      	mov	r9, r3
 8002274:	4623      	mov	r3, r4
 8002276:	eb18 0303 	adds.w	r3, r8, r3
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	462b      	mov	r3, r5
 800227e:	eb49 0303 	adc.w	r3, r9, r3
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002290:	4629      	mov	r1, r5
 8002292:	024b      	lsls	r3, r1, #9
 8002294:	4621      	mov	r1, r4
 8002296:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800229a:	4621      	mov	r1, r4
 800229c:	024a      	lsls	r2, r1, #9
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022a6:	2200      	movs	r2, #0
 80022a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80022aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022b0:	f7fd fffe 	bl	80002b0 <__aeabi_uldivmod>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4613      	mov	r3, r2
 80022ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022be:	e065      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x420>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	00f42400 	.word	0x00f42400
 80022c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022cc:	4b3d      	ldr	r3, [pc, #244]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	2200      	movs	r2, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	4611      	mov	r1, r2
 80022d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022dc:	653b      	str	r3, [r7, #80]	; 0x50
 80022de:	2300      	movs	r3, #0
 80022e0:	657b      	str	r3, [r7, #84]	; 0x54
 80022e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80022e6:	4642      	mov	r2, r8
 80022e8:	464b      	mov	r3, r9
 80022ea:	f04f 0000 	mov.w	r0, #0
 80022ee:	f04f 0100 	mov.w	r1, #0
 80022f2:	0159      	lsls	r1, r3, #5
 80022f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f8:	0150      	lsls	r0, r2, #5
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4641      	mov	r1, r8
 8002300:	1a51      	subs	r1, r2, r1
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	4649      	mov	r1, r9
 8002306:	eb63 0301 	sbc.w	r3, r3, r1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002318:	4659      	mov	r1, fp
 800231a:	018b      	lsls	r3, r1, #6
 800231c:	4651      	mov	r1, sl
 800231e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002322:	4651      	mov	r1, sl
 8002324:	018a      	lsls	r2, r1, #6
 8002326:	4651      	mov	r1, sl
 8002328:	1a54      	subs	r4, r2, r1
 800232a:	4659      	mov	r1, fp
 800232c:	eb63 0501 	sbc.w	r5, r3, r1
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	00eb      	lsls	r3, r5, #3
 800233a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800233e:	00e2      	lsls	r2, r4, #3
 8002340:	4614      	mov	r4, r2
 8002342:	461d      	mov	r5, r3
 8002344:	4643      	mov	r3, r8
 8002346:	18e3      	adds	r3, r4, r3
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	464b      	mov	r3, r9
 800234c:	eb45 0303 	adc.w	r3, r5, r3
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800235e:	4629      	mov	r1, r5
 8002360:	028b      	lsls	r3, r1, #10
 8002362:	4621      	mov	r1, r4
 8002364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002368:	4621      	mov	r1, r4
 800236a:	028a      	lsls	r2, r1, #10
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002374:	2200      	movs	r2, #0
 8002376:	64bb      	str	r3, [r7, #72]	; 0x48
 8002378:	64fa      	str	r2, [r7, #76]	; 0x4c
 800237a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800237e:	f7fd ff97 	bl	80002b0 <__aeabi_uldivmod>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4613      	mov	r3, r2
 8002388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0f1b      	lsrs	r3, r3, #28
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800239a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800239e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023aa:	e003      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80023ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	37b8      	adds	r7, #184	; 0xb8
 80023bc:	46bd      	mov	sp, r7
 80023be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	00f42400 	.word	0x00f42400

080023cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e28d      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8083 	beq.w	80024f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023ec:	4b94      	ldr	r3, [pc, #592]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d019      	beq.n	800242c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023f8:	4b91      	ldr	r3, [pc, #580]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002400:	2b08      	cmp	r3, #8
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002404:	4b8e      	ldr	r3, [pc, #568]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002410:	d00c      	beq.n	800242c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002412:	4b8b      	ldr	r3, [pc, #556]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d112      	bne.n	8002444 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	4b88      	ldr	r3, [pc, #544]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800242a:	d10b      	bne.n	8002444 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	4b84      	ldr	r3, [pc, #528]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d05b      	beq.n	80024f0 <HAL_RCC_OscConfig+0x124>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d157      	bne.n	80024f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e25a      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244c:	d106      	bne.n	800245c <HAL_RCC_OscConfig+0x90>
 800244e:	4b7c      	ldr	r3, [pc, #496]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7b      	ldr	r2, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0xcc>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0xb4>
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a75      	ldr	r2, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b73      	ldr	r3, [pc, #460]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a72      	ldr	r2, [pc, #456]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0xcc>
 8002480:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6e      	ldr	r2, [pc, #440]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b6c      	ldr	r3, [pc, #432]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a6b      	ldr	r2, [pc, #428]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fce6 	bl	8000e70 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a8:	f7fe fce2 	bl	8000e70 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e21f      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b61      	ldr	r3, [pc, #388]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0xdc>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fcd2 	bl	8000e70 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe fcce 	bl	8000e70 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e20b      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	4b57      	ldr	r3, [pc, #348]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x104>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d06f      	beq.n	80025de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024fe:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b00      	cmp	r3, #0
 8002508:	d017      	beq.n	800253a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800250a:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002512:	2b08      	cmp	r3, #8
 8002514:	d105      	bne.n	8002522 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002516:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d11c      	bne.n	8002568 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252e:	4b44      	ldr	r3, [pc, #272]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x186>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1d3      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4937      	ldr	r1, [pc, #220]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e03a      	b.n	80025de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <HAL_RCC_OscConfig+0x278>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe fc7b 	bl	8000e70 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257e:	f7fe fc77 	bl	8000e70 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1b4      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4925      	ldr	r1, [pc, #148]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_OscConfig+0x278>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fc5a 	bl	8000e70 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c0:	f7fe fc56 	bl	8000e70 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e193      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d036      	beq.n	8002658 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_RCC_OscConfig+0x27c>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7fe fc3a 	bl	8000e70 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002600:	f7fe fc36 	bl	8000e70 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e173      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x234>
 800261e:	e01b      	b.n	8002658 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_OscConfig+0x27c>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7fe fc23 	bl	8000e70 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	e00e      	b.n	800264c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262e:	f7fe fc1f 	bl	8000e70 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d907      	bls.n	800264c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e15c      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
 8002640:	40023800 	.word	0x40023800
 8002644:	42470000 	.word	0x42470000
 8002648:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b8a      	ldr	r3, [pc, #552]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ea      	bne.n	800262e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8097 	beq.w	8002794 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b83      	ldr	r3, [pc, #524]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b7f      	ldr	r3, [pc, #508]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a7e      	ldr	r2, [pc, #504]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b7c      	ldr	r3, [pc, #496]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b79      	ldr	r3, [pc, #484]	; (800287c <HAL_RCC_OscConfig+0x4b0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b76      	ldr	r3, [pc, #472]	; (800287c <HAL_RCC_OscConfig+0x4b0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a75      	ldr	r2, [pc, #468]	; (800287c <HAL_RCC_OscConfig+0x4b0>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7fe fbdf 	bl	8000e70 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe fbdb 	bl	8000e70 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e118      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b6c      	ldr	r3, [pc, #432]	; (800287c <HAL_RCC_OscConfig+0x4b0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x31e>
 80026dc:	4b66      	ldr	r3, [pc, #408]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a65      	ldr	r2, [pc, #404]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	e01c      	b.n	8002724 <HAL_RCC_OscConfig+0x358>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x340>
 80026f2:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a60      	ldr	r2, [pc, #384]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	4b5e      	ldr	r3, [pc, #376]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a5d      	ldr	r2, [pc, #372]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0x358>
 800270c:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a59      	ldr	r2, [pc, #356]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	4b57      	ldr	r3, [pc, #348]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a56      	ldr	r2, [pc, #344]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 800271e:	f023 0304 	bic.w	r3, r3, #4
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7fe fba0 	bl	8000e70 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe fb9c 	bl	8000e70 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0d7      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274a:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ee      	beq.n	8002734 <HAL_RCC_OscConfig+0x368>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe fb8a 	bl	8000e70 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe fb86 	bl	8000e70 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0c1      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002776:	4b40      	ldr	r3, [pc, #256]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ee      	bne.n	8002760 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	4a3a      	ldr	r2, [pc, #232]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002792:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80ad 	beq.w	80028f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800279e:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d060      	beq.n	800286c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d145      	bne.n	800283e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b33      	ldr	r3, [pc, #204]	; (8002880 <HAL_RCC_OscConfig+0x4b4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe fb5a 	bl	8000e70 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe fb56 	bl	8000e70 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e093      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	019b      	lsls	r3, r3, #6
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	071b      	lsls	r3, r3, #28
 800280a:	491b      	ldr	r1, [pc, #108]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x4b4>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fb2b 	bl	8000e70 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281e:	f7fe fb27 	bl	8000e70 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e064      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x452>
 800283c:	e05c      	b.n	80028f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCC_OscConfig+0x4b4>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fb14 	bl	8000e70 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe fb10 	bl	8000e70 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e04d      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_OscConfig+0x4ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x480>
 800286a:	e045      	b.n	80028f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d107      	bne.n	8002884 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e040      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
 8002878:	40023800 	.word	0x40023800
 800287c:	40007000 	.word	0x40007000
 8002880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002884:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <HAL_RCC_OscConfig+0x538>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d030      	beq.n	80028f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d129      	bne.n	80028f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d122      	bne.n	80028f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028b4:	4013      	ands	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028bc:	4293      	cmp	r3, r2
 80028be:	d119      	bne.n	80028f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	085b      	lsrs	r3, r3, #1
 80028cc:	3b01      	subs	r3, #1
 80028ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d10f      	bne.n	80028f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800

08002908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e041      	b.n	800299e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f839 	bl	80029a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 f9d8 	bl	8002cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d001      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e04e      	b.n	8002a72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <HAL_TIM_Base_Start_IT+0xc4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d022      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fe:	d01d      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d018      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_TIM_Base_Start_IT+0xd0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00e      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d111      	bne.n	8002a60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d010      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0201 	orr.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5e:	e007      	b.n	8002a70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40010000 	.word	0x40010000
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	40010400 	.word	0x40010400
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40001800 	.word	0x40001800

08002a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0202 	mvn.w	r2, #2
 8002ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8ee 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8e0 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8f1 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0204 	mvn.w	r2, #4
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8c4 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8b6 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f8c7 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0208 	mvn.w	r2, #8
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2204      	movs	r2, #4
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f89a 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f88c 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f89d 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0210 	mvn.w	r2, #16
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2208      	movs	r2, #8
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f870 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f862 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f873 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0201 	mvn.w	r2, #1
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd fe82 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b80      	cmp	r3, #128	; 0x80
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f902 	bl	8002e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d107      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f838 	bl	8002ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d10e      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d107      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0220 	mvn.w	r2, #32
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8cc 	bl	8002e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <TIM_Base_SetConfig+0x114>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d00f      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a3d      	ldr	r2, [pc, #244]	; (8002e14 <TIM_Base_SetConfig+0x118>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a3c      	ldr	r2, [pc, #240]	; (8002e18 <TIM_Base_SetConfig+0x11c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <TIM_Base_SetConfig+0x120>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <TIM_Base_SetConfig+0x124>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <TIM_Base_SetConfig+0x114>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02b      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5c:	d027      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2c      	ldr	r2, [pc, #176]	; (8002e14 <TIM_Base_SetConfig+0x118>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d023      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2b      	ldr	r2, [pc, #172]	; (8002e18 <TIM_Base_SetConfig+0x11c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01f      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <TIM_Base_SetConfig+0x120>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01b      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <TIM_Base_SetConfig+0x124>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d017      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a28      	ldr	r2, [pc, #160]	; (8002e24 <TIM_Base_SetConfig+0x128>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <TIM_Base_SetConfig+0x12c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00f      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <TIM_Base_SetConfig+0x130>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00b      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <TIM_Base_SetConfig+0x134>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <TIM_Base_SetConfig+0x138>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d003      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <TIM_Base_SetConfig+0x13c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <TIM_Base_SetConfig+0x114>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d003      	beq.n	8002df4 <TIM_Base_SetConfig+0xf8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <TIM_Base_SetConfig+0x124>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d103      	bne.n	8002dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	615a      	str	r2, [r3, #20]
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800
 8002e1c:	40000c00 	.word	0x40000c00
 8002e20:	40010400 	.word	0x40010400
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800
 8002e30:	40001800 	.word	0x40001800
 8002e34:	40001c00 	.word	0x40001c00
 8002e38:	40002000 	.word	0x40002000

08002e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e03f      	b.n	8002ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd fd8e 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	; 0x24
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f9cb 	bl	8003244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b08a      	sub	sp, #40	; 0x28
 8002f02:	af02      	add	r7, sp, #8
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d17c      	bne.n	8003018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_UART_Transmit+0x2c>
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e075      	b.n	800301a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Transmit+0x3e>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e06e      	b.n	800301a <HAL_UART_Transmit+0x11c>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2221      	movs	r2, #33	; 0x21
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f52:	f7fd ff8d 	bl	8000e70 <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	88fa      	ldrh	r2, [r7, #6]
 8002f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d108      	bne.n	8002f80 <HAL_UART_Transmit+0x82>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d104      	bne.n	8002f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	e003      	b.n	8002f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f90:	e02a      	b.n	8002fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f8a5 	bl	80030ec <UART_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e036      	b.n	800301a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e007      	b.n	8002fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1cf      	bne.n	8002f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2140      	movs	r1, #64	; 0x40
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f875 	bl	80030ec <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e006      	b.n	800301a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b08c      	sub	sp, #48	; 0x30
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	4613      	mov	r3, r2
 800302e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b20      	cmp	r3, #32
 800303a:	d152      	bne.n	80030e2 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e04b      	b.n	80030e4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8003056:	2302      	movs	r3, #2
 8003058:	e044      	b.n	80030e4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	461a      	mov	r2, r3
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f8aa 	bl	80031c8 <UART_Start_Receive_IT>
 8003074:	4603      	mov	r3, r0
 8003076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800307a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800307e:	2b00      	cmp	r3, #0
 8003080:	d12c      	bne.n	80030dc <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	2b01      	cmp	r3, #1
 8003088:	d125      	bne.n	80030d6 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	617b      	str	r3, [r7, #20]
   return(result);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f043 0310 	orr.w	r3, r3, #16
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030c0:	627a      	str	r2, [r7, #36]	; 0x24
 80030c2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	6a39      	ldr	r1, [r7, #32]
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e5      	bne.n	80030a0 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80030d4:	e002      	b.n	80030dc <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80030dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030e0:	e000      	b.n	80030e4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3730      	adds	r7, #48	; 0x30
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b090      	sub	sp, #64	; 0x40
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fc:	e050      	b.n	80031a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d04c      	beq.n	80031a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0x30>
 800310c:	f7fd feb0 	bl	8000e70 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003118:	429a      	cmp	r2, r3
 800311a:	d241      	bcs.n	80031a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	e853 3f00 	ldrex	r3, [r3]
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800313c:	637a      	str	r2, [r7, #52]	; 0x34
 800313e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e5      	bne.n	800311c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3314      	adds	r3, #20
 8003156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	613b      	str	r3, [r7, #16]
   return(result);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	63bb      	str	r3, [r7, #56]	; 0x38
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3314      	adds	r3, #20
 800316e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003170:	623a      	str	r2, [r7, #32]
 8003172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003174:	69f9      	ldr	r1, [r7, #28]
 8003176:	6a3a      	ldr	r2, [r7, #32]
 8003178:	e841 2300 	strex	r3, r2, [r1]
 800317c:	61bb      	str	r3, [r7, #24]
   return(result);
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e5      	bne.n	8003150 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e00f      	b.n	80031c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d09f      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3740      	adds	r7, #64	; 0x40
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	88fa      	ldrh	r2, [r7, #6]
 80031e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2222      	movs	r2, #34	; 0x22
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003214:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0220 	orr.w	r2, r2, #32
 8003234:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003248:	b0c0      	sub	sp, #256	; 0x100
 800324a:	af00      	add	r7, sp, #0
 800324c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	68d9      	ldr	r1, [r3, #12]
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	ea40 0301 	orr.w	r3, r0, r1
 800326c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	431a      	orrs	r2, r3
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	431a      	orrs	r2, r3
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800329c:	f021 010c 	bic.w	r1, r1, #12
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032aa:	430b      	orrs	r3, r1
 80032ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032be:	6999      	ldr	r1, [r3, #24]
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	ea40 0301 	orr.w	r3, r0, r1
 80032ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b8f      	ldr	r3, [pc, #572]	; (8003510 <UART_SetConfig+0x2cc>)
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d005      	beq.n	80032e4 <UART_SetConfig+0xa0>
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b8d      	ldr	r3, [pc, #564]	; (8003514 <UART_SetConfig+0x2d0>)
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d104      	bne.n	80032ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032e4:	f7fe fad2 	bl	800188c <HAL_RCC_GetPCLK2Freq>
 80032e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032ec:	e003      	b.n	80032f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ee:	f7fe fab9 	bl	8001864 <HAL_RCC_GetPCLK1Freq>
 80032f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003300:	f040 810c 	bne.w	800351c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003308:	2200      	movs	r2, #0
 800330a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800330e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003312:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003316:	4622      	mov	r2, r4
 8003318:	462b      	mov	r3, r5
 800331a:	1891      	adds	r1, r2, r2
 800331c:	65b9      	str	r1, [r7, #88]	; 0x58
 800331e:	415b      	adcs	r3, r3
 8003320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003322:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003326:	4621      	mov	r1, r4
 8003328:	eb12 0801 	adds.w	r8, r2, r1
 800332c:	4629      	mov	r1, r5
 800332e:	eb43 0901 	adc.w	r9, r3, r1
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003346:	4690      	mov	r8, r2
 8003348:	4699      	mov	r9, r3
 800334a:	4623      	mov	r3, r4
 800334c:	eb18 0303 	adds.w	r3, r8, r3
 8003350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003354:	462b      	mov	r3, r5
 8003356:	eb49 0303 	adc.w	r3, r9, r3
 800335a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800336a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800336e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003372:	460b      	mov	r3, r1
 8003374:	18db      	adds	r3, r3, r3
 8003376:	653b      	str	r3, [r7, #80]	; 0x50
 8003378:	4613      	mov	r3, r2
 800337a:	eb42 0303 	adc.w	r3, r2, r3
 800337e:	657b      	str	r3, [r7, #84]	; 0x54
 8003380:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003384:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003388:	f7fc ff92 	bl	80002b0 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4b61      	ldr	r3, [pc, #388]	; (8003518 <UART_SetConfig+0x2d4>)
 8003392:	fba3 2302 	umull	r2, r3, r3, r2
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	011c      	lsls	r4, r3, #4
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033ac:	4642      	mov	r2, r8
 80033ae:	464b      	mov	r3, r9
 80033b0:	1891      	adds	r1, r2, r2
 80033b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80033b4:	415b      	adcs	r3, r3
 80033b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033bc:	4641      	mov	r1, r8
 80033be:	eb12 0a01 	adds.w	sl, r2, r1
 80033c2:	4649      	mov	r1, r9
 80033c4:	eb43 0b01 	adc.w	fp, r3, r1
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033dc:	4692      	mov	sl, r2
 80033de:	469b      	mov	fp, r3
 80033e0:	4643      	mov	r3, r8
 80033e2:	eb1a 0303 	adds.w	r3, sl, r3
 80033e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033ea:	464b      	mov	r3, r9
 80033ec:	eb4b 0303 	adc.w	r3, fp, r3
 80033f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003400:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003404:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003408:	460b      	mov	r3, r1
 800340a:	18db      	adds	r3, r3, r3
 800340c:	643b      	str	r3, [r7, #64]	; 0x40
 800340e:	4613      	mov	r3, r2
 8003410:	eb42 0303 	adc.w	r3, r2, r3
 8003414:	647b      	str	r3, [r7, #68]	; 0x44
 8003416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800341a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800341e:	f7fc ff47 	bl	80002b0 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4611      	mov	r1, r2
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <UART_SetConfig+0x2d4>)
 800342a:	fba3 2301 	umull	r2, r3, r3, r1
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2264      	movs	r2, #100	; 0x64
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	1acb      	subs	r3, r1, r3
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800343e:	4b36      	ldr	r3, [pc, #216]	; (8003518 <UART_SetConfig+0x2d4>)
 8003440:	fba3 2302 	umull	r2, r3, r3, r2
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800344c:	441c      	add	r4, r3
 800344e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003452:	2200      	movs	r2, #0
 8003454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003458:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800345c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003460:	4642      	mov	r2, r8
 8003462:	464b      	mov	r3, r9
 8003464:	1891      	adds	r1, r2, r2
 8003466:	63b9      	str	r1, [r7, #56]	; 0x38
 8003468:	415b      	adcs	r3, r3
 800346a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800346c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003470:	4641      	mov	r1, r8
 8003472:	1851      	adds	r1, r2, r1
 8003474:	6339      	str	r1, [r7, #48]	; 0x30
 8003476:	4649      	mov	r1, r9
 8003478:	414b      	adcs	r3, r1
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003488:	4659      	mov	r1, fp
 800348a:	00cb      	lsls	r3, r1, #3
 800348c:	4651      	mov	r1, sl
 800348e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003492:	4651      	mov	r1, sl
 8003494:	00ca      	lsls	r2, r1, #3
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	4603      	mov	r3, r0
 800349c:	4642      	mov	r2, r8
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034a4:	464b      	mov	r3, r9
 80034a6:	460a      	mov	r2, r1
 80034a8:	eb42 0303 	adc.w	r3, r2, r3
 80034ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034c4:	460b      	mov	r3, r1
 80034c6:	18db      	adds	r3, r3, r3
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ca:	4613      	mov	r3, r2
 80034cc:	eb42 0303 	adc.w	r3, r2, r3
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034da:	f7fc fee9 	bl	80002b0 <__aeabi_uldivmod>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <UART_SetConfig+0x2d4>)
 80034e4:	fba3 1302 	umull	r1, r3, r3, r2
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	2164      	movs	r1, #100	; 0x64
 80034ec:	fb01 f303 	mul.w	r3, r1, r3
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	3332      	adds	r3, #50	; 0x32
 80034f6:	4a08      	ldr	r2, [pc, #32]	; (8003518 <UART_SetConfig+0x2d4>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	f003 0207 	and.w	r2, r3, #7
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4422      	add	r2, r4
 800350a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800350c:	e106      	b.n	800371c <UART_SetConfig+0x4d8>
 800350e:	bf00      	nop
 8003510:	40011000 	.word	0x40011000
 8003514:	40011400 	.word	0x40011400
 8003518:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800351c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003520:	2200      	movs	r2, #0
 8003522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003526:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800352a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800352e:	4642      	mov	r2, r8
 8003530:	464b      	mov	r3, r9
 8003532:	1891      	adds	r1, r2, r2
 8003534:	6239      	str	r1, [r7, #32]
 8003536:	415b      	adcs	r3, r3
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
 800353a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800353e:	4641      	mov	r1, r8
 8003540:	1854      	adds	r4, r2, r1
 8003542:	4649      	mov	r1, r9
 8003544:	eb43 0501 	adc.w	r5, r3, r1
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	00eb      	lsls	r3, r5, #3
 8003552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003556:	00e2      	lsls	r2, r4, #3
 8003558:	4614      	mov	r4, r2
 800355a:	461d      	mov	r5, r3
 800355c:	4643      	mov	r3, r8
 800355e:	18e3      	adds	r3, r4, r3
 8003560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003564:	464b      	mov	r3, r9
 8003566:	eb45 0303 	adc.w	r3, r5, r3
 800356a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800357a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800358a:	4629      	mov	r1, r5
 800358c:	008b      	lsls	r3, r1, #2
 800358e:	4621      	mov	r1, r4
 8003590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003594:	4621      	mov	r1, r4
 8003596:	008a      	lsls	r2, r1, #2
 8003598:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800359c:	f7fc fe88 	bl	80002b0 <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4b60      	ldr	r3, [pc, #384]	; (8003728 <UART_SetConfig+0x4e4>)
 80035a6:	fba3 2302 	umull	r2, r3, r3, r2
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	011c      	lsls	r4, r3, #4
 80035ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035c0:	4642      	mov	r2, r8
 80035c2:	464b      	mov	r3, r9
 80035c4:	1891      	adds	r1, r2, r2
 80035c6:	61b9      	str	r1, [r7, #24]
 80035c8:	415b      	adcs	r3, r3
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d0:	4641      	mov	r1, r8
 80035d2:	1851      	adds	r1, r2, r1
 80035d4:	6139      	str	r1, [r7, #16]
 80035d6:	4649      	mov	r1, r9
 80035d8:	414b      	adcs	r3, r1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035e8:	4659      	mov	r1, fp
 80035ea:	00cb      	lsls	r3, r1, #3
 80035ec:	4651      	mov	r1, sl
 80035ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035f2:	4651      	mov	r1, sl
 80035f4:	00ca      	lsls	r2, r1, #3
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	4642      	mov	r2, r8
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003604:	464b      	mov	r3, r9
 8003606:	460a      	mov	r2, r1
 8003608:	eb42 0303 	adc.w	r3, r2, r3
 800360c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	67bb      	str	r3, [r7, #120]	; 0x78
 800361a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003628:	4649      	mov	r1, r9
 800362a:	008b      	lsls	r3, r1, #2
 800362c:	4641      	mov	r1, r8
 800362e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003632:	4641      	mov	r1, r8
 8003634:	008a      	lsls	r2, r1, #2
 8003636:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800363a:	f7fc fe39 	bl	80002b0 <__aeabi_uldivmod>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4611      	mov	r1, r2
 8003644:	4b38      	ldr	r3, [pc, #224]	; (8003728 <UART_SetConfig+0x4e4>)
 8003646:	fba3 2301 	umull	r2, r3, r3, r1
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2264      	movs	r2, #100	; 0x64
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	1acb      	subs	r3, r1, r3
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	3332      	adds	r3, #50	; 0x32
 8003658:	4a33      	ldr	r2, [pc, #204]	; (8003728 <UART_SetConfig+0x4e4>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003664:	441c      	add	r4, r3
 8003666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366a:	2200      	movs	r2, #0
 800366c:	673b      	str	r3, [r7, #112]	; 0x70
 800366e:	677a      	str	r2, [r7, #116]	; 0x74
 8003670:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	1891      	adds	r1, r2, r2
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	415b      	adcs	r3, r3
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003684:	4641      	mov	r1, r8
 8003686:	1851      	adds	r1, r2, r1
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	4649      	mov	r1, r9
 800368c:	414b      	adcs	r3, r1
 800368e:	607b      	str	r3, [r7, #4]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800369c:	4659      	mov	r1, fp
 800369e:	00cb      	lsls	r3, r1, #3
 80036a0:	4651      	mov	r1, sl
 80036a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036a6:	4651      	mov	r1, sl
 80036a8:	00ca      	lsls	r2, r1, #3
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	4642      	mov	r2, r8
 80036b2:	189b      	adds	r3, r3, r2
 80036b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036b6:	464b      	mov	r3, r9
 80036b8:	460a      	mov	r2, r1
 80036ba:	eb42 0303 	adc.w	r3, r2, r3
 80036be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	663b      	str	r3, [r7, #96]	; 0x60
 80036ca:	667a      	str	r2, [r7, #100]	; 0x64
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036d8:	4649      	mov	r1, r9
 80036da:	008b      	lsls	r3, r1, #2
 80036dc:	4641      	mov	r1, r8
 80036de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036e2:	4641      	mov	r1, r8
 80036e4:	008a      	lsls	r2, r1, #2
 80036e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036ea:	f7fc fde1 	bl	80002b0 <__aeabi_uldivmod>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <UART_SetConfig+0x4e4>)
 80036f4:	fba3 1302 	umull	r1, r3, r3, r2
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	2164      	movs	r1, #100	; 0x64
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	3332      	adds	r3, #50	; 0x32
 8003706:	4a08      	ldr	r2, [pc, #32]	; (8003728 <UART_SetConfig+0x4e4>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4422      	add	r2, r4
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003722:	46bd      	mov	sp, r7
 8003724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003728:	51eb851f 	.word	0x51eb851f

0800372c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800372c:	b084      	sub	sp, #16
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	f107 001c 	add.w	r0, r7, #28
 800373a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	d122      	bne.n	800378a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800376c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d105      	bne.n	800377e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa9c 	bl	8003cbc <USB_CoreReset>
 8003784:	4603      	mov	r3, r0
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	e01a      	b.n	80037c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa90 	bl	8003cbc <USB_CoreReset>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
 80037b2:	e005      	b.n	80037c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d10b      	bne.n	80037de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f043 0206 	orr.w	r2, r3, #6
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037ea:	b004      	add	sp, #16
 80037ec:	4770      	bx	lr

080037ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f023 0201 	bic.w	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d115      	bne.n	800385e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800383e:	2001      	movs	r0, #1
 8003840:	f7fd fb22 	bl	8000e88 <HAL_Delay>
      ms++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3301      	adds	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa28 	bl	8003ca0 <USB_GetMode>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d01e      	beq.n	8003894 <USB_SetCurrentMode+0x84>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b31      	cmp	r3, #49	; 0x31
 800385a:	d9f0      	bls.n	800383e <USB_SetCurrentMode+0x2e>
 800385c:	e01a      	b.n	8003894 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d115      	bne.n	8003890 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003870:	2001      	movs	r0, #1
 8003872:	f7fd fb09 	bl	8000e88 <HAL_Delay>
      ms++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3301      	adds	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fa0f 	bl	8003ca0 <USB_GetMode>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <USB_SetCurrentMode+0x84>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b31      	cmp	r3, #49	; 0x31
 800388c:	d9f0      	bls.n	8003870 <USB_SetCurrentMode+0x60>
 800388e:	e001      	b.n	8003894 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e005      	b.n	80038a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b32      	cmp	r3, #50	; 0x32
 8003898:	d101      	bne.n	800389e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038a8:	b084      	sub	sp, #16
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	e009      	b.n	80038dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	3340      	adds	r3, #64	; 0x40
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	2200      	movs	r2, #0
 80038d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	3301      	adds	r3, #1
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b0e      	cmp	r3, #14
 80038e0:	d9f2      	bls.n	80038c8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d11c      	bne.n	8003922 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f6:	f043 0302 	orr.w	r3, r3, #2
 80038fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e005      	b.n	800392e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003934:	461a      	mov	r2, r3
 8003936:	2300      	movs	r3, #0
 8003938:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003940:	4619      	mov	r1, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003948:	461a      	mov	r2, r3
 800394a:	680b      	ldr	r3, [r1, #0]
 800394c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	2b01      	cmp	r3, #1
 8003952:	d10c      	bne.n	800396e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800395a:	2100      	movs	r1, #0
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f965 	bl	8003c2c <USB_SetDevSpeed>
 8003962:	e008      	b.n	8003976 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003964:	2101      	movs	r1, #1
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f960 	bl	8003c2c <USB_SetDevSpeed>
 800396c:	e003      	b.n	8003976 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800396e:	2103      	movs	r1, #3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f95b 	bl	8003c2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003976:	2110      	movs	r1, #16
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f8f3 	bl	8003b64 <USB_FlushTxFifo>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f91f 	bl	8003bcc <USB_FlushRxFifo>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399e:	461a      	mov	r2, r3
 80039a0:	2300      	movs	r3, #0
 80039a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039aa:	461a      	mov	r2, r3
 80039ac:	2300      	movs	r3, #0
 80039ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b6:	461a      	mov	r2, r3
 80039b8:	2300      	movs	r3, #0
 80039ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	e043      	b.n	8003a4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039d8:	d118      	bne.n	8003a0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ec:	461a      	mov	r2, r3
 80039ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	e013      	b.n	8003a1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a02:	461a      	mov	r2, r3
 8003a04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e008      	b.n	8003a1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3301      	adds	r3, #1
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d3b7      	bcc.n	80039c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	e043      	b.n	8003ae0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a6e:	d118      	bne.n	8003aa2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a82:	461a      	mov	r2, r3
 8003a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e013      	b.n	8003ab4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	e008      	b.n	8003ab4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ad8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3301      	adds	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d3b7      	bcc.n	8003a58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003afa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d105      	bne.n	8003b1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f043 0210 	orr.w	r2, r3, #16
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <USB_DevInit+0x2b8>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f043 0208 	orr.w	r2, r3, #8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d107      	bne.n	8003b50 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b48:	f043 0304 	orr.w	r3, r3, #4
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b5c:	b004      	add	sp, #16
 8003b5e:	4770      	bx	lr
 8003b60:	803c3800 	.word	0x803c3800

08003b64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3301      	adds	r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <USB_FlushTxFifo+0x64>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e01b      	b.n	8003bbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	daf2      	bge.n	8003b72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	019b      	lsls	r3, r3, #6
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a08      	ldr	r2, [pc, #32]	; (8003bc8 <USB_FlushTxFifo+0x64>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e006      	b.n	8003bbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d0f0      	beq.n	8003b9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	00030d40 	.word	0x00030d40

08003bcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <USB_FlushRxFifo+0x5c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e018      	b.n	8003c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	daf2      	bge.n	8003bd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <USB_FlushRxFifo+0x5c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e006      	b.n	8003c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d0f0      	beq.n	8003bfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	00030d40 	.word	0x00030d40

08003c2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003c78:	f023 0303 	bic.w	r3, r3, #3
 8003c7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f003 0301 	and.w	r3, r3, #1
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <USB_CoreReset+0x64>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e01b      	b.n	8003d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	daf2      	bge.n	8003cc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f043 0201 	orr.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <USB_CoreReset+0x64>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e006      	b.n	8003d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d0f0      	beq.n	8003cf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	00030d40 	.word	0x00030d40

08003d24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d36:	2b84      	cmp	r3, #132	; 0x84
 8003d38:	d005      	beq.n	8003d46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	3303      	adds	r3, #3
 8003d44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d58:	f000 faf6 	bl	8004348 <vTaskStartScheduler>
  
  return osOK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d64:	b089      	sub	sp, #36	; 0x24
 8003d66:	af04      	add	r7, sp, #16
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <osThreadCreate+0x54>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01c      	beq.n	8003db6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685c      	ldr	r4, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691e      	ldr	r6, [r3, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ffc8 	bl	8003d24 <makeFreeRtosPriority>
 8003d94:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d9e:	9202      	str	r2, [sp, #8]
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	9100      	str	r1, [sp, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4632      	mov	r2, r6
 8003da8:	4629      	mov	r1, r5
 8003daa:	4620      	mov	r0, r4
 8003dac:	f000 f8ed 	bl	8003f8a <xTaskCreateStatic>
 8003db0:	4603      	mov	r3, r0
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e01c      	b.n	8003df0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685c      	ldr	r4, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dc2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ffaa 	bl	8003d24 <makeFreeRtosPriority>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	f107 030c 	add.w	r3, r7, #12
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9200      	str	r2, [sp, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	4632      	mov	r2, r6
 8003dde:	4629      	mov	r1, r5
 8003de0:	4620      	mov	r0, r4
 8003de2:	f000 f92f 	bl	8004044 <xTaskCreate>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d001      	beq.n	8003df0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	e000      	b.n	8003df2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003df0:	68fb      	ldr	r3, [r7, #12]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dfa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <osDelay+0x16>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	e000      	b.n	8003e12 <osDelay+0x18>
 8003e10:	2301      	movs	r3, #1
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fa64 	bl	80042e0 <vTaskDelay>
  
  return osOK;
 8003e18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f103 0208 	add.w	r2, r3, #8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f103 0208 	add.w	r2, r3, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f103 0208 	add.w	r2, r3, #8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	601a      	str	r2, [r3, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d103      	bne.n	8003ee4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	e00c      	b.n	8003efe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e002      	b.n	8003ef2 <vListInsert+0x2e>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d2f6      	bcs.n	8003eec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	601a      	str	r2, [r3, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6892      	ldr	r2, [r2, #8]
 8003f4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6852      	ldr	r2, [r2, #4]
 8003f56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d103      	bne.n	8003f6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	1e5a      	subs	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b08e      	sub	sp, #56	; 0x38
 8003f8e:	af04      	add	r7, sp, #16
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fb0:	bf00      	nop
 8003fb2:	e7fe      	b.n	8003fb2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <xTaskCreateStatic+0x46>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	61fb      	str	r3, [r7, #28]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fd0:	23a0      	movs	r3, #160	; 0xa0
 8003fd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fd8:	d00a      	beq.n	8003ff0 <xTaskCreateStatic+0x66>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	61bb      	str	r3, [r7, #24]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ff0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01e      	beq.n	8004036 <xTaskCreateStatic+0xac>
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01b      	beq.n	8004036 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004006:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	2202      	movs	r2, #2
 800400c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004010:	2300      	movs	r3, #0
 8004012:	9303      	str	r3, [sp, #12]
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	9302      	str	r3, [sp, #8]
 8004018:	f107 0314 	add.w	r3, r7, #20
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f851 	bl	80040d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800402e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004030:	f000 f8ec 	bl	800420c <prvAddNewTaskToReadyList>
 8004034:	e001      	b.n	800403a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800403a:	697b      	ldr	r3, [r7, #20]
	}
 800403c:	4618      	mov	r0, r3
 800403e:	3728      	adds	r7, #40	; 0x28
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08c      	sub	sp, #48	; 0x30
 8004048:	af04      	add	r7, sp, #16
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fef5 	bl	8004e48 <pvPortMalloc>
 800405e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00e      	beq.n	8004084 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004066:	20a0      	movs	r0, #160	; 0xa0
 8004068:	f000 feee 	bl	8004e48 <pvPortMalloc>
 800406c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
 800407a:	e005      	b.n	8004088 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800407c:	6978      	ldr	r0, [r7, #20]
 800407e:	f000 ffaf 	bl	8004fe0 <vPortFree>
 8004082:	e001      	b.n	8004088 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d017      	beq.n	80040be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	2300      	movs	r3, #0
 800409a:	9303      	str	r3, [sp, #12]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	9302      	str	r3, [sp, #8]
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f80f 	bl	80040d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040b2:	69f8      	ldr	r0, [r7, #28]
 80040b4:	f000 f8aa 	bl	800420c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040b8:	2301      	movs	r3, #1
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	e002      	b.n	80040c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040be:	f04f 33ff 	mov.w	r3, #4294967295
 80040c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040c4:	69bb      	ldr	r3, [r7, #24]
	}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040e8:	3b01      	subs	r3, #1
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f023 0307 	bic.w	r3, r3, #7
 80040f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	617b      	str	r3, [r7, #20]
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01f      	beq.n	800415e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e012      	b.n	800414a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	7819      	ldrb	r1, [r3, #0]
 800412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	3334      	adds	r3, #52	; 0x34
 8004134:	460a      	mov	r2, r1
 8004136:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d006      	beq.n	8004152 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3301      	adds	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2b0f      	cmp	r3, #15
 800414e:	d9e9      	bls.n	8004124 <prvInitialiseNewTask+0x54>
 8004150:	e000      	b.n	8004154 <prvInitialiseNewTask+0x84>
			{
				break;
 8004152:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800415c:	e003      	b.n	8004166 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	2b06      	cmp	r3, #6
 800416a:	d901      	bls.n	8004170 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800416c:	2306      	movs	r3, #6
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	2200      	movs	r2, #0
 8004180:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	3304      	adds	r3, #4
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fe6b 	bl	8003e62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	3318      	adds	r3, #24
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fe66 	bl	8003e62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	f1c3 0207 	rsb	r2, r3, #7
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	334c      	adds	r3, #76	; 0x4c
 80041c0:	224c      	movs	r2, #76	; 0x4c
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 fc38 	bl	8005a3a <memset>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <prvInitialiseNewTask+0x130>)
 80041ce:	651a      	str	r2, [r3, #80]	; 0x50
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	4a0c      	ldr	r2, [pc, #48]	; (8004204 <prvInitialiseNewTask+0x134>)
 80041d4:	655a      	str	r2, [r3, #84]	; 0x54
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <prvInitialiseNewTask+0x138>)
 80041da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	69b8      	ldr	r0, [r7, #24]
 80041e2:	f000 fc1f 	bl	8004a24 <pxPortInitialiseStack>
 80041e6:	4602      	mov	r2, r0
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041f8:	bf00      	nop
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20004c00 	.word	0x20004c00
 8004204:	20004c68 	.word	0x20004c68
 8004208:	20004cd0 	.word	0x20004cd0

0800420c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004214:	f000 fd36 	bl	8004c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004218:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <prvAddNewTaskToReadyList+0xb8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	4a29      	ldr	r2, [pc, #164]	; (80042c4 <prvAddNewTaskToReadyList+0xb8>)
 8004220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004222:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <prvAddNewTaskToReadyList+0xbc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800422a:	4a27      	ldr	r2, [pc, #156]	; (80042c8 <prvAddNewTaskToReadyList+0xbc>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <prvAddNewTaskToReadyList+0xb8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d110      	bne.n	800425a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004238:	f000 facc 	bl	80047d4 <prvInitialiseTaskLists>
 800423c:	e00d      	b.n	800425a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800423e:	4b23      	ldr	r3, [pc, #140]	; (80042cc <prvAddNewTaskToReadyList+0xc0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d109      	bne.n	800425a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <prvAddNewTaskToReadyList+0xbc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	429a      	cmp	r2, r3
 8004252:	d802      	bhi.n	800425a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004254:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <prvAddNewTaskToReadyList+0xbc>)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800425a:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <prvAddNewTaskToReadyList+0xc4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <prvAddNewTaskToReadyList+0xc4>)
 8004262:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	2201      	movs	r2, #1
 800426a:	409a      	lsls	r2, r3
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <prvAddNewTaskToReadyList+0xc8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4313      	orrs	r3, r2
 8004272:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <prvAddNewTaskToReadyList+0xc8>)
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <prvAddNewTaskToReadyList+0xcc>)
 8004284:	441a      	add	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f7ff fdf5 	bl	8003e7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004292:	f000 fd27 	bl	8004ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004296:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <prvAddNewTaskToReadyList+0xc0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00e      	beq.n	80042bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <prvAddNewTaskToReadyList+0xbc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d207      	bcs.n	80042bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <prvAddNewTaskToReadyList+0xd0>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000a48 	.word	0x20000a48
 80042c8:	20000948 	.word	0x20000948
 80042cc:	20000a54 	.word	0x20000a54
 80042d0:	20000a64 	.word	0x20000a64
 80042d4:	20000a50 	.word	0x20000a50
 80042d8:	2000094c 	.word	0x2000094c
 80042dc:	e000ed04 	.word	0xe000ed04

080042e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d017      	beq.n	8004322 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042f2:	4b13      	ldr	r3, [pc, #76]	; (8004340 <vTaskDelay+0x60>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <vTaskDelay+0x30>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60bb      	str	r3, [r7, #8]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004310:	f000 f884 	bl	800441c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004314:	2100      	movs	r1, #0
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fb1e 	bl	8004958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800431c:	f000 f88c 	bl	8004438 <xTaskResumeAll>
 8004320:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <vTaskDelay+0x64>)
 800432a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000a70 	.word	0x20000a70
 8004344:	e000ed04 	.word	0xe000ed04

08004348 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004356:	463a      	mov	r2, r7
 8004358:	1d39      	adds	r1, r7, #4
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc f924 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	9202      	str	r2, [sp, #8]
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	2300      	movs	r3, #0
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	460a      	mov	r2, r1
 8004376:	4921      	ldr	r1, [pc, #132]	; (80043fc <vTaskStartScheduler+0xb4>)
 8004378:	4821      	ldr	r0, [pc, #132]	; (8004400 <vTaskStartScheduler+0xb8>)
 800437a:	f7ff fe06 	bl	8003f8a <xTaskCreateStatic>
 800437e:	4603      	mov	r3, r0
 8004380:	4a20      	ldr	r2, [pc, #128]	; (8004404 <vTaskStartScheduler+0xbc>)
 8004382:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004384:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <vTaskStartScheduler+0xbc>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800438c:	2301      	movs	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e001      	b.n	8004396 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d11b      	bne.n	80043d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	613b      	str	r3, [r7, #16]
}
 80043ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043b0:	4b15      	ldr	r3, [pc, #84]	; (8004408 <vTaskStartScheduler+0xc0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	334c      	adds	r3, #76	; 0x4c
 80043b6:	4a15      	ldr	r2, [pc, #84]	; (800440c <vTaskStartScheduler+0xc4>)
 80043b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043ba:	4b15      	ldr	r3, [pc, #84]	; (8004410 <vTaskStartScheduler+0xc8>)
 80043bc:	f04f 32ff 	mov.w	r2, #4294967295
 80043c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043c2:	4b14      	ldr	r3, [pc, #80]	; (8004414 <vTaskStartScheduler+0xcc>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <vTaskStartScheduler+0xd0>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043ce:	f000 fbb7 	bl	8004b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043d2:	e00e      	b.n	80043f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d10a      	bne.n	80043f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	60fb      	str	r3, [r7, #12]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <vTaskStartScheduler+0xa8>
}
 80043f2:	bf00      	nop
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	0800660c 	.word	0x0800660c
 8004400:	080047a5 	.word	0x080047a5
 8004404:	20000a6c 	.word	0x20000a6c
 8004408:	20000948 	.word	0x20000948
 800440c:	200000e4 	.word	0x200000e4
 8004410:	20000a68 	.word	0x20000a68
 8004414:	20000a54 	.word	0x20000a54
 8004418:	20000a4c 	.word	0x20000a4c

0800441c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <vTaskSuspendAll+0x18>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3301      	adds	r3, #1
 8004426:	4a03      	ldr	r2, [pc, #12]	; (8004434 <vTaskSuspendAll+0x18>)
 8004428:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800442a:	bf00      	nop
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	20000a70 	.word	0x20000a70

08004438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004446:	4b41      	ldr	r3, [pc, #260]	; (800454c <xTaskResumeAll+0x114>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <xTaskResumeAll+0x2c>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	603b      	str	r3, [r7, #0]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004464:	f000 fc0e 	bl	8004c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004468:	4b38      	ldr	r3, [pc, #224]	; (800454c <xTaskResumeAll+0x114>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3b01      	subs	r3, #1
 800446e:	4a37      	ldr	r2, [pc, #220]	; (800454c <xTaskResumeAll+0x114>)
 8004470:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004472:	4b36      	ldr	r3, [pc, #216]	; (800454c <xTaskResumeAll+0x114>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d161      	bne.n	800453e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800447a:	4b35      	ldr	r3, [pc, #212]	; (8004550 <xTaskResumeAll+0x118>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d05d      	beq.n	800453e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004482:	e02e      	b.n	80044e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004484:	4b33      	ldr	r3, [pc, #204]	; (8004554 <xTaskResumeAll+0x11c>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3318      	adds	r3, #24
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fd50 	bl	8003f36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3304      	adds	r3, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fd4b 	bl	8003f36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	2201      	movs	r2, #1
 80044a6:	409a      	lsls	r2, r3
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <xTaskResumeAll+0x120>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <xTaskResumeAll+0x120>)
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a27      	ldr	r2, [pc, #156]	; (800455c <xTaskResumeAll+0x124>)
 80044c0:	441a      	add	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f7ff fcd7 	bl	8003e7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <xTaskResumeAll+0x128>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80044dc:	4b21      	ldr	r3, [pc, #132]	; (8004564 <xTaskResumeAll+0x12c>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <xTaskResumeAll+0x11c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1cc      	bne.n	8004484 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044f0:	f000 fa12 	bl	8004918 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044f4:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <xTaskResumeAll+0x130>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d010      	beq.n	8004522 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004500:	f000 f836 	bl	8004570 <xTaskIncrementTick>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800450a:	4b16      	ldr	r3, [pc, #88]	; (8004564 <xTaskResumeAll+0x12c>)
 800450c:	2201      	movs	r2, #1
 800450e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3b01      	subs	r3, #1
 8004514:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f1      	bne.n	8004500 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800451c:	4b12      	ldr	r3, [pc, #72]	; (8004568 <xTaskResumeAll+0x130>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <xTaskResumeAll+0x12c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800452a:	2301      	movs	r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <xTaskResumeAll+0x134>)
 8004530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800453e:	f000 fbd1 	bl	8004ce4 <vPortExitCritical>

	return xAlreadyYielded;
 8004542:	68bb      	ldr	r3, [r7, #8]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000a70 	.word	0x20000a70
 8004550:	20000a48 	.word	0x20000a48
 8004554:	20000a08 	.word	0x20000a08
 8004558:	20000a50 	.word	0x20000a50
 800455c:	2000094c 	.word	0x2000094c
 8004560:	20000948 	.word	0x20000948
 8004564:	20000a5c 	.word	0x20000a5c
 8004568:	20000a58 	.word	0x20000a58
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800457a:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <xTaskIncrementTick+0x144>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f040 808e 	bne.w	80046a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004584:	4b4c      	ldr	r3, [pc, #304]	; (80046b8 <xTaskIncrementTick+0x148>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800458c:	4a4a      	ldr	r2, [pc, #296]	; (80046b8 <xTaskIncrementTick+0x148>)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d120      	bne.n	80045da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004598:	4b48      	ldr	r3, [pc, #288]	; (80046bc <xTaskIncrementTick+0x14c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	603b      	str	r3, [r7, #0]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xTaskIncrementTick+0x46>
 80045b8:	4b40      	ldr	r3, [pc, #256]	; (80046bc <xTaskIncrementTick+0x14c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	4b40      	ldr	r3, [pc, #256]	; (80046c0 <xTaskIncrementTick+0x150>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a3e      	ldr	r2, [pc, #248]	; (80046bc <xTaskIncrementTick+0x14c>)
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	4a3e      	ldr	r2, [pc, #248]	; (80046c0 <xTaskIncrementTick+0x150>)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b3d      	ldr	r3, [pc, #244]	; (80046c4 <xTaskIncrementTick+0x154>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	4a3c      	ldr	r2, [pc, #240]	; (80046c4 <xTaskIncrementTick+0x154>)
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	f000 f99f 	bl	8004918 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045da:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <xTaskIncrementTick+0x158>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d348      	bcc.n	8004676 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e4:	4b35      	ldr	r3, [pc, #212]	; (80046bc <xTaskIncrementTick+0x14c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ee:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <xTaskIncrementTick+0x158>)
 80045f0:	f04f 32ff 	mov.w	r2, #4294967295
 80045f4:	601a      	str	r2, [r3, #0]
					break;
 80045f6:	e03e      	b.n	8004676 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f8:	4b30      	ldr	r3, [pc, #192]	; (80046bc <xTaskIncrementTick+0x14c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d203      	bcs.n	8004618 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004610:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <xTaskIncrementTick+0x158>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004616:	e02e      	b.n	8004676 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	3304      	adds	r3, #4
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fc8a 	bl	8003f36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3318      	adds	r3, #24
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fc81 	bl	8003f36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	2201      	movs	r2, #1
 800463a:	409a      	lsls	r2, r3
 800463c:	4b23      	ldr	r3, [pc, #140]	; (80046cc <xTaskIncrementTick+0x15c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4313      	orrs	r3, r2
 8004642:	4a22      	ldr	r2, [pc, #136]	; (80046cc <xTaskIncrementTick+0x15c>)
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <xTaskIncrementTick+0x160>)
 8004654:	441a      	add	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	3304      	adds	r3, #4
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f7ff fc0d 	bl	8003e7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <xTaskIncrementTick+0x164>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	429a      	cmp	r2, r3
 800466e:	d3b9      	bcc.n	80045e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004674:	e7b6      	b.n	80045e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004676:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <xTaskIncrementTick+0x164>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	4914      	ldr	r1, [pc, #80]	; (80046d0 <xTaskIncrementTick+0x160>)
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d901      	bls.n	8004692 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800468e:	2301      	movs	r3, #1
 8004690:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004692:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <xTaskIncrementTick+0x168>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800469a:	2301      	movs	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e004      	b.n	80046aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80046a0:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <xTaskIncrementTick+0x16c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	4a0d      	ldr	r2, [pc, #52]	; (80046dc <xTaskIncrementTick+0x16c>)
 80046a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80046aa:	697b      	ldr	r3, [r7, #20]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000a70 	.word	0x20000a70
 80046b8:	20000a4c 	.word	0x20000a4c
 80046bc:	20000a00 	.word	0x20000a00
 80046c0:	20000a04 	.word	0x20000a04
 80046c4:	20000a60 	.word	0x20000a60
 80046c8:	20000a68 	.word	0x20000a68
 80046cc:	20000a50 	.word	0x20000a50
 80046d0:	2000094c 	.word	0x2000094c
 80046d4:	20000948 	.word	0x20000948
 80046d8:	20000a5c 	.word	0x20000a5c
 80046dc:	20000a58 	.word	0x20000a58

080046e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046e6:	4b29      	ldr	r3, [pc, #164]	; (800478c <vTaskSwitchContext+0xac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046ee:	4b28      	ldr	r3, [pc, #160]	; (8004790 <vTaskSwitchContext+0xb0>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046f4:	e044      	b.n	8004780 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80046f6:	4b26      	ldr	r3, [pc, #152]	; (8004790 <vTaskSwitchContext+0xb0>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <vTaskSwitchContext+0xb4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800470a:	7afb      	ldrb	r3, [r7, #11]
 800470c:	f1c3 031f 	rsb	r3, r3, #31
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	4921      	ldr	r1, [pc, #132]	; (8004798 <vTaskSwitchContext+0xb8>)
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	607b      	str	r3, [r7, #4]
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <vTaskSwitchContext+0x5a>
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4a14      	ldr	r2, [pc, #80]	; (8004798 <vTaskSwitchContext+0xb8>)
 8004748:	4413      	add	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	3308      	adds	r3, #8
 800475e:	429a      	cmp	r2, r3
 8004760:	d104      	bne.n	800476c <vTaskSwitchContext+0x8c>
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	605a      	str	r2, [r3, #4]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	4a0a      	ldr	r2, [pc, #40]	; (800479c <vTaskSwitchContext+0xbc>)
 8004774:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <vTaskSwitchContext+0xbc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	334c      	adds	r3, #76	; 0x4c
 800477c:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <vTaskSwitchContext+0xc0>)
 800477e:	6013      	str	r3, [r2, #0]
}
 8004780:	bf00      	nop
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	20000a70 	.word	0x20000a70
 8004790:	20000a5c 	.word	0x20000a5c
 8004794:	20000a50 	.word	0x20000a50
 8004798:	2000094c 	.word	0x2000094c
 800479c:	20000948 	.word	0x20000948
 80047a0:	200000e4 	.word	0x200000e4

080047a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047ac:	f000 f852 	bl	8004854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <prvIdleTask+0x28>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d9f9      	bls.n	80047ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <prvIdleTask+0x2c>)
 80047ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047c8:	e7f0      	b.n	80047ac <prvIdleTask+0x8>
 80047ca:	bf00      	nop
 80047cc:	2000094c 	.word	0x2000094c
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047da:	2300      	movs	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	e00c      	b.n	80047fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4a12      	ldr	r2, [pc, #72]	; (8004834 <prvInitialiseTaskLists+0x60>)
 80047ec:	4413      	add	r3, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fb17 	bl	8003e22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3301      	adds	r3, #1
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b06      	cmp	r3, #6
 80047fe:	d9ef      	bls.n	80047e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004800:	480d      	ldr	r0, [pc, #52]	; (8004838 <prvInitialiseTaskLists+0x64>)
 8004802:	f7ff fb0e 	bl	8003e22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004806:	480d      	ldr	r0, [pc, #52]	; (800483c <prvInitialiseTaskLists+0x68>)
 8004808:	f7ff fb0b 	bl	8003e22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800480c:	480c      	ldr	r0, [pc, #48]	; (8004840 <prvInitialiseTaskLists+0x6c>)
 800480e:	f7ff fb08 	bl	8003e22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004812:	480c      	ldr	r0, [pc, #48]	; (8004844 <prvInitialiseTaskLists+0x70>)
 8004814:	f7ff fb05 	bl	8003e22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004818:	480b      	ldr	r0, [pc, #44]	; (8004848 <prvInitialiseTaskLists+0x74>)
 800481a:	f7ff fb02 	bl	8003e22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800481e:	4b0b      	ldr	r3, [pc, #44]	; (800484c <prvInitialiseTaskLists+0x78>)
 8004820:	4a05      	ldr	r2, [pc, #20]	; (8004838 <prvInitialiseTaskLists+0x64>)
 8004822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <prvInitialiseTaskLists+0x7c>)
 8004826:	4a05      	ldr	r2, [pc, #20]	; (800483c <prvInitialiseTaskLists+0x68>)
 8004828:	601a      	str	r2, [r3, #0]
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	2000094c 	.word	0x2000094c
 8004838:	200009d8 	.word	0x200009d8
 800483c:	200009ec 	.word	0x200009ec
 8004840:	20000a08 	.word	0x20000a08
 8004844:	20000a1c 	.word	0x20000a1c
 8004848:	20000a34 	.word	0x20000a34
 800484c:	20000a00 	.word	0x20000a00
 8004850:	20000a04 	.word	0x20000a04

08004854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800485a:	e019      	b.n	8004890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800485c:	f000 fa12 	bl	8004c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004860:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <prvCheckTasksWaitingTermination+0x50>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fb62 	bl	8003f36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <prvCheckTasksWaitingTermination+0x54>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3b01      	subs	r3, #1
 8004878:	4a0b      	ldr	r2, [pc, #44]	; (80048a8 <prvCheckTasksWaitingTermination+0x54>)
 800487a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <prvCheckTasksWaitingTermination+0x58>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3b01      	subs	r3, #1
 8004882:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <prvCheckTasksWaitingTermination+0x58>)
 8004884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004886:	f000 fa2d 	bl	8004ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f810 	bl	80048b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <prvCheckTasksWaitingTermination+0x58>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e1      	bne.n	800485c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000a1c 	.word	0x20000a1c
 80048a8:	20000a48 	.word	0x20000a48
 80048ac:	20000a30 	.word	0x20000a30

080048b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	334c      	adds	r3, #76	; 0x4c
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 f8d5 	bl	8005a6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fb85 	bl	8004fe0 <vPortFree>
				vPortFree( pxTCB );
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fb82 	bl	8004fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048dc:	e018      	b.n	8004910 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d103      	bne.n	80048f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fb79 	bl	8004fe0 <vPortFree>
	}
 80048ee:	e00f      	b.n	8004910 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d00a      	beq.n	8004910 <prvDeleteTCB+0x60>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60fb      	str	r3, [r7, #12]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <prvDeleteTCB+0x5e>
	}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800491e:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <prvResetNextTaskUnblockTime+0x38>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <prvResetNextTaskUnblockTime+0x3c>)
 800492a:	f04f 32ff 	mov.w	r2, #4294967295
 800492e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004930:	e008      	b.n	8004944 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <prvResetNextTaskUnblockTime+0x38>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4a04      	ldr	r2, [pc, #16]	; (8004954 <prvResetNextTaskUnblockTime+0x3c>)
 8004942:	6013      	str	r3, [r2, #0]
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	20000a00 	.word	0x20000a00
 8004954:	20000a68 	.word	0x20000a68

08004958 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004962:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004968:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3304      	adds	r3, #4
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fae1 	bl	8003f36 <uxListRemove>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800497a:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	2201      	movs	r2, #1
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	43da      	mvns	r2, r3
 8004988:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <prvAddCurrentTaskToDelayedList+0xb8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4013      	ands	r3, r2
 800498e:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004990:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d10a      	bne.n	80049b0 <prvAddCurrentTaskToDelayedList+0x58>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	481a      	ldr	r0, [pc, #104]	; (8004a14 <prvAddCurrentTaskToDelayedList+0xbc>)
 80049aa:	f7ff fa67 	bl	8003e7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049ae:	e026      	b.n	80049fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4413      	add	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049b8:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d209      	bcs.n	80049dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049c8:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <prvAddCurrentTaskToDelayedList+0xc0>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f7ff fa75 	bl	8003ec4 <vListInsert>
}
 80049da:	e010      	b.n	80049fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <prvAddCurrentTaskToDelayedList+0xc4>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f7ff fa6b 	bl	8003ec4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d202      	bcs.n	80049fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049f8:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	6013      	str	r3, [r2, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000a4c 	.word	0x20000a4c
 8004a0c:	20000948 	.word	0x20000948
 8004a10:	20000a50 	.word	0x20000a50
 8004a14:	20000a34 	.word	0x20000a34
 8004a18:	20000a04 	.word	0x20000a04
 8004a1c:	20000a00 	.word	0x20000a00
 8004a20:	20000a68 	.word	0x20000a68

08004a24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3b04      	subs	r3, #4
 8004a34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3b04      	subs	r3, #4
 8004a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f023 0201 	bic.w	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3b04      	subs	r3, #4
 8004a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a54:	4a0c      	ldr	r2, [pc, #48]	; (8004a88 <pxPortInitialiseStack+0x64>)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3b14      	subs	r3, #20
 8004a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3b04      	subs	r3, #4
 8004a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f06f 0202 	mvn.w	r2, #2
 8004a72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3b20      	subs	r3, #32
 8004a78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	08004a8d 	.word	0x08004a8d

08004a8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a96:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <prvTaskExitError+0x54>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9e:	d00a      	beq.n	8004ab6 <prvTaskExitError+0x2a>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60fb      	str	r3, [r7, #12]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <prvTaskExitError+0x28>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	60bb      	str	r3, [r7, #8]
}
 8004ac8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004aca:	bf00      	nop
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0fc      	beq.n	8004acc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ad2:	bf00      	nop
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	2000000c 	.word	0x2000000c
	...

08004af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <pxCurrentTCBConst2>)
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	6808      	ldr	r0, [r1, #0]
 8004af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afa:	f380 8809 	msr	PSP, r0
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f04f 0000 	mov.w	r0, #0
 8004b06:	f380 8811 	msr	BASEPRI, r0
 8004b0a:	4770      	bx	lr
 8004b0c:	f3af 8000 	nop.w

08004b10 <pxCurrentTCBConst2>:
 8004b10:	20000948 	.word	0x20000948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop

08004b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b18:	4808      	ldr	r0, [pc, #32]	; (8004b3c <prvPortStartFirstTask+0x24>)
 8004b1a:	6800      	ldr	r0, [r0, #0]
 8004b1c:	6800      	ldr	r0, [r0, #0]
 8004b1e:	f380 8808 	msr	MSP, r0
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f380 8814 	msr	CONTROL, r0
 8004b2a:	b662      	cpsie	i
 8004b2c:	b661      	cpsie	f
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	df00      	svc	0
 8004b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b3a:	bf00      	nop
 8004b3c:	e000ed08 	.word	0xe000ed08

08004b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b46:	4b46      	ldr	r3, [pc, #280]	; (8004c60 <xPortStartScheduler+0x120>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a46      	ldr	r2, [pc, #280]	; (8004c64 <xPortStartScheduler+0x124>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d10a      	bne.n	8004b66 <xPortStartScheduler+0x26>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	613b      	str	r3, [r7, #16]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b66:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <xPortStartScheduler+0x120>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3f      	ldr	r2, [pc, #252]	; (8004c68 <xPortStartScheduler+0x128>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10a      	bne.n	8004b86 <xPortStartScheduler+0x46>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b86:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <xPortStartScheduler+0x12c>)
 8004b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	22ff      	movs	r2, #255	; 0xff
 8004b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <xPortStartScheduler+0x130>)
 8004bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bae:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <xPortStartScheduler+0x134>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bb4:	e009      	b.n	8004bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004bb6:	4b2f      	ldr	r3, [pc, #188]	; (8004c74 <xPortStartScheduler+0x134>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	4a2d      	ldr	r2, [pc, #180]	; (8004c74 <xPortStartScheduler+0x134>)
 8004bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d0ef      	beq.n	8004bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bd6:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <xPortStartScheduler+0x134>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1c3 0307 	rsb	r3, r3, #7
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d00a      	beq.n	8004bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	60bb      	str	r3, [r7, #8]
}
 8004bf4:	bf00      	nop
 8004bf6:	e7fe      	b.n	8004bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bf8:	4b1e      	ldr	r3, [pc, #120]	; (8004c74 <xPortStartScheduler+0x134>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <xPortStartScheduler+0x134>)
 8004c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <xPortStartScheduler+0x134>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c0a:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <xPortStartScheduler+0x134>)
 8004c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c16:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <xPortStartScheduler+0x138>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <xPortStartScheduler+0x138>)
 8004c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <xPortStartScheduler+0x138>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a14      	ldr	r2, [pc, #80]	; (8004c78 <xPortStartScheduler+0x138>)
 8004c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c2e:	f000 f8dd 	bl	8004dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <xPortStartScheduler+0x13c>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c38:	f000 f8fc 	bl	8004e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <xPortStartScheduler+0x140>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0f      	ldr	r2, [pc, #60]	; (8004c80 <xPortStartScheduler+0x140>)
 8004c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c48:	f7ff ff66 	bl	8004b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c4c:	f7ff fd48 	bl	80046e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004c50:	f7ff ff1c 	bl	8004a8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	e000ed00 	.word	0xe000ed00
 8004c64:	410fc271 	.word	0x410fc271
 8004c68:	410fc270 	.word	0x410fc270
 8004c6c:	e000e400 	.word	0xe000e400
 8004c70:	20000a74 	.word	0x20000a74
 8004c74:	20000a78 	.word	0x20000a78
 8004c78:	e000ed20 	.word	0xe000ed20
 8004c7c:	2000000c 	.word	0x2000000c
 8004c80:	e000ef34 	.word	0xe000ef34

08004c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	607b      	str	r3, [r7, #4]
}
 8004c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <vPortEnterCritical+0x58>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	4a0d      	ldr	r2, [pc, #52]	; (8004cdc <vPortEnterCritical+0x58>)
 8004ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <vPortEnterCritical+0x58>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10f      	bne.n	8004cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <vPortEnterCritical+0x5c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	603b      	str	r3, [r7, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <vPortEnterCritical+0x4a>
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	2000000c 	.word	0x2000000c
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <vPortExitCritical+0x50>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <vPortExitCritical+0x24>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	607b      	str	r3, [r7, #4]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <vPortExitCritical+0x50>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <vPortExitCritical+0x50>)
 8004d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <vPortExitCritical+0x50>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d105      	bne.n	8004d26 <vPortExitCritical+0x42>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	2000000c 	.word	0x2000000c
	...

08004d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d40:	f3ef 8009 	mrs	r0, PSP
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <pxCurrentTCBConst>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	f01e 0f10 	tst.w	lr, #16
 8004d50:	bf08      	it	eq
 8004d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d5a:	6010      	str	r0, [r2, #0]
 8004d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d64:	f380 8811 	msr	BASEPRI, r0
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f7ff fcb6 	bl	80046e0 <vTaskSwitchContext>
 8004d74:	f04f 0000 	mov.w	r0, #0
 8004d78:	f380 8811 	msr	BASEPRI, r0
 8004d7c:	bc09      	pop	{r0, r3}
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	6808      	ldr	r0, [r1, #0]
 8004d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d86:	f01e 0f10 	tst.w	lr, #16
 8004d8a:	bf08      	it	eq
 8004d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d90:	f380 8809 	msr	PSP, r0
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	f3af 8000 	nop.w

08004da0 <pxCurrentTCBConst>:
 8004da0:	20000948 	.word	0x20000948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop

08004da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	607b      	str	r3, [r7, #4]
}
 8004dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004dc2:	f7ff fbd5 	bl	8004570 <xTaskIncrementTick>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <SysTick_Handler+0x40>)
 8004dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f383 8811 	msr	BASEPRI, r3
}
 8004dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <vPortSetupTimerInterrupt+0x34>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <vPortSetupTimerInterrupt+0x38>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <vPortSetupTimerInterrupt+0x3c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <vPortSetupTimerInterrupt+0x40>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <vPortSetupTimerInterrupt+0x44>)
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e0e:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <vPortSetupTimerInterrupt+0x34>)
 8004e10:	2207      	movs	r2, #7
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	e000e010 	.word	0xe000e010
 8004e24:	e000e018 	.word	0xe000e018
 8004e28:	20000000 	.word	0x20000000
 8004e2c:	10624dd3 	.word	0x10624dd3
 8004e30:	e000e014 	.word	0xe000e014

08004e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e44 <vPortEnableVFP+0x10>
 8004e38:	6801      	ldr	r1, [r0, #0]
 8004e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e3e:	6001      	str	r1, [r0, #0]
 8004e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e42:	bf00      	nop
 8004e44:	e000ed88 	.word	0xe000ed88

08004e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	; 0x28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e54:	f7ff fae2 	bl	800441c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e58:	4b5b      	ldr	r3, [pc, #364]	; (8004fc8 <pvPortMalloc+0x180>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e60:	f000 f920 	bl	80050a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <pvPortMalloc+0x184>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 8093 	bne.w	8004f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01d      	beq.n	8004eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e78:	2208      	movs	r2, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d014      	beq.n	8004eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f023 0307 	bic.w	r3, r3, #7
 8004e90:	3308      	adds	r3, #8
 8004e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	617b      	str	r3, [r7, #20]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d06e      	beq.n	8004f98 <pvPortMalloc+0x150>
 8004eba:	4b45      	ldr	r3, [pc, #276]	; (8004fd0 <pvPortMalloc+0x188>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d869      	bhi.n	8004f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ec4:	4b43      	ldr	r3, [pc, #268]	; (8004fd4 <pvPortMalloc+0x18c>)
 8004ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ec8:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <pvPortMalloc+0x18c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ece:	e004      	b.n	8004eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d903      	bls.n	8004eec <pvPortMalloc+0xa4>
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f1      	bne.n	8004ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004eec:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <pvPortMalloc+0x180>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d050      	beq.n	8004f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2208      	movs	r2, #8
 8004efc:	4413      	add	r3, r2
 8004efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	2308      	movs	r3, #8
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d91f      	bls.n	8004f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <pvPortMalloc+0xf8>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	613b      	str	r3, [r7, #16]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	1ad2      	subs	r2, r2, r3
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f52:	69b8      	ldr	r0, [r7, #24]
 8004f54:	f000 f908 	bl	8005168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	4a1b      	ldr	r2, [pc, #108]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f66:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <pvPortMalloc+0x190>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d203      	bcs.n	8004f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f72:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <pvPortMalloc+0x190>)
 8004f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <pvPortMalloc+0x184>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <pvPortMalloc+0x194>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a11      	ldr	r2, [pc, #68]	; (8004fdc <pvPortMalloc+0x194>)
 8004f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f98:	f7ff fa4e 	bl	8004438 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <pvPortMalloc+0x174>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60fb      	str	r3, [r7, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <pvPortMalloc+0x172>
	return pvReturn;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3728      	adds	r7, #40	; 0x28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20004684 	.word	0x20004684
 8004fcc:	20004698 	.word	0x20004698
 8004fd0:	20004688 	.word	0x20004688
 8004fd4:	2000467c 	.word	0x2000467c
 8004fd8:	2000468c 	.word	0x2000468c
 8004fdc:	20004690 	.word	0x20004690

08004fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d04d      	beq.n	800508e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	425b      	negs	r3, r3
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <vPortFree+0xb8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <vPortFree+0x44>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	60fb      	str	r3, [r7, #12]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <vPortFree+0x62>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	60bb      	str	r3, [r7, #8]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	4b14      	ldr	r3, [pc, #80]	; (8005098 <vPortFree+0xb8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01e      	beq.n	800508e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11a      	bne.n	800508e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <vPortFree+0xb8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	43db      	mvns	r3, r3
 8005062:	401a      	ands	r2, r3
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005068:	f7ff f9d8 	bl	800441c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <vPortFree+0xbc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4413      	add	r3, r2
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <vPortFree+0xbc>)
 8005078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800507a:	6938      	ldr	r0, [r7, #16]
 800507c:	f000 f874 	bl	8005168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <vPortFree+0xc0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3301      	adds	r3, #1
 8005086:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <vPortFree+0xc0>)
 8005088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800508a:	f7ff f9d5 	bl	8004438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800508e:	bf00      	nop
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20004698 	.word	0x20004698
 800509c:	20004688 	.word	0x20004688
 80050a0:	20004694 	.word	0x20004694

080050a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <prvHeapInit+0xac>)
 80050b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3307      	adds	r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0307 	bic.w	r3, r3, #7
 80050ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <prvHeapInit+0xac>)
 80050d4:	4413      	add	r3, r2
 80050d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050dc:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <prvHeapInit+0xb0>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050e2:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <prvHeapInit+0xb0>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	4413      	add	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050f0:	2208      	movs	r2, #8
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0307 	bic.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a15      	ldr	r2, [pc, #84]	; (8005158 <prvHeapInit+0xb4>)
 8005104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <prvHeapInit+0xb4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <prvHeapInit+0xb4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <prvHeapInit+0xb4>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4a0a      	ldr	r2, [pc, #40]	; (800515c <prvHeapInit+0xb8>)
 8005132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4a09      	ldr	r2, [pc, #36]	; (8005160 <prvHeapInit+0xbc>)
 800513a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <prvHeapInit+0xc0>)
 800513e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20000a7c 	.word	0x20000a7c
 8005154:	2000467c 	.word	0x2000467c
 8005158:	20004684 	.word	0x20004684
 800515c:	2000468c 	.word	0x2000468c
 8005160:	20004688 	.word	0x20004688
 8005164:	20004698 	.word	0x20004698

08005168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <prvInsertBlockIntoFreeList+0xac>)
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e002      	b.n	800517c <prvInsertBlockIntoFreeList+0x14>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	d8f7      	bhi.n	8005176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	4413      	add	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d108      	bne.n	80051aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	441a      	add	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d118      	bne.n	80051f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <prvInsertBlockIntoFreeList+0xb0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d00d      	beq.n	80051e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	441a      	add	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e008      	b.n	80051f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <prvInsertBlockIntoFreeList+0xb0>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e003      	b.n	80051f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d002      	beq.n	8005206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	2000467c 	.word	0x2000467c
 8005218:	20004684 	.word	0x20004684

0800521c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8005224:	1d39      	adds	r1, r7, #4
 8005226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800522a:	2201      	movs	r2, #1
 800522c:	4803      	ldr	r0, [pc, #12]	; (800523c <__io_putchar+0x20>)
 800522e:	f7fd fe66 	bl	8002efe <HAL_UART_Transmit>

	return ch;
 8005232:	687b      	ldr	r3, [r7, #4]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	200003a4 	.word	0x200003a4

08005240 <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	taskENTER_CRITICAL();
 8005248:	f7ff fd1c 	bl	8004c84 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4807      	ldr	r0, [pc, #28]	; (800526c <vPrintString+0x2c>)
 8005250:	f000 fb9e 	bl	8005990 <iprintf>
		fflush( stdout );
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <vPrintString+0x30>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fac2 	bl	80057e4 <fflush>
	}
	taskEXIT_CRITICAL();
 8005260:	f7ff fd40 	bl	8004ce4 <vPortExitCritical>
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	08006614 	.word	0x08006614
 8005270:	200000e4 	.word	0x200000e4

08005274 <change_state>:

led_t led_green, led_red, led_blue;
RGB led_RGB_1;

void change_state(led_t * led, bool state)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	70fb      	strb	r3, [r7, #3]
	CHANGE_LED_STATE(led->GPIO_led,led->GPIO_PIN_led,state);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6858      	ldr	r0, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	891b      	ldrh	r3, [r3, #8]
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	4619      	mov	r1, r3
 800528c:	f7fc f896 	bl	80013bc <HAL_GPIO_WritePin>
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <RGB_GPIOs_init>:

void RGB_GPIOs_init(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
	led_RGB_1.LED_BLUE_RGB=&array_RGB[0];
 800529c:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <RGB_GPIOs_init+0x2c>)
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <RGB_GPIOs_init+0x30>)
 80052a0:	609a      	str	r2, [r3, #8]
	led_RGB_1.LED_RED_RGB=&array_RGB[1];
 80052a2:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <RGB_GPIOs_init+0x2c>)
 80052a4:	4a09      	ldr	r2, [pc, #36]	; (80052cc <RGB_GPIOs_init+0x34>)
 80052a6:	601a      	str	r2, [r3, #0]
	led_RGB_1.LED_GREEN_RGB=&array_RGB[2];
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <RGB_GPIOs_init+0x2c>)
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <RGB_GPIOs_init+0x38>)
 80052ac:	605a      	str	r2, [r3, #4]
	led_RGB_1.RGB_state=OFF;
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <RGB_GPIOs_init+0x2c>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	731a      	strb	r2, [r3, #12]
	led_RGB_1.RGB_color=WHITE;
 80052b4:	4b03      	ldr	r3, [pc, #12]	; (80052c4 <RGB_GPIOs_init+0x2c>)
 80052b6:	2206      	movs	r2, #6
 80052b8:	735a      	strb	r2, [r3, #13]
}
 80052ba:	bf00      	nop
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	2000469c 	.word	0x2000469c
 80052c8:	20000010 	.word	0x20000010
 80052cc:	2000001c 	.word	0x2000001c
 80052d0:	20000028 	.word	0x20000028

080052d4 <update_color_RGB>:

void update_color_RGB(RGB* led_RGB)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	switch(led_RGB->RGB_color)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7b5b      	ldrb	r3, [r3, #13]
 80052e0:	2b06      	cmp	r3, #6
 80052e2:	f200 8096 	bhi.w	8005412 <update_color_RGB+0x13e>
 80052e6:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <update_color_RGB+0x18>)
 80052e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ec:	08005309 	.word	0x08005309
 80052f0:	08005355 	.word	0x08005355
 80052f4:	0800532f 	.word	0x0800532f
 80052f8:	0800537b 	.word	0x0800537b
 80052fc:	080053a1 	.word	0x080053a1
 8005300:	080053c7 	.word	0x080053c7
 8005304:	080053ed 	.word	0x080053ed
		{
		case RED:
			change_state(led_RGB->LED_RED_RGB,ON_);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff ffb0 	bl	8005274 <change_state>
			change_state(led_RGB->LED_BLUE_RGB,OFF_);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ffaa 	bl	8005274 <change_state>
			change_state(led_RGB->LED_GREEN_RGB,OFF_);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff ffa4 	bl	8005274 <change_state>
				break;
 800532c:	e072      	b.n	8005414 <update_color_RGB+0x140>
		case BLUE:
			change_state(led_RGB->LED_RED_RGB,OFF_);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff ff9d 	bl	8005274 <change_state>
			change_state(led_RGB->LED_BLUE_RGB,ON_);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff ff97 	bl	8005274 <change_state>
			change_state(led_RGB->LED_GREEN_RGB,OFF_);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff ff91 	bl	8005274 <change_state>
				break;
 8005352:	e05f      	b.n	8005414 <update_color_RGB+0x140>
		case GREEN:
			change_state(led_RGB->LED_RED_RGB,OFF_);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2100      	movs	r1, #0
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff ff8a 	bl	8005274 <change_state>
			change_state(led_RGB->LED_BLUE_RGB,OFF_);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff ff84 	bl	8005274 <change_state>
			change_state(led_RGB->LED_GREEN_RGB,ON_);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2101      	movs	r1, #1
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff ff7e 	bl	8005274 <change_state>
				break;
 8005378:	e04c      	b.n	8005414 <update_color_RGB+0x140>
		case YELLOW:
			change_state(led_RGB->LED_RED_RGB,ON_);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2101      	movs	r1, #1
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff ff77 	bl	8005274 <change_state>
			change_state(led_RGB->LED_BLUE_RGB,OFF_);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff ff71 	bl	8005274 <change_state>
			change_state(led_RGB->LED_GREEN_RGB,ON_);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2101      	movs	r1, #1
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff ff6b 	bl	8005274 <change_state>
				break;
 800539e:	e039      	b.n	8005414 <update_color_RGB+0x140>
		case PURPLE:
			change_state(led_RGB->LED_RED_RGB,ON_);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2101      	movs	r1, #1
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff ff64 	bl	8005274 <change_state>
			change_state(led_RGB->LED_BLUE_RGB,ON_);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2101      	movs	r1, #1
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff ff5e 	bl	8005274 <change_state>
			change_state(led_RGB->LED_GREEN_RGB,OFF_);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff ff58 	bl	8005274 <change_state>
				break;
 80053c4:	e026      	b.n	8005414 <update_color_RGB+0x140>
		case CIAN:
			change_state(led_RGB->LED_RED_RGB,OFF_);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ff51 	bl	8005274 <change_state>
			change_state(led_RGB->LED_BLUE_RGB,ON_);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2101      	movs	r1, #1
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff ff4b 	bl	8005274 <change_state>
			change_state(led_RGB->LED_GREEN_RGB,ON_);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2101      	movs	r1, #1
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff ff45 	bl	8005274 <change_state>
				break;
 80053ea:	e013      	b.n	8005414 <update_color_RGB+0x140>
		case WHITE:
			change_state(led_RGB->LED_RED_RGB,ON_);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2101      	movs	r1, #1
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff ff3e 	bl	8005274 <change_state>
			change_state(led_RGB->LED_BLUE_RGB,ON_);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2101      	movs	r1, #1
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ff38 	bl	8005274 <change_state>
			change_state(led_RGB->LED_GREEN_RGB,ON_);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2101      	movs	r1, #1
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff ff32 	bl	8005274 <change_state>
				break;
 8005410:	e000      	b.n	8005414 <update_color_RGB+0x140>
		default:
			break;
 8005412:	bf00      	nop
		}
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <update_state_RGB>:

void update_state_RGB(RGB* led_RGB)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	switch(led_RGB->RGB_state)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	7b1b      	ldrb	r3, [r3, #12]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d009      	beq.n	8005440 <update_state_RGB+0x24>
 800542c:	2b02      	cmp	r3, #2
 800542e:	dc09      	bgt.n	8005444 <update_state_RGB+0x28>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <update_state_RGB+0x2c>
 8005434:	2b01      	cmp	r3, #1
 8005436:	d105      	bne.n	8005444 <update_state_RGB+0x28>
	{
	case ON:
		update_color_RGB(led_RGB);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff ff4b 	bl	80052d4 <update_color_RGB>
		break;
 800543e:	e004      	b.n	800544a <update_state_RGB+0x2e>
	case OFF:
		break;
		change_state(led_RGB->LED_BLUE_RGB, OFF_);
	case BLINK:
		break;
 8005440:	bf00      	nop
 8005442:	e002      	b.n	800544a <update_state_RGB+0x2e>
	default:
		break;
 8005444:	bf00      	nop
 8005446:	e000      	b.n	800544a <update_state_RGB+0x2e>
		break;
 8005448:	bf00      	nop
	}
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <RGB_change_color>:

void RGB_change_color(color_t color)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	71fb      	strb	r3, [r7, #7]
	led_RGB_1.RGB_color=color;
 800545e:	4a05      	ldr	r2, [pc, #20]	; (8005474 <RGB_change_color+0x20>)
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	7353      	strb	r3, [r2, #13]
	update_state_RGB(&led_RGB_1);
 8005464:	4803      	ldr	r0, [pc, #12]	; (8005474 <RGB_change_color+0x20>)
 8005466:	f7ff ffd9 	bl	800541c <update_state_RGB>
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	2000469c 	.word	0x2000469c

08005478 <vTask_Leds_RGB>:
		                    "- Jesus    Gonzales               N°SIU e2006\r\n";
//Inicia las tareas de los OA


void vTask_Leds_RGB(void *argument)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]

	RGB_GPIOs_init();
 8005480:	f7ff ff0a 	bl	8005298 <RGB_GPIOs_init>
	RGB_change_color(RED);
 8005484:	2000      	movs	r0, #0
 8005486:	f7ff ffe5 	bl	8005454 <RGB_change_color>
	RGB_change_color(BLUE);
 800548a:	2002      	movs	r0, #2
 800548c:	f7ff ffe2 	bl	8005454 <RGB_change_color>
	RGB_change_color(GREEN);
 8005490:	2001      	movs	r0, #1
 8005492:	f7ff ffdf 	bl	8005454 <RGB_change_color>
	RGB_change_color(YELLOW);
 8005496:	2003      	movs	r0, #3
 8005498:	f7ff ffdc 	bl	8005454 <RGB_change_color>
	RGB_change_color(WHITE);
 800549c:	2006      	movs	r0, #6
 800549e:	f7ff ffd9 	bl	8005454 <RGB_change_color>
	RGB_change_color(CIAN);
 80054a2:	2005      	movs	r0, #5
 80054a4:	f7ff ffd6 	bl	8005454 <RGB_change_color>
	RGB_change_color(PURPLE);
 80054a8:	2004      	movs	r0, #4
 80054aa:	f7ff ffd3 	bl	8005454 <RGB_change_color>
	//HAL_GPIO_WritePin
	vTaskDelay(100);
 80054ae:	2064      	movs	r0, #100	; 0x64
 80054b0:	f7fe ff16 	bl	80042e0 <vTaskDelay>
	while(1)
	{

		vTaskDelay(100);
 80054b4:	2064      	movs	r0, #100	; 0x64
 80054b6:	f7fe ff13 	bl	80042e0 <vTaskDelay>
 80054ba:	e7fb      	b.n	80054b4 <vTask_Leds_RGB+0x3c>

080054bc <app_init>:




	/* App Initialization */
void app_init( void ){
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af02      	add	r7, sp, #8
		  	vPrintString( pcTextForMain );
 80054c2:	4b12      	ldr	r3, [pc, #72]	; (800550c <app_init+0x50>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff feba 	bl	8005240 <vPrintString>
		    // drivers
		    {
		      eboard_init();
 80054cc:	f000 f866 	bl	800559c <eboard_init>
		    }
			BaseType_t ret;

			/* Task Alarma thread at priority 2 */
			ret = xTaskCreate(vTask_Leds_RGB, /* Pointer to the function thats implement the task. */
 80054d0:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <app_init+0x54>)
 80054d2:	9301      	str	r3, [sp, #4]
 80054d4:	2301      	movs	r3, #1
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	2300      	movs	r3, #0
 80054da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054de:	490d      	ldr	r1, [pc, #52]	; (8005514 <app_init+0x58>)
 80054e0:	480d      	ldr	r0, [pc, #52]	; (8005518 <app_init+0x5c>)
 80054e2:	f7fe fdaf 	bl	8004044 <xTaskCreate>
 80054e6:	6078      	str	r0, [r7, #4]
			NULL, /* We are not using the task parameter.		*/
			(tskIDLE_PRIORITY + 1UL), /* This task will run at priority 1. 		*/
			&Task_Leds_RGB); /* We are using a variable as task handle.	*/

			/* Check the task was created successfully. */
			configASSERT(ret == pdPASS);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d00a      	beq.n	8005504 <app_init+0x48>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	603b      	str	r3, [r7, #0]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <app_init+0x46>


			return;
 8005504:	bf00      	nop

}
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000034 	.word	0x20000034
 8005510:	200046ac 	.word	0x200046ac
 8005514:	080066c8 	.word	0x080066c8
 8005518:	08005479 	.word	0x08005479

0800551c <euart_hal_receive>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void euart_hal_receive(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  HAL_UARTEx_ReceiveToIdle_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	b29b      	uxth	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7fd fd76 	bl	8003022 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <eboard_uart_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void eboard_uart_init(void* phuart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af02      	add	r7, sp, #8
 8005546:	6078      	str	r0, [r7, #4]
  euart_init(pheuart_, phuart, tx_buffer_, RB_TX_BUFFER_SIZE_, rx_buffer_, RB_RX_BUFFER_SIZE_);
 8005548:	4807      	ldr	r0, [pc, #28]	; (8005568 <eboard_uart_init+0x28>)
 800554a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <eboard_uart_init+0x2c>)
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005558:	4a05      	ldr	r2, [pc, #20]	; (8005570 <eboard_uart_init+0x30>)
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	f000 f871 	bl	8005642 <euart_init>
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20004bb0 	.word	0x20004bb0
 800556c:	20004ab0 	.word	0x20004ab0
 8005570:	200046b0 	.word	0x200046b0

08005574 <eboard_gpio_init>:

void eboard_gpio_init(eboard_gpio_idx_t idx, void* hgpio)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	6039      	str	r1, [r7, #0]
 800557e:	71fb      	strb	r3, [r7, #7]
	gpios_[idx].hgpio = hgpio;
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	4905      	ldr	r1, [pc, #20]	; (8005598 <eboard_gpio_init+0x24>)
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	2000006c 	.word	0x2000006c

0800559c <eboard_init>:
{
  euart_tx_irq(pheuart_, (void*)huart);
}

void eboard_init(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
  eboard_uart_init((void*)p_huart_selected_);
 80055a2:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <eboard_init+0x48>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff ffca 	bl	8005540 <eboard_uart_init>

  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 80055ac:	2300      	movs	r3, #0
 80055ae:	71fb      	strb	r3, [r7, #7]
 80055b0:	e00f      	b.n	80055d2 <eboard_init+0x36>
  {
    eboard_gpio_init(idx, (void*)(driver_gpios_ + idx));
 80055b2:	79fa      	ldrb	r2, [r7, #7]
 80055b4:	4613      	mov	r3, r2
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	461a      	mov	r2, r3
 80055be:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <eboard_init+0x4c>)
 80055c0:	441a      	add	r2, r3
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff ffd4 	bl	8005574 <eboard_gpio_init>
  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	3301      	adds	r3, #1
 80055d0:	71fb      	strb	r3, [r7, #7]
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d9ec      	bls.n	80055b2 <eboard_init+0x16>
  }
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000068 	.word	0x20000068
 80055e8:	20000038 	.word	0x20000038

080055ec <eringbuffer_init>:
  inc_idex_(&(rb->r), rb->size);
  rb->len--;
}

void eringbuffer_init(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  rb->buffer = buffer;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	601a      	str	r2, [r3, #0]
  rb->size = size;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]
  rb->len = 0;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	609a      	str	r2, [r3, #8]
  rb->w = 0;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	60da      	str	r2, [r3, #12]
  rb->r = 0;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	611a      	str	r2, [r3, #16]
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <hal_receive_>:
#define pTX_BUFFER      (phandle->tx.pbuffer)
#define pRX_RB          (&(phandle->rx.rb))
#define pRX_BUFFER      (phandle->rx.pbuffer)

void hal_receive_(euart_t *phandle)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  euart_hal_receive(phandle->phardware_handle, pRX_BUFFER, EUART_HAL_BUFFER_SIZE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3340      	adds	r3, #64	; 0x40
 8005632:	2210      	movs	r2, #16
 8005634:	4619      	mov	r1, r3
 8005636:	f7ff ff71 	bl	800551c <euart_hal_receive>
}
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <euart_init>:
  euart_hal_send(phandle->phardware_handle, pTX_BUFFER, tx_len);
  phandle->tx_free = false;
}

void euart_init(euart_t *phandle, void* phardware_handle, uint8_t* ptx_buffer, size_t tx_buffer_size, uint8_t* prx_buffer, size_t rx_buffer_size)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b084      	sub	sp, #16
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
 800564e:	603b      	str	r3, [r7, #0]
  phandle->phardware_handle = phardware_handle;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	601a      	str	r2, [r3, #0]
  eringbuffer_init(pTX_RB, ptx_buffer, tx_buffer_size);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3308      	adds	r3, #8
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ffc4 	bl	80055ec <eringbuffer_init>
  eringbuffer_init(pRX_RB, prx_buffer, rx_buffer_size);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	332c      	adds	r3, #44	; 0x2c
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	69b9      	ldr	r1, [r7, #24]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff ffbd 	bl	80055ec <eringbuffer_init>
  phandle->tx_free = true;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	711a      	strb	r2, [r3, #4]

  hal_receive_(phandle);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff ffd2 	bl	8005622 <hal_receive_>
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <__sflush_r>:
 8005688:	898a      	ldrh	r2, [r1, #12]
 800568a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800568e:	4605      	mov	r5, r0
 8005690:	0710      	lsls	r0, r2, #28
 8005692:	460c      	mov	r4, r1
 8005694:	d458      	bmi.n	8005748 <__sflush_r+0xc0>
 8005696:	684b      	ldr	r3, [r1, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	dc05      	bgt.n	80056a8 <__sflush_r+0x20>
 800569c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	dc02      	bgt.n	80056a8 <__sflush_r+0x20>
 80056a2:	2000      	movs	r0, #0
 80056a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056aa:	2e00      	cmp	r6, #0
 80056ac:	d0f9      	beq.n	80056a2 <__sflush_r+0x1a>
 80056ae:	2300      	movs	r3, #0
 80056b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056b4:	682f      	ldr	r7, [r5, #0]
 80056b6:	6a21      	ldr	r1, [r4, #32]
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	d032      	beq.n	8005722 <__sflush_r+0x9a>
 80056bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	075a      	lsls	r2, r3, #29
 80056c2:	d505      	bpl.n	80056d0 <__sflush_r+0x48>
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	1ac0      	subs	r0, r0, r3
 80056c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056ca:	b10b      	cbz	r3, 80056d0 <__sflush_r+0x48>
 80056cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ce:	1ac0      	subs	r0, r0, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	4602      	mov	r2, r0
 80056d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056d6:	6a21      	ldr	r1, [r4, #32]
 80056d8:	4628      	mov	r0, r5
 80056da:	47b0      	blx	r6
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	d106      	bne.n	80056f0 <__sflush_r+0x68>
 80056e2:	6829      	ldr	r1, [r5, #0]
 80056e4:	291d      	cmp	r1, #29
 80056e6:	d82b      	bhi.n	8005740 <__sflush_r+0xb8>
 80056e8:	4a29      	ldr	r2, [pc, #164]	; (8005790 <__sflush_r+0x108>)
 80056ea:	410a      	asrs	r2, r1
 80056ec:	07d6      	lsls	r6, r2, #31
 80056ee:	d427      	bmi.n	8005740 <__sflush_r+0xb8>
 80056f0:	2200      	movs	r2, #0
 80056f2:	6062      	str	r2, [r4, #4]
 80056f4:	04d9      	lsls	r1, r3, #19
 80056f6:	6922      	ldr	r2, [r4, #16]
 80056f8:	6022      	str	r2, [r4, #0]
 80056fa:	d504      	bpl.n	8005706 <__sflush_r+0x7e>
 80056fc:	1c42      	adds	r2, r0, #1
 80056fe:	d101      	bne.n	8005704 <__sflush_r+0x7c>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	b903      	cbnz	r3, 8005706 <__sflush_r+0x7e>
 8005704:	6560      	str	r0, [r4, #84]	; 0x54
 8005706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005708:	602f      	str	r7, [r5, #0]
 800570a:	2900      	cmp	r1, #0
 800570c:	d0c9      	beq.n	80056a2 <__sflush_r+0x1a>
 800570e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005712:	4299      	cmp	r1, r3
 8005714:	d002      	beq.n	800571c <__sflush_r+0x94>
 8005716:	4628      	mov	r0, r5
 8005718:	f000 fa62 	bl	8005be0 <_free_r>
 800571c:	2000      	movs	r0, #0
 800571e:	6360      	str	r0, [r4, #52]	; 0x34
 8005720:	e7c0      	b.n	80056a4 <__sflush_r+0x1c>
 8005722:	2301      	movs	r3, #1
 8005724:	4628      	mov	r0, r5
 8005726:	47b0      	blx	r6
 8005728:	1c41      	adds	r1, r0, #1
 800572a:	d1c8      	bne.n	80056be <__sflush_r+0x36>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0c5      	beq.n	80056be <__sflush_r+0x36>
 8005732:	2b1d      	cmp	r3, #29
 8005734:	d001      	beq.n	800573a <__sflush_r+0xb2>
 8005736:	2b16      	cmp	r3, #22
 8005738:	d101      	bne.n	800573e <__sflush_r+0xb6>
 800573a:	602f      	str	r7, [r5, #0]
 800573c:	e7b1      	b.n	80056a2 <__sflush_r+0x1a>
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005744:	81a3      	strh	r3, [r4, #12]
 8005746:	e7ad      	b.n	80056a4 <__sflush_r+0x1c>
 8005748:	690f      	ldr	r7, [r1, #16]
 800574a:	2f00      	cmp	r7, #0
 800574c:	d0a9      	beq.n	80056a2 <__sflush_r+0x1a>
 800574e:	0793      	lsls	r3, r2, #30
 8005750:	680e      	ldr	r6, [r1, #0]
 8005752:	bf08      	it	eq
 8005754:	694b      	ldreq	r3, [r1, #20]
 8005756:	600f      	str	r7, [r1, #0]
 8005758:	bf18      	it	ne
 800575a:	2300      	movne	r3, #0
 800575c:	eba6 0807 	sub.w	r8, r6, r7
 8005760:	608b      	str	r3, [r1, #8]
 8005762:	f1b8 0f00 	cmp.w	r8, #0
 8005766:	dd9c      	ble.n	80056a2 <__sflush_r+0x1a>
 8005768:	6a21      	ldr	r1, [r4, #32]
 800576a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800576c:	4643      	mov	r3, r8
 800576e:	463a      	mov	r2, r7
 8005770:	4628      	mov	r0, r5
 8005772:	47b0      	blx	r6
 8005774:	2800      	cmp	r0, #0
 8005776:	dc06      	bgt.n	8005786 <__sflush_r+0xfe>
 8005778:	89a3      	ldrh	r3, [r4, #12]
 800577a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800577e:	81a3      	strh	r3, [r4, #12]
 8005780:	f04f 30ff 	mov.w	r0, #4294967295
 8005784:	e78e      	b.n	80056a4 <__sflush_r+0x1c>
 8005786:	4407      	add	r7, r0
 8005788:	eba8 0800 	sub.w	r8, r8, r0
 800578c:	e7e9      	b.n	8005762 <__sflush_r+0xda>
 800578e:	bf00      	nop
 8005790:	dfbffffe 	.word	0xdfbffffe

08005794 <_fflush_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	690b      	ldr	r3, [r1, #16]
 8005798:	4605      	mov	r5, r0
 800579a:	460c      	mov	r4, r1
 800579c:	b913      	cbnz	r3, 80057a4 <_fflush_r+0x10>
 800579e:	2500      	movs	r5, #0
 80057a0:	4628      	mov	r0, r5
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	b118      	cbz	r0, 80057ae <_fflush_r+0x1a>
 80057a6:	6a03      	ldr	r3, [r0, #32]
 80057a8:	b90b      	cbnz	r3, 80057ae <_fflush_r+0x1a>
 80057aa:	f000 f8bb 	bl	8005924 <__sinit>
 80057ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f3      	beq.n	800579e <_fflush_r+0xa>
 80057b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057b8:	07d0      	lsls	r0, r2, #31
 80057ba:	d404      	bmi.n	80057c6 <_fflush_r+0x32>
 80057bc:	0599      	lsls	r1, r3, #22
 80057be:	d402      	bmi.n	80057c6 <_fflush_r+0x32>
 80057c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057c2:	f000 fa0a 	bl	8005bda <__retarget_lock_acquire_recursive>
 80057c6:	4628      	mov	r0, r5
 80057c8:	4621      	mov	r1, r4
 80057ca:	f7ff ff5d 	bl	8005688 <__sflush_r>
 80057ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057d0:	07da      	lsls	r2, r3, #31
 80057d2:	4605      	mov	r5, r0
 80057d4:	d4e4      	bmi.n	80057a0 <_fflush_r+0xc>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	059b      	lsls	r3, r3, #22
 80057da:	d4e1      	bmi.n	80057a0 <_fflush_r+0xc>
 80057dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057de:	f000 f9fd 	bl	8005bdc <__retarget_lock_release_recursive>
 80057e2:	e7dd      	b.n	80057a0 <_fflush_r+0xc>

080057e4 <fflush>:
 80057e4:	4601      	mov	r1, r0
 80057e6:	b920      	cbnz	r0, 80057f2 <fflush+0xe>
 80057e8:	4a04      	ldr	r2, [pc, #16]	; (80057fc <fflush+0x18>)
 80057ea:	4905      	ldr	r1, [pc, #20]	; (8005800 <fflush+0x1c>)
 80057ec:	4805      	ldr	r0, [pc, #20]	; (8005804 <fflush+0x20>)
 80057ee:	f000 b8b1 	b.w	8005954 <_fwalk_sglue>
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <fflush+0x24>)
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	f7ff bfcd 	b.w	8005794 <_fflush_r>
 80057fa:	bf00      	nop
 80057fc:	2000008c 	.word	0x2000008c
 8005800:	08005795 	.word	0x08005795
 8005804:	20000098 	.word	0x20000098
 8005808:	200000e4 	.word	0x200000e4

0800580c <std>:
 800580c:	2300      	movs	r3, #0
 800580e:	b510      	push	{r4, lr}
 8005810:	4604      	mov	r4, r0
 8005812:	e9c0 3300 	strd	r3, r3, [r0]
 8005816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800581a:	6083      	str	r3, [r0, #8]
 800581c:	8181      	strh	r1, [r0, #12]
 800581e:	6643      	str	r3, [r0, #100]	; 0x64
 8005820:	81c2      	strh	r2, [r0, #14]
 8005822:	6183      	str	r3, [r0, #24]
 8005824:	4619      	mov	r1, r3
 8005826:	2208      	movs	r2, #8
 8005828:	305c      	adds	r0, #92	; 0x5c
 800582a:	f000 f906 	bl	8005a3a <memset>
 800582e:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <std+0x58>)
 8005830:	6263      	str	r3, [r4, #36]	; 0x24
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <std+0x5c>)
 8005834:	62a3      	str	r3, [r4, #40]	; 0x28
 8005836:	4b0d      	ldr	r3, [pc, #52]	; (800586c <std+0x60>)
 8005838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800583a:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <std+0x64>)
 800583c:	6323      	str	r3, [r4, #48]	; 0x30
 800583e:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <std+0x68>)
 8005840:	6224      	str	r4, [r4, #32]
 8005842:	429c      	cmp	r4, r3
 8005844:	d006      	beq.n	8005854 <std+0x48>
 8005846:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800584a:	4294      	cmp	r4, r2
 800584c:	d002      	beq.n	8005854 <std+0x48>
 800584e:	33d0      	adds	r3, #208	; 0xd0
 8005850:	429c      	cmp	r4, r3
 8005852:	d105      	bne.n	8005860 <std+0x54>
 8005854:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800585c:	f000 b9bc 	b.w	8005bd8 <__retarget_lock_init_recursive>
 8005860:	bd10      	pop	{r4, pc}
 8005862:	bf00      	nop
 8005864:	080059b5 	.word	0x080059b5
 8005868:	080059d7 	.word	0x080059d7
 800586c:	08005a0f 	.word	0x08005a0f
 8005870:	08005a33 	.word	0x08005a33
 8005874:	20004c00 	.word	0x20004c00

08005878 <stdio_exit_handler>:
 8005878:	4a02      	ldr	r2, [pc, #8]	; (8005884 <stdio_exit_handler+0xc>)
 800587a:	4903      	ldr	r1, [pc, #12]	; (8005888 <stdio_exit_handler+0x10>)
 800587c:	4803      	ldr	r0, [pc, #12]	; (800588c <stdio_exit_handler+0x14>)
 800587e:	f000 b869 	b.w	8005954 <_fwalk_sglue>
 8005882:	bf00      	nop
 8005884:	2000008c 	.word	0x2000008c
 8005888:	08005795 	.word	0x08005795
 800588c:	20000098 	.word	0x20000098

08005890 <cleanup_stdio>:
 8005890:	6841      	ldr	r1, [r0, #4]
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <cleanup_stdio+0x34>)
 8005894:	4299      	cmp	r1, r3
 8005896:	b510      	push	{r4, lr}
 8005898:	4604      	mov	r4, r0
 800589a:	d001      	beq.n	80058a0 <cleanup_stdio+0x10>
 800589c:	f7ff ff7a 	bl	8005794 <_fflush_r>
 80058a0:	68a1      	ldr	r1, [r4, #8]
 80058a2:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <cleanup_stdio+0x38>)
 80058a4:	4299      	cmp	r1, r3
 80058a6:	d002      	beq.n	80058ae <cleanup_stdio+0x1e>
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff ff73 	bl	8005794 <_fflush_r>
 80058ae:	68e1      	ldr	r1, [r4, #12]
 80058b0:	4b06      	ldr	r3, [pc, #24]	; (80058cc <cleanup_stdio+0x3c>)
 80058b2:	4299      	cmp	r1, r3
 80058b4:	d004      	beq.n	80058c0 <cleanup_stdio+0x30>
 80058b6:	4620      	mov	r0, r4
 80058b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058bc:	f7ff bf6a 	b.w	8005794 <_fflush_r>
 80058c0:	bd10      	pop	{r4, pc}
 80058c2:	bf00      	nop
 80058c4:	20004c00 	.word	0x20004c00
 80058c8:	20004c68 	.word	0x20004c68
 80058cc:	20004cd0 	.word	0x20004cd0

080058d0 <global_stdio_init.part.0>:
 80058d0:	b510      	push	{r4, lr}
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <global_stdio_init.part.0+0x30>)
 80058d4:	4c0b      	ldr	r4, [pc, #44]	; (8005904 <global_stdio_init.part.0+0x34>)
 80058d6:	4a0c      	ldr	r2, [pc, #48]	; (8005908 <global_stdio_init.part.0+0x38>)
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	4620      	mov	r0, r4
 80058dc:	2200      	movs	r2, #0
 80058de:	2104      	movs	r1, #4
 80058e0:	f7ff ff94 	bl	800580c <std>
 80058e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058e8:	2201      	movs	r2, #1
 80058ea:	2109      	movs	r1, #9
 80058ec:	f7ff ff8e 	bl	800580c <std>
 80058f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058f4:	2202      	movs	r2, #2
 80058f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058fa:	2112      	movs	r1, #18
 80058fc:	f7ff bf86 	b.w	800580c <std>
 8005900:	20004d38 	.word	0x20004d38
 8005904:	20004c00 	.word	0x20004c00
 8005908:	08005879 	.word	0x08005879

0800590c <__sfp_lock_acquire>:
 800590c:	4801      	ldr	r0, [pc, #4]	; (8005914 <__sfp_lock_acquire+0x8>)
 800590e:	f000 b964 	b.w	8005bda <__retarget_lock_acquire_recursive>
 8005912:	bf00      	nop
 8005914:	20004d41 	.word	0x20004d41

08005918 <__sfp_lock_release>:
 8005918:	4801      	ldr	r0, [pc, #4]	; (8005920 <__sfp_lock_release+0x8>)
 800591a:	f000 b95f 	b.w	8005bdc <__retarget_lock_release_recursive>
 800591e:	bf00      	nop
 8005920:	20004d41 	.word	0x20004d41

08005924 <__sinit>:
 8005924:	b510      	push	{r4, lr}
 8005926:	4604      	mov	r4, r0
 8005928:	f7ff fff0 	bl	800590c <__sfp_lock_acquire>
 800592c:	6a23      	ldr	r3, [r4, #32]
 800592e:	b11b      	cbz	r3, 8005938 <__sinit+0x14>
 8005930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005934:	f7ff bff0 	b.w	8005918 <__sfp_lock_release>
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <__sinit+0x28>)
 800593a:	6223      	str	r3, [r4, #32]
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <__sinit+0x2c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1f5      	bne.n	8005930 <__sinit+0xc>
 8005944:	f7ff ffc4 	bl	80058d0 <global_stdio_init.part.0>
 8005948:	e7f2      	b.n	8005930 <__sinit+0xc>
 800594a:	bf00      	nop
 800594c:	08005891 	.word	0x08005891
 8005950:	20004d38 	.word	0x20004d38

08005954 <_fwalk_sglue>:
 8005954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005958:	4607      	mov	r7, r0
 800595a:	4688      	mov	r8, r1
 800595c:	4614      	mov	r4, r2
 800595e:	2600      	movs	r6, #0
 8005960:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005964:	f1b9 0901 	subs.w	r9, r9, #1
 8005968:	d505      	bpl.n	8005976 <_fwalk_sglue+0x22>
 800596a:	6824      	ldr	r4, [r4, #0]
 800596c:	2c00      	cmp	r4, #0
 800596e:	d1f7      	bne.n	8005960 <_fwalk_sglue+0xc>
 8005970:	4630      	mov	r0, r6
 8005972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005976:	89ab      	ldrh	r3, [r5, #12]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d907      	bls.n	800598c <_fwalk_sglue+0x38>
 800597c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005980:	3301      	adds	r3, #1
 8005982:	d003      	beq.n	800598c <_fwalk_sglue+0x38>
 8005984:	4629      	mov	r1, r5
 8005986:	4638      	mov	r0, r7
 8005988:	47c0      	blx	r8
 800598a:	4306      	orrs	r6, r0
 800598c:	3568      	adds	r5, #104	; 0x68
 800598e:	e7e9      	b.n	8005964 <_fwalk_sglue+0x10>

08005990 <iprintf>:
 8005990:	b40f      	push	{r0, r1, r2, r3}
 8005992:	b507      	push	{r0, r1, r2, lr}
 8005994:	4906      	ldr	r1, [pc, #24]	; (80059b0 <iprintf+0x20>)
 8005996:	ab04      	add	r3, sp, #16
 8005998:	6808      	ldr	r0, [r1, #0]
 800599a:	f853 2b04 	ldr.w	r2, [r3], #4
 800599e:	6881      	ldr	r1, [r0, #8]
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	f000 fa3f 	bl	8005e24 <_vfiprintf_r>
 80059a6:	b003      	add	sp, #12
 80059a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059ac:	b004      	add	sp, #16
 80059ae:	4770      	bx	lr
 80059b0:	200000e4 	.word	0x200000e4

080059b4 <__sread>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	460c      	mov	r4, r1
 80059b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059bc:	f000 f8be 	bl	8005b3c <_read_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	bfab      	itete	ge
 80059c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059c6:	89a3      	ldrhlt	r3, [r4, #12]
 80059c8:	181b      	addge	r3, r3, r0
 80059ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ce:	bfac      	ite	ge
 80059d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80059d2:	81a3      	strhlt	r3, [r4, #12]
 80059d4:	bd10      	pop	{r4, pc}

080059d6 <__swrite>:
 80059d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059da:	461f      	mov	r7, r3
 80059dc:	898b      	ldrh	r3, [r1, #12]
 80059de:	05db      	lsls	r3, r3, #23
 80059e0:	4605      	mov	r5, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	4616      	mov	r6, r2
 80059e6:	d505      	bpl.n	80059f4 <__swrite+0x1e>
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	2302      	movs	r3, #2
 80059ee:	2200      	movs	r2, #0
 80059f0:	f000 f892 	bl	8005b18 <_lseek_r>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	4632      	mov	r2, r6
 8005a02:	463b      	mov	r3, r7
 8005a04:	4628      	mov	r0, r5
 8005a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	f000 b8a9 	b.w	8005b60 <_write_r>

08005a0e <__sseek>:
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	460c      	mov	r4, r1
 8005a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a16:	f000 f87f 	bl	8005b18 <_lseek_r>
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	bf15      	itete	ne
 8005a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a2a:	81a3      	strheq	r3, [r4, #12]
 8005a2c:	bf18      	it	ne
 8005a2e:	81a3      	strhne	r3, [r4, #12]
 8005a30:	bd10      	pop	{r4, pc}

08005a32 <__sclose>:
 8005a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a36:	f000 b809 	b.w	8005a4c <_close_r>

08005a3a <memset>:
 8005a3a:	4402      	add	r2, r0
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d100      	bne.n	8005a44 <memset+0xa>
 8005a42:	4770      	bx	lr
 8005a44:	f803 1b01 	strb.w	r1, [r3], #1
 8005a48:	e7f9      	b.n	8005a3e <memset+0x4>
	...

08005a4c <_close_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	4d06      	ldr	r5, [pc, #24]	; (8005a68 <_close_r+0x1c>)
 8005a50:	2300      	movs	r3, #0
 8005a52:	4604      	mov	r4, r0
 8005a54:	4608      	mov	r0, r1
 8005a56:	602b      	str	r3, [r5, #0]
 8005a58:	f7fb f92d 	bl	8000cb6 <_close>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	d102      	bne.n	8005a66 <_close_r+0x1a>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	b103      	cbz	r3, 8005a66 <_close_r+0x1a>
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	bd38      	pop	{r3, r4, r5, pc}
 8005a68:	20004d3c 	.word	0x20004d3c

08005a6c <_reclaim_reent>:
 8005a6c:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <_reclaim_reent+0xa8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4283      	cmp	r3, r0
 8005a72:	b570      	push	{r4, r5, r6, lr}
 8005a74:	4604      	mov	r4, r0
 8005a76:	d04b      	beq.n	8005b10 <_reclaim_reent+0xa4>
 8005a78:	69c3      	ldr	r3, [r0, #28]
 8005a7a:	b143      	cbz	r3, 8005a8e <_reclaim_reent+0x22>
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d144      	bne.n	8005b0c <_reclaim_reent+0xa0>
 8005a82:	69e3      	ldr	r3, [r4, #28]
 8005a84:	6819      	ldr	r1, [r3, #0]
 8005a86:	b111      	cbz	r1, 8005a8e <_reclaim_reent+0x22>
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 f8a9 	bl	8005be0 <_free_r>
 8005a8e:	6961      	ldr	r1, [r4, #20]
 8005a90:	b111      	cbz	r1, 8005a98 <_reclaim_reent+0x2c>
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 f8a4 	bl	8005be0 <_free_r>
 8005a98:	69e1      	ldr	r1, [r4, #28]
 8005a9a:	b111      	cbz	r1, 8005aa2 <_reclaim_reent+0x36>
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 f89f 	bl	8005be0 <_free_r>
 8005aa2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005aa4:	b111      	cbz	r1, 8005aac <_reclaim_reent+0x40>
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 f89a 	bl	8005be0 <_free_r>
 8005aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aae:	b111      	cbz	r1, 8005ab6 <_reclaim_reent+0x4a>
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 f895 	bl	8005be0 <_free_r>
 8005ab6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005ab8:	b111      	cbz	r1, 8005ac0 <_reclaim_reent+0x54>
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 f890 	bl	8005be0 <_free_r>
 8005ac0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005ac2:	b111      	cbz	r1, 8005aca <_reclaim_reent+0x5e>
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 f88b 	bl	8005be0 <_free_r>
 8005aca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005acc:	b111      	cbz	r1, 8005ad4 <_reclaim_reent+0x68>
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f000 f886 	bl	8005be0 <_free_r>
 8005ad4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ad6:	b111      	cbz	r1, 8005ade <_reclaim_reent+0x72>
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f000 f881 	bl	8005be0 <_free_r>
 8005ade:	6a23      	ldr	r3, [r4, #32]
 8005ae0:	b1b3      	cbz	r3, 8005b10 <_reclaim_reent+0xa4>
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ae8:	4718      	bx	r3
 8005aea:	5949      	ldr	r1, [r1, r5]
 8005aec:	b941      	cbnz	r1, 8005b00 <_reclaim_reent+0x94>
 8005aee:	3504      	adds	r5, #4
 8005af0:	69e3      	ldr	r3, [r4, #28]
 8005af2:	2d80      	cmp	r5, #128	; 0x80
 8005af4:	68d9      	ldr	r1, [r3, #12]
 8005af6:	d1f8      	bne.n	8005aea <_reclaim_reent+0x7e>
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 f871 	bl	8005be0 <_free_r>
 8005afe:	e7c0      	b.n	8005a82 <_reclaim_reent+0x16>
 8005b00:	680e      	ldr	r6, [r1, #0]
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 f86c 	bl	8005be0 <_free_r>
 8005b08:	4631      	mov	r1, r6
 8005b0a:	e7ef      	b.n	8005aec <_reclaim_reent+0x80>
 8005b0c:	2500      	movs	r5, #0
 8005b0e:	e7ef      	b.n	8005af0 <_reclaim_reent+0x84>
 8005b10:	bd70      	pop	{r4, r5, r6, pc}
 8005b12:	bf00      	nop
 8005b14:	200000e4 	.word	0x200000e4

08005b18 <_lseek_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	4d07      	ldr	r5, [pc, #28]	; (8005b38 <_lseek_r+0x20>)
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	4608      	mov	r0, r1
 8005b20:	4611      	mov	r1, r2
 8005b22:	2200      	movs	r2, #0
 8005b24:	602a      	str	r2, [r5, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f7fb f8ec 	bl	8000d04 <_lseek>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_lseek_r+0x1e>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_lseek_r+0x1e>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	20004d3c 	.word	0x20004d3c

08005b3c <_read_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4d07      	ldr	r5, [pc, #28]	; (8005b5c <_read_r+0x20>)
 8005b40:	4604      	mov	r4, r0
 8005b42:	4608      	mov	r0, r1
 8005b44:	4611      	mov	r1, r2
 8005b46:	2200      	movs	r2, #0
 8005b48:	602a      	str	r2, [r5, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f7fb f87a 	bl	8000c44 <_read>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_read_r+0x1e>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_read_r+0x1e>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	20004d3c 	.word	0x20004d3c

08005b60 <_write_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4d07      	ldr	r5, [pc, #28]	; (8005b80 <_write_r+0x20>)
 8005b64:	4604      	mov	r4, r0
 8005b66:	4608      	mov	r0, r1
 8005b68:	4611      	mov	r1, r2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	602a      	str	r2, [r5, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f7fb f885 	bl	8000c7e <_write>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_write_r+0x1e>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_write_r+0x1e>
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	20004d3c 	.word	0x20004d3c

08005b84 <__errno>:
 8005b84:	4b01      	ldr	r3, [pc, #4]	; (8005b8c <__errno+0x8>)
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	200000e4 	.word	0x200000e4

08005b90 <__libc_init_array>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	4d0d      	ldr	r5, [pc, #52]	; (8005bc8 <__libc_init_array+0x38>)
 8005b94:	4c0d      	ldr	r4, [pc, #52]	; (8005bcc <__libc_init_array+0x3c>)
 8005b96:	1b64      	subs	r4, r4, r5
 8005b98:	10a4      	asrs	r4, r4, #2
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	42a6      	cmp	r6, r4
 8005b9e:	d109      	bne.n	8005bb4 <__libc_init_array+0x24>
 8005ba0:	4d0b      	ldr	r5, [pc, #44]	; (8005bd0 <__libc_init_array+0x40>)
 8005ba2:	4c0c      	ldr	r4, [pc, #48]	; (8005bd4 <__libc_init_array+0x44>)
 8005ba4:	f000 fd12 	bl	80065cc <_init>
 8005ba8:	1b64      	subs	r4, r4, r5
 8005baa:	10a4      	asrs	r4, r4, #2
 8005bac:	2600      	movs	r6, #0
 8005bae:	42a6      	cmp	r6, r4
 8005bb0:	d105      	bne.n	8005bbe <__libc_init_array+0x2e>
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb8:	4798      	blx	r3
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7ee      	b.n	8005b9c <__libc_init_array+0xc>
 8005bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc2:	4798      	blx	r3
 8005bc4:	3601      	adds	r6, #1
 8005bc6:	e7f2      	b.n	8005bae <__libc_init_array+0x1e>
 8005bc8:	0800672c 	.word	0x0800672c
 8005bcc:	0800672c 	.word	0x0800672c
 8005bd0:	0800672c 	.word	0x0800672c
 8005bd4:	08006730 	.word	0x08006730

08005bd8 <__retarget_lock_init_recursive>:
 8005bd8:	4770      	bx	lr

08005bda <__retarget_lock_acquire_recursive>:
 8005bda:	4770      	bx	lr

08005bdc <__retarget_lock_release_recursive>:
 8005bdc:	4770      	bx	lr
	...

08005be0 <_free_r>:
 8005be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005be2:	2900      	cmp	r1, #0
 8005be4:	d044      	beq.n	8005c70 <_free_r+0x90>
 8005be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bea:	9001      	str	r0, [sp, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f1a1 0404 	sub.w	r4, r1, #4
 8005bf2:	bfb8      	it	lt
 8005bf4:	18e4      	addlt	r4, r4, r3
 8005bf6:	f000 f8df 	bl	8005db8 <__malloc_lock>
 8005bfa:	4a1e      	ldr	r2, [pc, #120]	; (8005c74 <_free_r+0x94>)
 8005bfc:	9801      	ldr	r0, [sp, #4]
 8005bfe:	6813      	ldr	r3, [r2, #0]
 8005c00:	b933      	cbnz	r3, 8005c10 <_free_r+0x30>
 8005c02:	6063      	str	r3, [r4, #4]
 8005c04:	6014      	str	r4, [r2, #0]
 8005c06:	b003      	add	sp, #12
 8005c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c0c:	f000 b8da 	b.w	8005dc4 <__malloc_unlock>
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d908      	bls.n	8005c26 <_free_r+0x46>
 8005c14:	6825      	ldr	r5, [r4, #0]
 8005c16:	1961      	adds	r1, r4, r5
 8005c18:	428b      	cmp	r3, r1
 8005c1a:	bf01      	itttt	eq
 8005c1c:	6819      	ldreq	r1, [r3, #0]
 8005c1e:	685b      	ldreq	r3, [r3, #4]
 8005c20:	1949      	addeq	r1, r1, r5
 8005c22:	6021      	streq	r1, [r4, #0]
 8005c24:	e7ed      	b.n	8005c02 <_free_r+0x22>
 8005c26:	461a      	mov	r2, r3
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	b10b      	cbz	r3, 8005c30 <_free_r+0x50>
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	d9fa      	bls.n	8005c26 <_free_r+0x46>
 8005c30:	6811      	ldr	r1, [r2, #0]
 8005c32:	1855      	adds	r5, r2, r1
 8005c34:	42a5      	cmp	r5, r4
 8005c36:	d10b      	bne.n	8005c50 <_free_r+0x70>
 8005c38:	6824      	ldr	r4, [r4, #0]
 8005c3a:	4421      	add	r1, r4
 8005c3c:	1854      	adds	r4, r2, r1
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	6011      	str	r1, [r2, #0]
 8005c42:	d1e0      	bne.n	8005c06 <_free_r+0x26>
 8005c44:	681c      	ldr	r4, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	6053      	str	r3, [r2, #4]
 8005c4a:	440c      	add	r4, r1
 8005c4c:	6014      	str	r4, [r2, #0]
 8005c4e:	e7da      	b.n	8005c06 <_free_r+0x26>
 8005c50:	d902      	bls.n	8005c58 <_free_r+0x78>
 8005c52:	230c      	movs	r3, #12
 8005c54:	6003      	str	r3, [r0, #0]
 8005c56:	e7d6      	b.n	8005c06 <_free_r+0x26>
 8005c58:	6825      	ldr	r5, [r4, #0]
 8005c5a:	1961      	adds	r1, r4, r5
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	bf04      	itt	eq
 8005c60:	6819      	ldreq	r1, [r3, #0]
 8005c62:	685b      	ldreq	r3, [r3, #4]
 8005c64:	6063      	str	r3, [r4, #4]
 8005c66:	bf04      	itt	eq
 8005c68:	1949      	addeq	r1, r1, r5
 8005c6a:	6021      	streq	r1, [r4, #0]
 8005c6c:	6054      	str	r4, [r2, #4]
 8005c6e:	e7ca      	b.n	8005c06 <_free_r+0x26>
 8005c70:	b003      	add	sp, #12
 8005c72:	bd30      	pop	{r4, r5, pc}
 8005c74:	20004d44 	.word	0x20004d44

08005c78 <sbrk_aligned>:
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	4e0e      	ldr	r6, [pc, #56]	; (8005cb4 <sbrk_aligned+0x3c>)
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	6831      	ldr	r1, [r6, #0]
 8005c80:	4605      	mov	r5, r0
 8005c82:	b911      	cbnz	r1, 8005c8a <sbrk_aligned+0x12>
 8005c84:	f000 fc0e 	bl	80064a4 <_sbrk_r>
 8005c88:	6030      	str	r0, [r6, #0]
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f000 fc09 	bl	80064a4 <_sbrk_r>
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	d00a      	beq.n	8005cac <sbrk_aligned+0x34>
 8005c96:	1cc4      	adds	r4, r0, #3
 8005c98:	f024 0403 	bic.w	r4, r4, #3
 8005c9c:	42a0      	cmp	r0, r4
 8005c9e:	d007      	beq.n	8005cb0 <sbrk_aligned+0x38>
 8005ca0:	1a21      	subs	r1, r4, r0
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f000 fbfe 	bl	80064a4 <_sbrk_r>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d101      	bne.n	8005cb0 <sbrk_aligned+0x38>
 8005cac:	f04f 34ff 	mov.w	r4, #4294967295
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	20004d48 	.word	0x20004d48

08005cb8 <_malloc_r>:
 8005cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cbc:	1ccd      	adds	r5, r1, #3
 8005cbe:	f025 0503 	bic.w	r5, r5, #3
 8005cc2:	3508      	adds	r5, #8
 8005cc4:	2d0c      	cmp	r5, #12
 8005cc6:	bf38      	it	cc
 8005cc8:	250c      	movcc	r5, #12
 8005cca:	2d00      	cmp	r5, #0
 8005ccc:	4607      	mov	r7, r0
 8005cce:	db01      	blt.n	8005cd4 <_malloc_r+0x1c>
 8005cd0:	42a9      	cmp	r1, r5
 8005cd2:	d905      	bls.n	8005ce0 <_malloc_r+0x28>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	2600      	movs	r6, #0
 8005cda:	4630      	mov	r0, r6
 8005cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005db4 <_malloc_r+0xfc>
 8005ce4:	f000 f868 	bl	8005db8 <__malloc_lock>
 8005ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cec:	461c      	mov	r4, r3
 8005cee:	bb5c      	cbnz	r4, 8005d48 <_malloc_r+0x90>
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f7ff ffc0 	bl	8005c78 <sbrk_aligned>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	d155      	bne.n	8005daa <_malloc_r+0xf2>
 8005cfe:	f8d8 4000 	ldr.w	r4, [r8]
 8005d02:	4626      	mov	r6, r4
 8005d04:	2e00      	cmp	r6, #0
 8005d06:	d145      	bne.n	8005d94 <_malloc_r+0xdc>
 8005d08:	2c00      	cmp	r4, #0
 8005d0a:	d048      	beq.n	8005d9e <_malloc_r+0xe6>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4638      	mov	r0, r7
 8005d12:	eb04 0903 	add.w	r9, r4, r3
 8005d16:	f000 fbc5 	bl	80064a4 <_sbrk_r>
 8005d1a:	4581      	cmp	r9, r0
 8005d1c:	d13f      	bne.n	8005d9e <_malloc_r+0xe6>
 8005d1e:	6821      	ldr	r1, [r4, #0]
 8005d20:	1a6d      	subs	r5, r5, r1
 8005d22:	4629      	mov	r1, r5
 8005d24:	4638      	mov	r0, r7
 8005d26:	f7ff ffa7 	bl	8005c78 <sbrk_aligned>
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d037      	beq.n	8005d9e <_malloc_r+0xe6>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	442b      	add	r3, r5
 8005d32:	6023      	str	r3, [r4, #0]
 8005d34:	f8d8 3000 	ldr.w	r3, [r8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d038      	beq.n	8005dae <_malloc_r+0xf6>
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	42a2      	cmp	r2, r4
 8005d40:	d12b      	bne.n	8005d9a <_malloc_r+0xe2>
 8005d42:	2200      	movs	r2, #0
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	e00f      	b.n	8005d68 <_malloc_r+0xb0>
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	1b52      	subs	r2, r2, r5
 8005d4c:	d41f      	bmi.n	8005d8e <_malloc_r+0xd6>
 8005d4e:	2a0b      	cmp	r2, #11
 8005d50:	d917      	bls.n	8005d82 <_malloc_r+0xca>
 8005d52:	1961      	adds	r1, r4, r5
 8005d54:	42a3      	cmp	r3, r4
 8005d56:	6025      	str	r5, [r4, #0]
 8005d58:	bf18      	it	ne
 8005d5a:	6059      	strne	r1, [r3, #4]
 8005d5c:	6863      	ldr	r3, [r4, #4]
 8005d5e:	bf08      	it	eq
 8005d60:	f8c8 1000 	streq.w	r1, [r8]
 8005d64:	5162      	str	r2, [r4, r5]
 8005d66:	604b      	str	r3, [r1, #4]
 8005d68:	4638      	mov	r0, r7
 8005d6a:	f104 060b 	add.w	r6, r4, #11
 8005d6e:	f000 f829 	bl	8005dc4 <__malloc_unlock>
 8005d72:	f026 0607 	bic.w	r6, r6, #7
 8005d76:	1d23      	adds	r3, r4, #4
 8005d78:	1af2      	subs	r2, r6, r3
 8005d7a:	d0ae      	beq.n	8005cda <_malloc_r+0x22>
 8005d7c:	1b9b      	subs	r3, r3, r6
 8005d7e:	50a3      	str	r3, [r4, r2]
 8005d80:	e7ab      	b.n	8005cda <_malloc_r+0x22>
 8005d82:	42a3      	cmp	r3, r4
 8005d84:	6862      	ldr	r2, [r4, #4]
 8005d86:	d1dd      	bne.n	8005d44 <_malloc_r+0x8c>
 8005d88:	f8c8 2000 	str.w	r2, [r8]
 8005d8c:	e7ec      	b.n	8005d68 <_malloc_r+0xb0>
 8005d8e:	4623      	mov	r3, r4
 8005d90:	6864      	ldr	r4, [r4, #4]
 8005d92:	e7ac      	b.n	8005cee <_malloc_r+0x36>
 8005d94:	4634      	mov	r4, r6
 8005d96:	6876      	ldr	r6, [r6, #4]
 8005d98:	e7b4      	b.n	8005d04 <_malloc_r+0x4c>
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	e7cc      	b.n	8005d38 <_malloc_r+0x80>
 8005d9e:	230c      	movs	r3, #12
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	4638      	mov	r0, r7
 8005da4:	f000 f80e 	bl	8005dc4 <__malloc_unlock>
 8005da8:	e797      	b.n	8005cda <_malloc_r+0x22>
 8005daa:	6025      	str	r5, [r4, #0]
 8005dac:	e7dc      	b.n	8005d68 <_malloc_r+0xb0>
 8005dae:	605b      	str	r3, [r3, #4]
 8005db0:	deff      	udf	#255	; 0xff
 8005db2:	bf00      	nop
 8005db4:	20004d44 	.word	0x20004d44

08005db8 <__malloc_lock>:
 8005db8:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <__malloc_lock+0x8>)
 8005dba:	f7ff bf0e 	b.w	8005bda <__retarget_lock_acquire_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	20004d40 	.word	0x20004d40

08005dc4 <__malloc_unlock>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	; (8005dcc <__malloc_unlock+0x8>)
 8005dc6:	f7ff bf09 	b.w	8005bdc <__retarget_lock_release_recursive>
 8005dca:	bf00      	nop
 8005dcc:	20004d40 	.word	0x20004d40

08005dd0 <__sfputc_r>:
 8005dd0:	6893      	ldr	r3, [r2, #8]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	b410      	push	{r4}
 8005dd8:	6093      	str	r3, [r2, #8]
 8005dda:	da08      	bge.n	8005dee <__sfputc_r+0x1e>
 8005ddc:	6994      	ldr	r4, [r2, #24]
 8005dde:	42a3      	cmp	r3, r4
 8005de0:	db01      	blt.n	8005de6 <__sfputc_r+0x16>
 8005de2:	290a      	cmp	r1, #10
 8005de4:	d103      	bne.n	8005dee <__sfputc_r+0x1e>
 8005de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dea:	f000 bac5 	b.w	8006378 <__swbuf_r>
 8005dee:	6813      	ldr	r3, [r2, #0]
 8005df0:	1c58      	adds	r0, r3, #1
 8005df2:	6010      	str	r0, [r2, #0]
 8005df4:	7019      	strb	r1, [r3, #0]
 8005df6:	4608      	mov	r0, r1
 8005df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <__sfputs_r>:
 8005dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e00:	4606      	mov	r6, r0
 8005e02:	460f      	mov	r7, r1
 8005e04:	4614      	mov	r4, r2
 8005e06:	18d5      	adds	r5, r2, r3
 8005e08:	42ac      	cmp	r4, r5
 8005e0a:	d101      	bne.n	8005e10 <__sfputs_r+0x12>
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	e007      	b.n	8005e20 <__sfputs_r+0x22>
 8005e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e14:	463a      	mov	r2, r7
 8005e16:	4630      	mov	r0, r6
 8005e18:	f7ff ffda 	bl	8005dd0 <__sfputc_r>
 8005e1c:	1c43      	adds	r3, r0, #1
 8005e1e:	d1f3      	bne.n	8005e08 <__sfputs_r+0xa>
 8005e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e24 <_vfiprintf_r>:
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	460d      	mov	r5, r1
 8005e2a:	b09d      	sub	sp, #116	; 0x74
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	4698      	mov	r8, r3
 8005e30:	4606      	mov	r6, r0
 8005e32:	b118      	cbz	r0, 8005e3c <_vfiprintf_r+0x18>
 8005e34:	6a03      	ldr	r3, [r0, #32]
 8005e36:	b90b      	cbnz	r3, 8005e3c <_vfiprintf_r+0x18>
 8005e38:	f7ff fd74 	bl	8005924 <__sinit>
 8005e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e3e:	07d9      	lsls	r1, r3, #31
 8005e40:	d405      	bmi.n	8005e4e <_vfiprintf_r+0x2a>
 8005e42:	89ab      	ldrh	r3, [r5, #12]
 8005e44:	059a      	lsls	r2, r3, #22
 8005e46:	d402      	bmi.n	8005e4e <_vfiprintf_r+0x2a>
 8005e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e4a:	f7ff fec6 	bl	8005bda <__retarget_lock_acquire_recursive>
 8005e4e:	89ab      	ldrh	r3, [r5, #12]
 8005e50:	071b      	lsls	r3, r3, #28
 8005e52:	d501      	bpl.n	8005e58 <_vfiprintf_r+0x34>
 8005e54:	692b      	ldr	r3, [r5, #16]
 8005e56:	b99b      	cbnz	r3, 8005e80 <_vfiprintf_r+0x5c>
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f000 faca 	bl	80063f4 <__swsetup_r>
 8005e60:	b170      	cbz	r0, 8005e80 <_vfiprintf_r+0x5c>
 8005e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e64:	07dc      	lsls	r4, r3, #31
 8005e66:	d504      	bpl.n	8005e72 <_vfiprintf_r+0x4e>
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	b01d      	add	sp, #116	; 0x74
 8005e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e72:	89ab      	ldrh	r3, [r5, #12]
 8005e74:	0598      	lsls	r0, r3, #22
 8005e76:	d4f7      	bmi.n	8005e68 <_vfiprintf_r+0x44>
 8005e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e7a:	f7ff feaf 	bl	8005bdc <__retarget_lock_release_recursive>
 8005e7e:	e7f3      	b.n	8005e68 <_vfiprintf_r+0x44>
 8005e80:	2300      	movs	r3, #0
 8005e82:	9309      	str	r3, [sp, #36]	; 0x24
 8005e84:	2320      	movs	r3, #32
 8005e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e8e:	2330      	movs	r3, #48	; 0x30
 8005e90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006044 <_vfiprintf_r+0x220>
 8005e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e98:	f04f 0901 	mov.w	r9, #1
 8005e9c:	4623      	mov	r3, r4
 8005e9e:	469a      	mov	sl, r3
 8005ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ea4:	b10a      	cbz	r2, 8005eaa <_vfiprintf_r+0x86>
 8005ea6:	2a25      	cmp	r2, #37	; 0x25
 8005ea8:	d1f9      	bne.n	8005e9e <_vfiprintf_r+0x7a>
 8005eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8005eae:	d00b      	beq.n	8005ec8 <_vfiprintf_r+0xa4>
 8005eb0:	465b      	mov	r3, fp
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f7ff ffa1 	bl	8005dfe <__sfputs_r>
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	f000 80a9 	beq.w	8006014 <_vfiprintf_r+0x1f0>
 8005ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ec4:	445a      	add	r2, fp
 8005ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80a1 	beq.w	8006014 <_vfiprintf_r+0x1f0>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005edc:	f10a 0a01 	add.w	sl, sl, #1
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	9307      	str	r3, [sp, #28]
 8005ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8005eea:	4654      	mov	r4, sl
 8005eec:	2205      	movs	r2, #5
 8005eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef2:	4854      	ldr	r0, [pc, #336]	; (8006044 <_vfiprintf_r+0x220>)
 8005ef4:	f7fa f98c 	bl	8000210 <memchr>
 8005ef8:	9a04      	ldr	r2, [sp, #16]
 8005efa:	b9d8      	cbnz	r0, 8005f34 <_vfiprintf_r+0x110>
 8005efc:	06d1      	lsls	r1, r2, #27
 8005efe:	bf44      	itt	mi
 8005f00:	2320      	movmi	r3, #32
 8005f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f06:	0713      	lsls	r3, r2, #28
 8005f08:	bf44      	itt	mi
 8005f0a:	232b      	movmi	r3, #43	; 0x2b
 8005f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f10:	f89a 3000 	ldrb.w	r3, [sl]
 8005f14:	2b2a      	cmp	r3, #42	; 0x2a
 8005f16:	d015      	beq.n	8005f44 <_vfiprintf_r+0x120>
 8005f18:	9a07      	ldr	r2, [sp, #28]
 8005f1a:	4654      	mov	r4, sl
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	f04f 0c0a 	mov.w	ip, #10
 8005f22:	4621      	mov	r1, r4
 8005f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f28:	3b30      	subs	r3, #48	; 0x30
 8005f2a:	2b09      	cmp	r3, #9
 8005f2c:	d94d      	bls.n	8005fca <_vfiprintf_r+0x1a6>
 8005f2e:	b1b0      	cbz	r0, 8005f5e <_vfiprintf_r+0x13a>
 8005f30:	9207      	str	r2, [sp, #28]
 8005f32:	e014      	b.n	8005f5e <_vfiprintf_r+0x13a>
 8005f34:	eba0 0308 	sub.w	r3, r0, r8
 8005f38:	fa09 f303 	lsl.w	r3, r9, r3
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	46a2      	mov	sl, r4
 8005f42:	e7d2      	b.n	8005eea <_vfiprintf_r+0xc6>
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	1d19      	adds	r1, r3, #4
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	9103      	str	r1, [sp, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bfbb      	ittet	lt
 8005f50:	425b      	neglt	r3, r3
 8005f52:	f042 0202 	orrlt.w	r2, r2, #2
 8005f56:	9307      	strge	r3, [sp, #28]
 8005f58:	9307      	strlt	r3, [sp, #28]
 8005f5a:	bfb8      	it	lt
 8005f5c:	9204      	strlt	r2, [sp, #16]
 8005f5e:	7823      	ldrb	r3, [r4, #0]
 8005f60:	2b2e      	cmp	r3, #46	; 0x2e
 8005f62:	d10c      	bne.n	8005f7e <_vfiprintf_r+0x15a>
 8005f64:	7863      	ldrb	r3, [r4, #1]
 8005f66:	2b2a      	cmp	r3, #42	; 0x2a
 8005f68:	d134      	bne.n	8005fd4 <_vfiprintf_r+0x1b0>
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	1d1a      	adds	r2, r3, #4
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	9203      	str	r2, [sp, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	bfb8      	it	lt
 8005f76:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f7a:	3402      	adds	r4, #2
 8005f7c:	9305      	str	r3, [sp, #20]
 8005f7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006054 <_vfiprintf_r+0x230>
 8005f82:	7821      	ldrb	r1, [r4, #0]
 8005f84:	2203      	movs	r2, #3
 8005f86:	4650      	mov	r0, sl
 8005f88:	f7fa f942 	bl	8000210 <memchr>
 8005f8c:	b138      	cbz	r0, 8005f9e <_vfiprintf_r+0x17a>
 8005f8e:	9b04      	ldr	r3, [sp, #16]
 8005f90:	eba0 000a 	sub.w	r0, r0, sl
 8005f94:	2240      	movs	r2, #64	; 0x40
 8005f96:	4082      	lsls	r2, r0
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	3401      	adds	r4, #1
 8005f9c:	9304      	str	r3, [sp, #16]
 8005f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa2:	4829      	ldr	r0, [pc, #164]	; (8006048 <_vfiprintf_r+0x224>)
 8005fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fa8:	2206      	movs	r2, #6
 8005faa:	f7fa f931 	bl	8000210 <memchr>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d03f      	beq.n	8006032 <_vfiprintf_r+0x20e>
 8005fb2:	4b26      	ldr	r3, [pc, #152]	; (800604c <_vfiprintf_r+0x228>)
 8005fb4:	bb1b      	cbnz	r3, 8005ffe <_vfiprintf_r+0x1da>
 8005fb6:	9b03      	ldr	r3, [sp, #12]
 8005fb8:	3307      	adds	r3, #7
 8005fba:	f023 0307 	bic.w	r3, r3, #7
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	9303      	str	r3, [sp, #12]
 8005fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc4:	443b      	add	r3, r7
 8005fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc8:	e768      	b.n	8005e9c <_vfiprintf_r+0x78>
 8005fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fce:	460c      	mov	r4, r1
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	e7a6      	b.n	8005f22 <_vfiprintf_r+0xfe>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	3401      	adds	r4, #1
 8005fd8:	9305      	str	r3, [sp, #20]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	f04f 0c0a 	mov.w	ip, #10
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fe6:	3a30      	subs	r2, #48	; 0x30
 8005fe8:	2a09      	cmp	r2, #9
 8005fea:	d903      	bls.n	8005ff4 <_vfiprintf_r+0x1d0>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0c6      	beq.n	8005f7e <_vfiprintf_r+0x15a>
 8005ff0:	9105      	str	r1, [sp, #20]
 8005ff2:	e7c4      	b.n	8005f7e <_vfiprintf_r+0x15a>
 8005ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e7f0      	b.n	8005fe0 <_vfiprintf_r+0x1bc>
 8005ffe:	ab03      	add	r3, sp, #12
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	462a      	mov	r2, r5
 8006004:	4b12      	ldr	r3, [pc, #72]	; (8006050 <_vfiprintf_r+0x22c>)
 8006006:	a904      	add	r1, sp, #16
 8006008:	4630      	mov	r0, r6
 800600a:	f3af 8000 	nop.w
 800600e:	4607      	mov	r7, r0
 8006010:	1c78      	adds	r0, r7, #1
 8006012:	d1d6      	bne.n	8005fc2 <_vfiprintf_r+0x19e>
 8006014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006016:	07d9      	lsls	r1, r3, #31
 8006018:	d405      	bmi.n	8006026 <_vfiprintf_r+0x202>
 800601a:	89ab      	ldrh	r3, [r5, #12]
 800601c:	059a      	lsls	r2, r3, #22
 800601e:	d402      	bmi.n	8006026 <_vfiprintf_r+0x202>
 8006020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006022:	f7ff fddb 	bl	8005bdc <__retarget_lock_release_recursive>
 8006026:	89ab      	ldrh	r3, [r5, #12]
 8006028:	065b      	lsls	r3, r3, #25
 800602a:	f53f af1d 	bmi.w	8005e68 <_vfiprintf_r+0x44>
 800602e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006030:	e71c      	b.n	8005e6c <_vfiprintf_r+0x48>
 8006032:	ab03      	add	r3, sp, #12
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	462a      	mov	r2, r5
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <_vfiprintf_r+0x22c>)
 800603a:	a904      	add	r1, sp, #16
 800603c:	4630      	mov	r0, r6
 800603e:	f000 f879 	bl	8006134 <_printf_i>
 8006042:	e7e4      	b.n	800600e <_vfiprintf_r+0x1ea>
 8006044:	080066f0 	.word	0x080066f0
 8006048:	080066fa 	.word	0x080066fa
 800604c:	00000000 	.word	0x00000000
 8006050:	08005dff 	.word	0x08005dff
 8006054:	080066f6 	.word	0x080066f6

08006058 <_printf_common>:
 8006058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	4616      	mov	r6, r2
 800605e:	4699      	mov	r9, r3
 8006060:	688a      	ldr	r2, [r1, #8]
 8006062:	690b      	ldr	r3, [r1, #16]
 8006064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006068:	4293      	cmp	r3, r2
 800606a:	bfb8      	it	lt
 800606c:	4613      	movlt	r3, r2
 800606e:	6033      	str	r3, [r6, #0]
 8006070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006074:	4607      	mov	r7, r0
 8006076:	460c      	mov	r4, r1
 8006078:	b10a      	cbz	r2, 800607e <_printf_common+0x26>
 800607a:	3301      	adds	r3, #1
 800607c:	6033      	str	r3, [r6, #0]
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	0699      	lsls	r1, r3, #26
 8006082:	bf42      	ittt	mi
 8006084:	6833      	ldrmi	r3, [r6, #0]
 8006086:	3302      	addmi	r3, #2
 8006088:	6033      	strmi	r3, [r6, #0]
 800608a:	6825      	ldr	r5, [r4, #0]
 800608c:	f015 0506 	ands.w	r5, r5, #6
 8006090:	d106      	bne.n	80060a0 <_printf_common+0x48>
 8006092:	f104 0a19 	add.w	sl, r4, #25
 8006096:	68e3      	ldr	r3, [r4, #12]
 8006098:	6832      	ldr	r2, [r6, #0]
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	42ab      	cmp	r3, r5
 800609e:	dc26      	bgt.n	80060ee <_printf_common+0x96>
 80060a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060a4:	1e13      	subs	r3, r2, #0
 80060a6:	6822      	ldr	r2, [r4, #0]
 80060a8:	bf18      	it	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	0692      	lsls	r2, r2, #26
 80060ae:	d42b      	bmi.n	8006108 <_printf_common+0xb0>
 80060b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060b4:	4649      	mov	r1, r9
 80060b6:	4638      	mov	r0, r7
 80060b8:	47c0      	blx	r8
 80060ba:	3001      	adds	r0, #1
 80060bc:	d01e      	beq.n	80060fc <_printf_common+0xa4>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	6922      	ldr	r2, [r4, #16]
 80060c2:	f003 0306 	and.w	r3, r3, #6
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	bf02      	ittt	eq
 80060ca:	68e5      	ldreq	r5, [r4, #12]
 80060cc:	6833      	ldreq	r3, [r6, #0]
 80060ce:	1aed      	subeq	r5, r5, r3
 80060d0:	68a3      	ldr	r3, [r4, #8]
 80060d2:	bf0c      	ite	eq
 80060d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d8:	2500      	movne	r5, #0
 80060da:	4293      	cmp	r3, r2
 80060dc:	bfc4      	itt	gt
 80060de:	1a9b      	subgt	r3, r3, r2
 80060e0:	18ed      	addgt	r5, r5, r3
 80060e2:	2600      	movs	r6, #0
 80060e4:	341a      	adds	r4, #26
 80060e6:	42b5      	cmp	r5, r6
 80060e8:	d11a      	bne.n	8006120 <_printf_common+0xc8>
 80060ea:	2000      	movs	r0, #0
 80060ec:	e008      	b.n	8006100 <_printf_common+0xa8>
 80060ee:	2301      	movs	r3, #1
 80060f0:	4652      	mov	r2, sl
 80060f2:	4649      	mov	r1, r9
 80060f4:	4638      	mov	r0, r7
 80060f6:	47c0      	blx	r8
 80060f8:	3001      	adds	r0, #1
 80060fa:	d103      	bne.n	8006104 <_printf_common+0xac>
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006104:	3501      	adds	r5, #1
 8006106:	e7c6      	b.n	8006096 <_printf_common+0x3e>
 8006108:	18e1      	adds	r1, r4, r3
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	2030      	movs	r0, #48	; 0x30
 800610e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006112:	4422      	add	r2, r4
 8006114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800611c:	3302      	adds	r3, #2
 800611e:	e7c7      	b.n	80060b0 <_printf_common+0x58>
 8006120:	2301      	movs	r3, #1
 8006122:	4622      	mov	r2, r4
 8006124:	4649      	mov	r1, r9
 8006126:	4638      	mov	r0, r7
 8006128:	47c0      	blx	r8
 800612a:	3001      	adds	r0, #1
 800612c:	d0e6      	beq.n	80060fc <_printf_common+0xa4>
 800612e:	3601      	adds	r6, #1
 8006130:	e7d9      	b.n	80060e6 <_printf_common+0x8e>
	...

08006134 <_printf_i>:
 8006134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006138:	7e0f      	ldrb	r7, [r1, #24]
 800613a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800613c:	2f78      	cmp	r7, #120	; 0x78
 800613e:	4691      	mov	r9, r2
 8006140:	4680      	mov	r8, r0
 8006142:	460c      	mov	r4, r1
 8006144:	469a      	mov	sl, r3
 8006146:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800614a:	d807      	bhi.n	800615c <_printf_i+0x28>
 800614c:	2f62      	cmp	r7, #98	; 0x62
 800614e:	d80a      	bhi.n	8006166 <_printf_i+0x32>
 8006150:	2f00      	cmp	r7, #0
 8006152:	f000 80d4 	beq.w	80062fe <_printf_i+0x1ca>
 8006156:	2f58      	cmp	r7, #88	; 0x58
 8006158:	f000 80c0 	beq.w	80062dc <_printf_i+0x1a8>
 800615c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006164:	e03a      	b.n	80061dc <_printf_i+0xa8>
 8006166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800616a:	2b15      	cmp	r3, #21
 800616c:	d8f6      	bhi.n	800615c <_printf_i+0x28>
 800616e:	a101      	add	r1, pc, #4	; (adr r1, 8006174 <_printf_i+0x40>)
 8006170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006174:	080061cd 	.word	0x080061cd
 8006178:	080061e1 	.word	0x080061e1
 800617c:	0800615d 	.word	0x0800615d
 8006180:	0800615d 	.word	0x0800615d
 8006184:	0800615d 	.word	0x0800615d
 8006188:	0800615d 	.word	0x0800615d
 800618c:	080061e1 	.word	0x080061e1
 8006190:	0800615d 	.word	0x0800615d
 8006194:	0800615d 	.word	0x0800615d
 8006198:	0800615d 	.word	0x0800615d
 800619c:	0800615d 	.word	0x0800615d
 80061a0:	080062e5 	.word	0x080062e5
 80061a4:	0800620d 	.word	0x0800620d
 80061a8:	0800629f 	.word	0x0800629f
 80061ac:	0800615d 	.word	0x0800615d
 80061b0:	0800615d 	.word	0x0800615d
 80061b4:	08006307 	.word	0x08006307
 80061b8:	0800615d 	.word	0x0800615d
 80061bc:	0800620d 	.word	0x0800620d
 80061c0:	0800615d 	.word	0x0800615d
 80061c4:	0800615d 	.word	0x0800615d
 80061c8:	080062a7 	.word	0x080062a7
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	1d1a      	adds	r2, r3, #4
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	602a      	str	r2, [r5, #0]
 80061d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061dc:	2301      	movs	r3, #1
 80061de:	e09f      	b.n	8006320 <_printf_i+0x1ec>
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	682b      	ldr	r3, [r5, #0]
 80061e4:	0607      	lsls	r7, r0, #24
 80061e6:	f103 0104 	add.w	r1, r3, #4
 80061ea:	6029      	str	r1, [r5, #0]
 80061ec:	d501      	bpl.n	80061f2 <_printf_i+0xbe>
 80061ee:	681e      	ldr	r6, [r3, #0]
 80061f0:	e003      	b.n	80061fa <_printf_i+0xc6>
 80061f2:	0646      	lsls	r6, r0, #25
 80061f4:	d5fb      	bpl.n	80061ee <_printf_i+0xba>
 80061f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061fa:	2e00      	cmp	r6, #0
 80061fc:	da03      	bge.n	8006206 <_printf_i+0xd2>
 80061fe:	232d      	movs	r3, #45	; 0x2d
 8006200:	4276      	negs	r6, r6
 8006202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006206:	485a      	ldr	r0, [pc, #360]	; (8006370 <_printf_i+0x23c>)
 8006208:	230a      	movs	r3, #10
 800620a:	e012      	b.n	8006232 <_printf_i+0xfe>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	6820      	ldr	r0, [r4, #0]
 8006210:	1d19      	adds	r1, r3, #4
 8006212:	6029      	str	r1, [r5, #0]
 8006214:	0605      	lsls	r5, r0, #24
 8006216:	d501      	bpl.n	800621c <_printf_i+0xe8>
 8006218:	681e      	ldr	r6, [r3, #0]
 800621a:	e002      	b.n	8006222 <_printf_i+0xee>
 800621c:	0641      	lsls	r1, r0, #25
 800621e:	d5fb      	bpl.n	8006218 <_printf_i+0xe4>
 8006220:	881e      	ldrh	r6, [r3, #0]
 8006222:	4853      	ldr	r0, [pc, #332]	; (8006370 <_printf_i+0x23c>)
 8006224:	2f6f      	cmp	r7, #111	; 0x6f
 8006226:	bf0c      	ite	eq
 8006228:	2308      	moveq	r3, #8
 800622a:	230a      	movne	r3, #10
 800622c:	2100      	movs	r1, #0
 800622e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006232:	6865      	ldr	r5, [r4, #4]
 8006234:	60a5      	str	r5, [r4, #8]
 8006236:	2d00      	cmp	r5, #0
 8006238:	bfa2      	ittt	ge
 800623a:	6821      	ldrge	r1, [r4, #0]
 800623c:	f021 0104 	bicge.w	r1, r1, #4
 8006240:	6021      	strge	r1, [r4, #0]
 8006242:	b90e      	cbnz	r6, 8006248 <_printf_i+0x114>
 8006244:	2d00      	cmp	r5, #0
 8006246:	d04b      	beq.n	80062e0 <_printf_i+0x1ac>
 8006248:	4615      	mov	r5, r2
 800624a:	fbb6 f1f3 	udiv	r1, r6, r3
 800624e:	fb03 6711 	mls	r7, r3, r1, r6
 8006252:	5dc7      	ldrb	r7, [r0, r7]
 8006254:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006258:	4637      	mov	r7, r6
 800625a:	42bb      	cmp	r3, r7
 800625c:	460e      	mov	r6, r1
 800625e:	d9f4      	bls.n	800624a <_printf_i+0x116>
 8006260:	2b08      	cmp	r3, #8
 8006262:	d10b      	bne.n	800627c <_printf_i+0x148>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	07de      	lsls	r6, r3, #31
 8006268:	d508      	bpl.n	800627c <_printf_i+0x148>
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	6861      	ldr	r1, [r4, #4]
 800626e:	4299      	cmp	r1, r3
 8006270:	bfde      	ittt	le
 8006272:	2330      	movle	r3, #48	; 0x30
 8006274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006278:	f105 35ff 	addle.w	r5, r5, #4294967295
 800627c:	1b52      	subs	r2, r2, r5
 800627e:	6122      	str	r2, [r4, #16]
 8006280:	f8cd a000 	str.w	sl, [sp]
 8006284:	464b      	mov	r3, r9
 8006286:	aa03      	add	r2, sp, #12
 8006288:	4621      	mov	r1, r4
 800628a:	4640      	mov	r0, r8
 800628c:	f7ff fee4 	bl	8006058 <_printf_common>
 8006290:	3001      	adds	r0, #1
 8006292:	d14a      	bne.n	800632a <_printf_i+0x1f6>
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	b004      	add	sp, #16
 800629a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	f043 0320 	orr.w	r3, r3, #32
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	4833      	ldr	r0, [pc, #204]	; (8006374 <_printf_i+0x240>)
 80062a8:	2778      	movs	r7, #120	; 0x78
 80062aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	6829      	ldr	r1, [r5, #0]
 80062b2:	061f      	lsls	r7, r3, #24
 80062b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062b8:	d402      	bmi.n	80062c0 <_printf_i+0x18c>
 80062ba:	065f      	lsls	r7, r3, #25
 80062bc:	bf48      	it	mi
 80062be:	b2b6      	uxthmi	r6, r6
 80062c0:	07df      	lsls	r7, r3, #31
 80062c2:	bf48      	it	mi
 80062c4:	f043 0320 	orrmi.w	r3, r3, #32
 80062c8:	6029      	str	r1, [r5, #0]
 80062ca:	bf48      	it	mi
 80062cc:	6023      	strmi	r3, [r4, #0]
 80062ce:	b91e      	cbnz	r6, 80062d8 <_printf_i+0x1a4>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	f023 0320 	bic.w	r3, r3, #32
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	2310      	movs	r3, #16
 80062da:	e7a7      	b.n	800622c <_printf_i+0xf8>
 80062dc:	4824      	ldr	r0, [pc, #144]	; (8006370 <_printf_i+0x23c>)
 80062de:	e7e4      	b.n	80062aa <_printf_i+0x176>
 80062e0:	4615      	mov	r5, r2
 80062e2:	e7bd      	b.n	8006260 <_printf_i+0x12c>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	6826      	ldr	r6, [r4, #0]
 80062e8:	6961      	ldr	r1, [r4, #20]
 80062ea:	1d18      	adds	r0, r3, #4
 80062ec:	6028      	str	r0, [r5, #0]
 80062ee:	0635      	lsls	r5, r6, #24
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	d501      	bpl.n	80062f8 <_printf_i+0x1c4>
 80062f4:	6019      	str	r1, [r3, #0]
 80062f6:	e002      	b.n	80062fe <_printf_i+0x1ca>
 80062f8:	0670      	lsls	r0, r6, #25
 80062fa:	d5fb      	bpl.n	80062f4 <_printf_i+0x1c0>
 80062fc:	8019      	strh	r1, [r3, #0]
 80062fe:	2300      	movs	r3, #0
 8006300:	6123      	str	r3, [r4, #16]
 8006302:	4615      	mov	r5, r2
 8006304:	e7bc      	b.n	8006280 <_printf_i+0x14c>
 8006306:	682b      	ldr	r3, [r5, #0]
 8006308:	1d1a      	adds	r2, r3, #4
 800630a:	602a      	str	r2, [r5, #0]
 800630c:	681d      	ldr	r5, [r3, #0]
 800630e:	6862      	ldr	r2, [r4, #4]
 8006310:	2100      	movs	r1, #0
 8006312:	4628      	mov	r0, r5
 8006314:	f7f9 ff7c 	bl	8000210 <memchr>
 8006318:	b108      	cbz	r0, 800631e <_printf_i+0x1ea>
 800631a:	1b40      	subs	r0, r0, r5
 800631c:	6060      	str	r0, [r4, #4]
 800631e:	6863      	ldr	r3, [r4, #4]
 8006320:	6123      	str	r3, [r4, #16]
 8006322:	2300      	movs	r3, #0
 8006324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006328:	e7aa      	b.n	8006280 <_printf_i+0x14c>
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	462a      	mov	r2, r5
 800632e:	4649      	mov	r1, r9
 8006330:	4640      	mov	r0, r8
 8006332:	47d0      	blx	sl
 8006334:	3001      	adds	r0, #1
 8006336:	d0ad      	beq.n	8006294 <_printf_i+0x160>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	079b      	lsls	r3, r3, #30
 800633c:	d413      	bmi.n	8006366 <_printf_i+0x232>
 800633e:	68e0      	ldr	r0, [r4, #12]
 8006340:	9b03      	ldr	r3, [sp, #12]
 8006342:	4298      	cmp	r0, r3
 8006344:	bfb8      	it	lt
 8006346:	4618      	movlt	r0, r3
 8006348:	e7a6      	b.n	8006298 <_printf_i+0x164>
 800634a:	2301      	movs	r3, #1
 800634c:	4632      	mov	r2, r6
 800634e:	4649      	mov	r1, r9
 8006350:	4640      	mov	r0, r8
 8006352:	47d0      	blx	sl
 8006354:	3001      	adds	r0, #1
 8006356:	d09d      	beq.n	8006294 <_printf_i+0x160>
 8006358:	3501      	adds	r5, #1
 800635a:	68e3      	ldr	r3, [r4, #12]
 800635c:	9903      	ldr	r1, [sp, #12]
 800635e:	1a5b      	subs	r3, r3, r1
 8006360:	42ab      	cmp	r3, r5
 8006362:	dcf2      	bgt.n	800634a <_printf_i+0x216>
 8006364:	e7eb      	b.n	800633e <_printf_i+0x20a>
 8006366:	2500      	movs	r5, #0
 8006368:	f104 0619 	add.w	r6, r4, #25
 800636c:	e7f5      	b.n	800635a <_printf_i+0x226>
 800636e:	bf00      	nop
 8006370:	08006701 	.word	0x08006701
 8006374:	08006712 	.word	0x08006712

08006378 <__swbuf_r>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	460e      	mov	r6, r1
 800637c:	4614      	mov	r4, r2
 800637e:	4605      	mov	r5, r0
 8006380:	b118      	cbz	r0, 800638a <__swbuf_r+0x12>
 8006382:	6a03      	ldr	r3, [r0, #32]
 8006384:	b90b      	cbnz	r3, 800638a <__swbuf_r+0x12>
 8006386:	f7ff facd 	bl	8005924 <__sinit>
 800638a:	69a3      	ldr	r3, [r4, #24]
 800638c:	60a3      	str	r3, [r4, #8]
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	071a      	lsls	r2, r3, #28
 8006392:	d525      	bpl.n	80063e0 <__swbuf_r+0x68>
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	b31b      	cbz	r3, 80063e0 <__swbuf_r+0x68>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	6922      	ldr	r2, [r4, #16]
 800639c:	1a98      	subs	r0, r3, r2
 800639e:	6963      	ldr	r3, [r4, #20]
 80063a0:	b2f6      	uxtb	r6, r6
 80063a2:	4283      	cmp	r3, r0
 80063a4:	4637      	mov	r7, r6
 80063a6:	dc04      	bgt.n	80063b2 <__swbuf_r+0x3a>
 80063a8:	4621      	mov	r1, r4
 80063aa:	4628      	mov	r0, r5
 80063ac:	f7ff f9f2 	bl	8005794 <_fflush_r>
 80063b0:	b9e0      	cbnz	r0, 80063ec <__swbuf_r+0x74>
 80063b2:	68a3      	ldr	r3, [r4, #8]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	60a3      	str	r3, [r4, #8]
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	6022      	str	r2, [r4, #0]
 80063be:	701e      	strb	r6, [r3, #0]
 80063c0:	6962      	ldr	r2, [r4, #20]
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d004      	beq.n	80063d2 <__swbuf_r+0x5a>
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	07db      	lsls	r3, r3, #31
 80063cc:	d506      	bpl.n	80063dc <__swbuf_r+0x64>
 80063ce:	2e0a      	cmp	r6, #10
 80063d0:	d104      	bne.n	80063dc <__swbuf_r+0x64>
 80063d2:	4621      	mov	r1, r4
 80063d4:	4628      	mov	r0, r5
 80063d6:	f7ff f9dd 	bl	8005794 <_fflush_r>
 80063da:	b938      	cbnz	r0, 80063ec <__swbuf_r+0x74>
 80063dc:	4638      	mov	r0, r7
 80063de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e0:	4621      	mov	r1, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 f806 	bl	80063f4 <__swsetup_r>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d0d5      	beq.n	8006398 <__swbuf_r+0x20>
 80063ec:	f04f 37ff 	mov.w	r7, #4294967295
 80063f0:	e7f4      	b.n	80063dc <__swbuf_r+0x64>
	...

080063f4 <__swsetup_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4b2a      	ldr	r3, [pc, #168]	; (80064a0 <__swsetup_r+0xac>)
 80063f8:	4605      	mov	r5, r0
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	460c      	mov	r4, r1
 80063fe:	b118      	cbz	r0, 8006408 <__swsetup_r+0x14>
 8006400:	6a03      	ldr	r3, [r0, #32]
 8006402:	b90b      	cbnz	r3, 8006408 <__swsetup_r+0x14>
 8006404:	f7ff fa8e 	bl	8005924 <__sinit>
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800640e:	0718      	lsls	r0, r3, #28
 8006410:	d422      	bmi.n	8006458 <__swsetup_r+0x64>
 8006412:	06d9      	lsls	r1, r3, #27
 8006414:	d407      	bmi.n	8006426 <__swsetup_r+0x32>
 8006416:	2309      	movs	r3, #9
 8006418:	602b      	str	r3, [r5, #0]
 800641a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e034      	b.n	8006490 <__swsetup_r+0x9c>
 8006426:	0758      	lsls	r0, r3, #29
 8006428:	d512      	bpl.n	8006450 <__swsetup_r+0x5c>
 800642a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800642c:	b141      	cbz	r1, 8006440 <__swsetup_r+0x4c>
 800642e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006432:	4299      	cmp	r1, r3
 8006434:	d002      	beq.n	800643c <__swsetup_r+0x48>
 8006436:	4628      	mov	r0, r5
 8006438:	f7ff fbd2 	bl	8005be0 <_free_r>
 800643c:	2300      	movs	r3, #0
 800643e:	6363      	str	r3, [r4, #52]	; 0x34
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	2300      	movs	r3, #0
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	f043 0308 	orr.w	r3, r3, #8
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	b94b      	cbnz	r3, 8006470 <__swsetup_r+0x7c>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006466:	d003      	beq.n	8006470 <__swsetup_r+0x7c>
 8006468:	4621      	mov	r1, r4
 800646a:	4628      	mov	r0, r5
 800646c:	f000 f850 	bl	8006510 <__smakebuf_r>
 8006470:	89a0      	ldrh	r0, [r4, #12]
 8006472:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006476:	f010 0301 	ands.w	r3, r0, #1
 800647a:	d00a      	beq.n	8006492 <__swsetup_r+0x9e>
 800647c:	2300      	movs	r3, #0
 800647e:	60a3      	str	r3, [r4, #8]
 8006480:	6963      	ldr	r3, [r4, #20]
 8006482:	425b      	negs	r3, r3
 8006484:	61a3      	str	r3, [r4, #24]
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	b943      	cbnz	r3, 800649c <__swsetup_r+0xa8>
 800648a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800648e:	d1c4      	bne.n	800641a <__swsetup_r+0x26>
 8006490:	bd38      	pop	{r3, r4, r5, pc}
 8006492:	0781      	lsls	r1, r0, #30
 8006494:	bf58      	it	pl
 8006496:	6963      	ldrpl	r3, [r4, #20]
 8006498:	60a3      	str	r3, [r4, #8]
 800649a:	e7f4      	b.n	8006486 <__swsetup_r+0x92>
 800649c:	2000      	movs	r0, #0
 800649e:	e7f7      	b.n	8006490 <__swsetup_r+0x9c>
 80064a0:	200000e4 	.word	0x200000e4

080064a4 <_sbrk_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4d06      	ldr	r5, [pc, #24]	; (80064c0 <_sbrk_r+0x1c>)
 80064a8:	2300      	movs	r3, #0
 80064aa:	4604      	mov	r4, r0
 80064ac:	4608      	mov	r0, r1
 80064ae:	602b      	str	r3, [r5, #0]
 80064b0:	f7fa fc36 	bl	8000d20 <_sbrk>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d102      	bne.n	80064be <_sbrk_r+0x1a>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	b103      	cbz	r3, 80064be <_sbrk_r+0x1a>
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	20004d3c 	.word	0x20004d3c

080064c4 <__swhatbuf_r>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	460c      	mov	r4, r1
 80064c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064cc:	2900      	cmp	r1, #0
 80064ce:	b096      	sub	sp, #88	; 0x58
 80064d0:	4615      	mov	r5, r2
 80064d2:	461e      	mov	r6, r3
 80064d4:	da0d      	bge.n	80064f2 <__swhatbuf_r+0x2e>
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064dc:	f04f 0100 	mov.w	r1, #0
 80064e0:	bf0c      	ite	eq
 80064e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80064e6:	2340      	movne	r3, #64	; 0x40
 80064e8:	2000      	movs	r0, #0
 80064ea:	6031      	str	r1, [r6, #0]
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	b016      	add	sp, #88	; 0x58
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
 80064f2:	466a      	mov	r2, sp
 80064f4:	f000 f848 	bl	8006588 <_fstat_r>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	dbec      	blt.n	80064d6 <__swhatbuf_r+0x12>
 80064fc:	9901      	ldr	r1, [sp, #4]
 80064fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006502:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006506:	4259      	negs	r1, r3
 8006508:	4159      	adcs	r1, r3
 800650a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800650e:	e7eb      	b.n	80064e8 <__swhatbuf_r+0x24>

08006510 <__smakebuf_r>:
 8006510:	898b      	ldrh	r3, [r1, #12]
 8006512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006514:	079d      	lsls	r5, r3, #30
 8006516:	4606      	mov	r6, r0
 8006518:	460c      	mov	r4, r1
 800651a:	d507      	bpl.n	800652c <__smakebuf_r+0x1c>
 800651c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	2301      	movs	r3, #1
 8006526:	6163      	str	r3, [r4, #20]
 8006528:	b002      	add	sp, #8
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	ab01      	add	r3, sp, #4
 800652e:	466a      	mov	r2, sp
 8006530:	f7ff ffc8 	bl	80064c4 <__swhatbuf_r>
 8006534:	9900      	ldr	r1, [sp, #0]
 8006536:	4605      	mov	r5, r0
 8006538:	4630      	mov	r0, r6
 800653a:	f7ff fbbd 	bl	8005cb8 <_malloc_r>
 800653e:	b948      	cbnz	r0, 8006554 <__smakebuf_r+0x44>
 8006540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006544:	059a      	lsls	r2, r3, #22
 8006546:	d4ef      	bmi.n	8006528 <__smakebuf_r+0x18>
 8006548:	f023 0303 	bic.w	r3, r3, #3
 800654c:	f043 0302 	orr.w	r3, r3, #2
 8006550:	81a3      	strh	r3, [r4, #12]
 8006552:	e7e3      	b.n	800651c <__smakebuf_r+0xc>
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	6020      	str	r0, [r4, #0]
 8006558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	9b00      	ldr	r3, [sp, #0]
 8006560:	6163      	str	r3, [r4, #20]
 8006562:	9b01      	ldr	r3, [sp, #4]
 8006564:	6120      	str	r0, [r4, #16]
 8006566:	b15b      	cbz	r3, 8006580 <__smakebuf_r+0x70>
 8006568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800656c:	4630      	mov	r0, r6
 800656e:	f000 f81d 	bl	80065ac <_isatty_r>
 8006572:	b128      	cbz	r0, 8006580 <__smakebuf_r+0x70>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	431d      	orrs	r5, r3
 8006584:	81a5      	strh	r5, [r4, #12]
 8006586:	e7cf      	b.n	8006528 <__smakebuf_r+0x18>

08006588 <_fstat_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d07      	ldr	r5, [pc, #28]	; (80065a8 <_fstat_r+0x20>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	4611      	mov	r1, r2
 8006594:	602b      	str	r3, [r5, #0]
 8006596:	f7fa fb9a 	bl	8000cce <_fstat>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	d102      	bne.n	80065a4 <_fstat_r+0x1c>
 800659e:	682b      	ldr	r3, [r5, #0]
 80065a0:	b103      	cbz	r3, 80065a4 <_fstat_r+0x1c>
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	bd38      	pop	{r3, r4, r5, pc}
 80065a6:	bf00      	nop
 80065a8:	20004d3c 	.word	0x20004d3c

080065ac <_isatty_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d06      	ldr	r5, [pc, #24]	; (80065c8 <_isatty_r+0x1c>)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fa fb99 	bl	8000cee <_isatty>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_isatty_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_isatty_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20004d3c 	.word	0x20004d3c

080065cc <_init>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr

080065d8 <_fini>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	bf00      	nop
 80065dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065de:	bc08      	pop	{r3}
 80065e0:	469e      	mov	lr, r3
 80065e2:	4770      	bx	lr
