
RTOSII_tp1_prueba2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  080089bc  080089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cfc  08008cfc  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d04  08008d04  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d08  08008d08  00018d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08008d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  200000e8  08008df4  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cdc  08008df4  00024cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001faad  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004901  00000000  00000000  0003fbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  000444c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e8  00000000  00000000  00045e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027344  00000000  00000000  00047680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f3da  00000000  00000000  0006e9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de79d  00000000  00000000  0008dd9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c53b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074a4  00000000  00000000  0016c58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080089a4 	.word	0x080089a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	080089a4 	.word	0x080089a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000104 	.word	0x20000104
 80005e4:	200001c8 	.word	0x200001c8

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fcf9 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f827 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f935 	bl	8000864 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 f8db 	bl	80007b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fe:	f000 f903 	bl	8000808 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000602:	f000 f88b 	bl	800071c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x50>)
 8000608:	f002 fb80 	bl	8002d0c <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 800060c:	f006 fd86 	bl	800711c <app_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <main+0x54>)
 8000612:	1d3c      	adds	r4, r7, #4
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fb99 	bl	8004d5e <osThreadCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <main+0x58>)
 8000630:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000632:	f004 fb8d 	bl	8004d50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	e7fe      	b.n	8000636 <main+0x4e>
 8000638:	200003c8 	.word	0x200003c8
 800063c:	080089c8 	.word	0x080089c8
 8000640:	20000960 	.word	0x20000960

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f007 fb13 	bl	8007c7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SystemClock_Config+0xd0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a28      	ldr	r2, [pc, #160]	; (8000714 <SystemClock_Config+0xd0>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a22      	ldr	r2, [pc, #136]	; (8000718 <SystemClock_Config+0xd4>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 f82f 	bl	8002730 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d8:	f000 f9ba 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2105      	movs	r1, #5
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f972 	bl	80019e4 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000706:	f000 f9a3 	bl	8000a50 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_TIM2_Init+0x94>)
 800073a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000742:	2201      	movs	r2, #1
 8000744:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42-1;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_TIM2_Init+0x94>)
 800074e:	2229      	movs	r2, #41	; 0x29
 8000750:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_TIM2_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800075e:	4814      	ldr	r0, [pc, #80]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000760:	f002 fa84 	bl	8002c6c <HAL_TIM_Base_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f971 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	4619      	mov	r1, r3
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_TIM2_Init+0x94>)
 800077c:	f002 fc3e 	bl	8002ffc <HAL_TIM_ConfigClockSource>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f963 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000798:	f002 fe5a 	bl	8003450 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007a2:	f000 f955 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200003c8 	.word	0x200003c8

080007b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART3_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MX_USART3_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_USART3_UART_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART3_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART3_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART3_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART3_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART3_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART3_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART3_UART_Init+0x4c>)
 80007ec:	f002 fec0 	bl	8003570 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 f92b 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000410 	.word	0x20000410
 8000804:	40004800 	.word	0x40004800

08000808 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000812:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2206      	movs	r2, #6
 8000818:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2202      	movs	r2, #2
 800081e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2202      	movs	r2, #2
 800082a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2201      	movs	r2, #1
 8000830:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2201      	movs	r2, #1
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	f000 ff82 	bl	8001754 <HAL_PCD_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f8fb 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000454 	.word	0x20000454

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	4b50      	ldr	r3, [pc, #320]	; (80009c0 <MX_GPIO_Init+0x15c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a4f      	ldr	r2, [pc, #316]	; (80009c0 <MX_GPIO_Init+0x15c>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b4d      	ldr	r3, [pc, #308]	; (80009c0 <MX_GPIO_Init+0x15c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	4b49      	ldr	r3, [pc, #292]	; (80009c0 <MX_GPIO_Init+0x15c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a48      	ldr	r2, [pc, #288]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b46      	ldr	r3, [pc, #280]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b42      	ldr	r3, [pc, #264]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a41      	ldr	r2, [pc, #260]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b3f      	ldr	r3, [pc, #252]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a3a      	ldr	r2, [pc, #232]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a33      	ldr	r2, [pc, #204]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <MX_GPIO_Init+0x15c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <MX_GPIO_Init+0x15c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a2c      	ldr	r2, [pc, #176]	; (80009c0 <MX_GPIO_Init+0x15c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_GPIO_Init+0x15c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f244 0181 	movw	r1, #16513	; 0x4081
 8000928:	4826      	ldr	r0, [pc, #152]	; (80009c4 <MX_GPIO_Init+0x160>)
 800092a:	f000 fee1 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	4825      	ldr	r0, [pc, #148]	; (80009c8 <MX_GPIO_Init+0x164>)
 8000934:	f000 fedc 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800093e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	481f      	ldr	r0, [pc, #124]	; (80009cc <MX_GPIO_Init+0x168>)
 8000950:	f000 fd22 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000954:	f244 0381 	movw	r3, #16513	; 0x4081
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4815      	ldr	r0, [pc, #84]	; (80009c4 <MX_GPIO_Init+0x160>)
 800096e:	f000 fd13 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <MX_GPIO_Init+0x164>)
 800098a:	f000 fd05 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_GPIO_Init+0x164>)
 80009a2:	f000 fcf9 	bl	8001398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2105      	movs	r1, #5
 80009aa:	2028      	movs	r0, #40	; 0x28
 80009ac:	f000 fc38 	bl	8001220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009b0:	2028      	movs	r0, #40	; 0x28
 80009b2:	f000 fc51 	bl	8001258 <HAL_NVIC_EnableIRQ>

}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	; 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40021800 	.word	0x40021800
 80009cc:	40020800 	.word	0x40020800

080009d0 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <configureTimerForRunTimeStats+0x14>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	20000964 	.word	0x20000964

080009e8 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <getRunTimeCounterValue+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000964 	.word	0x20000964

08000a00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(0xFFFFFFFF);		/* Miximum delay = (2**32-1) tick */
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f004 f9f3 	bl	8004df6 <osDelay>
 8000a10:	e7fa      	b.n	8000a08 <StartDefaultTask+0x8>
	...

08000a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d101      	bne.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a26:	f000 faff 	bl	8001028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a32:	d104      	bne.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a3c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40010000 	.word	0x40010000
 8000a4c:	20000964 	.word	0x20000964

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_MspInit+0x54>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <HAL_MspInit+0x54>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x54>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_MspInit+0x54>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_MspInit+0x54>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_MspInit+0x54>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	f06f 0001 	mvn.w	r0, #1
 8000aa2:	f000 fbbd 	bl	8001220 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ac4:	d115      	bne.n	8000af2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_TIM_Base_MspInit+0x48>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <HAL_TIM_Base_MspInit+0x48>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_TIM_Base_MspInit+0x48>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2105      	movs	r1, #5
 8000ae6:	201c      	movs	r0, #28
 8000ae8:	f000 fb9a 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aec:	201c      	movs	r0, #28
 8000aee:	f000 fbb3 	bl	8001258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	; (8000b94 <HAL_UART_MspInit+0x94>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d134      	bne.n	8000b8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <HAL_UART_MspInit+0x98>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <HAL_UART_MspInit+0x98>)
 8000b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <HAL_UART_MspInit+0x98>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_UART_MspInit+0x98>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <HAL_UART_MspInit+0x98>)
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_UART_MspInit+0x98>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0308 	and.w	r3, r3, #8
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <HAL_UART_MspInit+0x9c>)
 8000b78:	f000 fc0e 	bl	8001398 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2105      	movs	r1, #5
 8000b80:	2027      	movs	r0, #39	; 0x27
 8000b82:	f000 fb4d 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b86:	2027      	movs	r0, #39	; 0x27
 8000b88:	f000 fb66 	bl	8001258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40004800 	.word	0x40004800
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020c00 	.word	0x40020c00

08000ba0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0a0      	sub	sp, #128	; 0x80
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	225c      	movs	r2, #92	; 0x5c
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f007 f85c 	bl	8007c7e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bce:	d14e      	bne.n	8000c6e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f84c 	bl	8001c7c <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000bea:	f7ff ff31 	bl	8000a50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <HAL_PCD_MspInit+0xd8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <HAL_PCD_MspInit+0xd8>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <HAL_PCD_MspInit+0xd8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c0a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c24:	4619      	mov	r1, r3
 8000c26:	4815      	ldr	r0, [pc, #84]	; (8000c7c <HAL_PCD_MspInit+0xdc>)
 8000c28:	f000 fbb6 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c30:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480e      	ldr	r0, [pc, #56]	; (8000c7c <HAL_PCD_MspInit+0xdc>)
 8000c42:	f000 fba9 	bl	8001398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_PCD_MspInit+0xd8>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <HAL_PCD_MspInit+0xd8>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6353      	str	r3, [r2, #52]	; 0x34
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_PCD_MspInit+0xd8>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_PCD_MspInit+0xd8>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_PCD_MspInit+0xd8>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3780      	adds	r7, #128	; 0x80
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <HAL_InitTick+0xd4>)
 8000c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c98:	4a2e      	ldr	r2, [pc, #184]	; (8000d54 <HAL_InitTick+0xd4>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <HAL_InitTick+0xd4>)
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cac:	f107 020c 	add.w	r2, r7, #12
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 ffae 	bl	8001c18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cbc:	f000 ff98 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc8:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <HAL_InitTick+0xd8>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	0c9b      	lsrs	r3, r3, #18
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_InitTick+0xdc>)
 8000cd6:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <HAL_InitTick+0xe0>)
 8000cd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <HAL_InitTick+0xdc>)
 8000cdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ce2:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <HAL_InitTick+0xdc>)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_InitTick+0xdc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_InitTick+0xdc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_InitTick+0xdc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cfa:	4818      	ldr	r0, [pc, #96]	; (8000d5c <HAL_InitTick+0xdc>)
 8000cfc:	f001 ffb6 	bl	8002c6c <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d11b      	bne.n	8000d46 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d0e:	4813      	ldr	r0, [pc, #76]	; (8000d5c <HAL_InitTick+0xdc>)
 8000d10:	f001 fffc 	bl	8002d0c <HAL_TIM_Base_Start_IT>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d111      	bne.n	8000d46 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d22:	2019      	movs	r0, #25
 8000d24:	f000 fa98 	bl	8001258 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b0f      	cmp	r3, #15
 8000d2c:	d808      	bhi.n	8000d40 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	2019      	movs	r0, #25
 8000d34:	f000 fa74 	bl	8001220 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_InitTick+0xe4>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e002      	b.n	8000d46 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3730      	adds	r7, #48	; 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	20000968 	.word	0x20000968
 8000d60:	40010000 	.word	0x40010000
 8000d64:	20000004 	.word	0x20000004

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d9a:	f002 f827 	bl	8002dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000968 	.word	0x20000968

08000da8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <TIM2_IRQHandler+0x10>)
 8000dae:	f002 f81d 	bl	8002dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200003c8 	.word	0x200003c8

08000dbc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <USART3_IRQHandler+0x10>)
 8000dc2:	f002 fd5f 	bl	8003884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000410 	.word	0x20000410

08000dd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000dd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dd8:	f000 fca4 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	return 1;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_kill>:

int _kill(int pid, int sig)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000dfa:	f006 fd29 	bl	8007850 <__errno>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2216      	movs	r2, #22
 8000e02:	601a      	str	r2, [r3, #0]
	return -1;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_exit>:

void _exit (int status)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ffe7 	bl	8000df0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e22:	e7fe      	b.n	8000e22 <_exit+0x12>

08000e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
	}

return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e009      	b.n	8000e84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f005 ff87 	bl	8006d8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf1      	blt.n	8000e70 <_write+0x12>
	}
	return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f006 fc8e 	bl	8007850 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20020000 	.word	0x20020000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	200009b0 	.word	0x200009b0
 8000f68:	20004ce0 	.word	0x20004ce0

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f96:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fac:	4c0b      	ldr	r4, [pc, #44]	; (8000fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fba:	f7ff ffd7 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f006 fe29 	bl	8007c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f7ff fb11 	bl	80005e8 <main>
  bx  lr    
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000fd4:	08008d0c 	.word	0x08008d0c
  ldr r2, =_sbss
 8000fd8:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000fdc:	20004cdc 	.word	0x20004cdc

08000fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <HAL_Init+0x40>)
 8000fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_Init+0x40>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_Init+0x40>)
 8001006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f8fc 	bl	800120a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	200f      	movs	r0, #15
 8001014:	f7ff fe34 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fd20 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023c00 	.word	0x40023c00

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	200009b4 	.word	0x200009b4

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200009b4 	.word	0x200009b4

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff4c 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001232:	f7ff ff61 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 8001236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	6978      	ldr	r0, [r7, #20]
 800123e:	f7ff ffb1 	bl	80011a4 <NVIC_EncodePriority>
 8001242:	4602      	mov	r2, r0
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff80 	bl	8001150 <__NVIC_SetPriority>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff54 	bl	8001114 <__NVIC_EnableIRQ>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001280:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001282:	f7ff fee5 	bl	8001050 <HAL_GetTick>
 8001286:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d008      	beq.n	80012a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e052      	b.n	800134c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0216 	bic.w	r2, r2, #22
 80012b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <HAL_DMA_Abort+0x62>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0208 	bic.w	r2, r2, #8
 80012e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f6:	e013      	b.n	8001320 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f8:	f7ff feaa 	bl	8001050 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b05      	cmp	r3, #5
 8001304:	d90c      	bls.n	8001320 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2220      	movs	r2, #32
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2203      	movs	r2, #3
 8001310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e015      	b.n	800134c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1e4      	bne.n	80012f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	223f      	movs	r2, #63	; 0x3f
 8001334:	409a      	lsls	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d004      	beq.n	8001372 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00c      	b.n	800138c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2205      	movs	r2, #5
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e165      	b.n	8001680 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 8154 	bne.w	800167a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80ae 	beq.w	800167a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a5c      	ldr	r2, [pc, #368]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b5a      	ldr	r3, [pc, #360]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_GPIO_Init+0x304>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4f      	ldr	r2, [pc, #316]	; (80016a0 <HAL_GPIO_Init+0x308>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <HAL_GPIO_Init+0x310>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_GPIO_Init+0x314>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_GPIO_Init+0x318>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x20a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x206>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a49      	ldr	r2, [pc, #292]	; (80016b8 <HAL_GPIO_Init+0x320>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x202>
 8001596:	2306      	movs	r3, #6
 8001598:	e00c      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 800159a:	2307      	movs	r3, #7
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 800159e:	2305      	movs	r3, #5
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	; (800169c <HAL_GPIO_Init+0x304>)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_GPIO_Init+0x324>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a31      	ldr	r2, [pc, #196]	; (80016bc <HAL_GPIO_Init+0x324>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_GPIO_Init+0x324>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a26      	ldr	r2, [pc, #152]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164a:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <HAL_GPIO_Init+0x324>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3301      	adds	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f67f ae96 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40021400 	.word	0x40021400
 80016b8:	40021800 	.word	0x40021800
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e001      	b.n	80016e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800170c:	e003      	b.n	8001716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	4618      	mov	r0, r3
 8001744:	f005 fb4e 	bl	8006de4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013c00 	.word	0x40013c00

08001754 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	b08f      	sub	sp, #60	; 0x3c
 8001758:	af0a      	add	r7, sp, #40	; 0x28
 800175a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e116      	b.n	8001994 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d106      	bne.n	8001786 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fa0d 	bl	8000ba0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 f820 	bl	80047ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	687e      	ldr	r6, [r7, #4]
 80017b2:	466d      	mov	r5, sp
 80017b4:	f106 0410 	add.w	r4, r6, #16
 80017b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c8:	1d33      	adds	r3, r6, #4
 80017ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017cc:	6838      	ldr	r0, [r7, #0]
 80017ce:	f002 ffab 	bl	8004728 <USB_CoreInit>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0d7      	b.n	8001994 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 f80e 	bl	800480c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e04a      	b.n	800188c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	333d      	adds	r3, #61	; 0x3d
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	333c      	adds	r3, #60	; 0x3c
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	b298      	uxth	r0, r3
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	3344      	adds	r3, #68	; 0x44
 8001832:	4602      	mov	r2, r0
 8001834:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3340      	adds	r3, #64	; 0x40
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3348      	adds	r3, #72	; 0x48
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800185e:	7bfa      	ldrb	r2, [r7, #15]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	334c      	adds	r3, #76	; 0x4c
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	3354      	adds	r3, #84	; 0x54
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	3301      	adds	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	d3af      	bcc.n	80017f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e044      	b.n	8001926 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	3301      	adds	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	d3b5      	bcc.n	800189c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	687e      	ldr	r6, [r7, #4]
 8001938:	466d      	mov	r5, sp
 800193a:	f106 0410 	add.w	r4, r6, #16
 800193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001946:	e894 0003 	ldmia.w	r4, {r0, r1}
 800194a:	e885 0003 	stmia.w	r5, {r0, r1}
 800194e:	1d33      	adds	r3, r6, #4
 8001950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001952:	6838      	ldr	r0, [r7, #0]
 8001954:	f002 ffa6 	bl	80048a4 <USB_DevInit>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2202      	movs	r2, #2
 8001962:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e014      	b.n	8001994 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	2b01      	cmp	r3, #1
 8001980:	d102      	bne.n	8001988 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f80a 	bl	800199c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f003 f964 	bl	8004c5a <USB_DevDisconnect>

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800199c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ce:	f043 0303 	orr.w	r3, r3, #3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0cc      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f8:	4b68      	ldr	r3, [pc, #416]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d90c      	bls.n	8001a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b65      	ldr	r3, [pc, #404]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0e:	4b63      	ldr	r3, [pc, #396]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0b8      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a38:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a52      	ldr	r2, [pc, #328]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	494d      	ldr	r1, [pc, #308]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d044      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d119      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e07f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d003      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa2:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e06f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e067      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac2:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f023 0203 	bic.w	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4934      	ldr	r1, [pc, #208]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad4:	f7ff fabc 	bl	8001050 <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001adc:	f7ff fab8 	bl	8001050 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e04f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 020c 	and.w	r2, r3, #12
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d1eb      	bne.n	8001adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d20c      	bcs.n	8001b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e032      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4916      	ldr	r1, [pc, #88]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b6a:	f000 fbb1 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	490a      	ldr	r1, [pc, #40]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	5ccb      	ldrb	r3, [r1, r3]
 8001b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f878 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	08008c00 	.word	0x08008c00
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004

08001bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0a9b      	lsrs	r3, r3, #10
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	08008c10 	.word	0x08008c10

08001bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bf4:	f7ff ffdc 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0b5b      	lsrs	r3, r3, #13
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	; (8001c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08008c10 	.word	0x08008c10

08001c18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	220f      	movs	r2, #15
 8001c26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0203 	and.w	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_RCC_GetClockConfig+0x5c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_RCC_GetClockConfig+0x5c>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_GetClockConfig+0x5c>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_RCC_GetClockConfig+0x60>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 020f 	and.w	r2, r3, #15
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	601a      	str	r2, [r3, #0]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	; 0x30
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d010      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001cb4:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cba:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	496c      	ldr	r1, [pc, #432]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d010      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001ce2:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ce8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	4960      	ldr	r1, [pc, #384]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001d00:	2301      	movs	r3, #1
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d017      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d10:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4955      	ldr	r1, [pc, #340]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001d30:	2301      	movs	r3, #1
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d017      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d4c:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5a:	4946      	ldr	r1, [pc, #280]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 808a 	beq.w	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a38      	ldr	r2, [pc, #224]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001da6:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a33      	ldr	r2, [pc, #204]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001db2:	f7ff f94d 	bl	8001050 <HAL_GetTick>
 8001db6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dba:	f7ff f949 	bl	8001050 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e278      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dd8:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d02f      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d028      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dfe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d114      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff f917 	bl	8001050 <HAL_GetTick>
 8001e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7ff f913 	bl	8001050 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e240      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ee      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e54:	d114      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e6a:	4902      	ldr	r1, [pc, #8]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]
 8001e70:	e00c      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	42470e40 	.word	0x42470e40
 8001e80:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a49      	ldr	r2, [pc, #292]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e8a:	6093      	str	r3, [r2, #8]
 8001e8c:	4b47      	ldr	r3, [pc, #284]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e98:	4944      	ldr	r1, [pc, #272]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001eb0:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001eb2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001ec0:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4937      	ldr	r1, [pc, #220]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ee2:	4b32      	ldr	r3, [pc, #200]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef0:	492e      	ldr	r1, [pc, #184]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d011      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	4926      	ldr	r1, [pc, #152]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f22:	d101      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001f24:	2301      	movs	r3, #1
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	491a      	ldr	r1, [pc, #104]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d011      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f64:	4911      	ldr	r1, [pc, #68]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f74:	d101      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001f76:	2301      	movs	r3, #1
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f88:	f040 80ff 	bne.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f92:	f7ff f85d 	bl	8001050 <HAL_GetTick>
 8001f96:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f98:	e00e      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f9a:	f7ff f859 	bl	8001050 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d907      	bls.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e188      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	424711e0 	.word	0x424711e0
 8001fb4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fb8:	4b7e      	ldr	r3, [pc, #504]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ea      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d009      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d028      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d124      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001fec:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002004:	0e1b      	lsrs	r3, r3, #24
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	019b      	lsls	r3, r3, #6
 8002016:	431a      	orrs	r2, r3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	3b01      	subs	r3, #1
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	431a      	orrs	r2, r3
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	071b      	lsls	r3, r3, #28
 800202e:	4961      	ldr	r1, [pc, #388]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d004      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800204a:	d00a      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002054:	2b00      	cmp	r3, #0
 8002056:	d035      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002060:	d130      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002062:	4b54      	ldr	r3, [pc, #336]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	3301      	adds	r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207a:	0f1b      	lsrs	r3, r3, #28
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	019b      	lsls	r3, r3, #6
 800208c:	431a      	orrs	r2, r3
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	3b01      	subs	r3, #1
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	431a      	orrs	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	071b      	lsls	r3, r3, #28
 80020a4:	4943      	ldr	r1, [pc, #268]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020ac:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b2:	f023 021f 	bic.w	r2, r3, #31
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	3b01      	subs	r3, #1
 80020bc:	493d      	ldr	r1, [pc, #244]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d029      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d8:	d124      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80020da:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	3301      	adds	r3, #1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f2:	0f1b      	lsrs	r3, r3, #28
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	019b      	lsls	r3, r3, #6
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	431a      	orrs	r2, r3
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	431a      	orrs	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	071b      	lsls	r3, r3, #28
 800211c:	4925      	ldr	r1, [pc, #148]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800212c:	2b00      	cmp	r3, #0
 800212e:	d016      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	071b      	lsls	r3, r3, #28
 8002156:	4917      	ldr	r1, [pc, #92]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002164:	f7fe ff74 	bl	8001050 <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800216c:	f7fe ff70 	bl	8001050 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e09f      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	2b01      	cmp	r3, #1
 800218e:	f040 8095 	bne.w	80022bc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002198:	f7fe ff5a 	bl	8001050 <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800219e:	e00f      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80021a0:	f7fe ff56 	bl	8001050 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d908      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e085      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x642>
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	42470068 	.word	0x42470068
 80021bc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021c0:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021cc:	d0e8      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d02b      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d127      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	3301      	adds	r3, #1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	019b      	lsls	r3, r3, #6
 8002212:	431a      	orrs	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	085b      	lsrs	r3, r3, #1
 8002218:	3b01      	subs	r3, #1
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	061b      	lsls	r3, r3, #24
 8002224:	4928      	ldr	r1, [pc, #160]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800222e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002232:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	3b01      	subs	r3, #1
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d01d      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800225a:	d118      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	0e1b      	lsrs	r3, r3, #24
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	019b      	lsls	r3, r3, #6
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	3b01      	subs	r3, #1
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	4910      	ldr	r1, [pc, #64]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002294:	f7fe fedc 	bl	8001050 <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800229c:	f7fe fed8 	bl	8001050 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e007      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ba:	d1ef      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3730      	adds	r7, #48	; 0x30
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	42470070 	.word	0x42470070

080022d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d4:	b0ae      	sub	sp, #184	; 0xb8
 80022d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f6:	4bcb      	ldr	r3, [pc, #812]	; (8002624 <HAL_RCC_GetSysClockFreq+0x354>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	f200 8206 	bhi.w	8002710 <HAL_RCC_GetSysClockFreq+0x440>
 8002304:	a201      	add	r2, pc, #4	; (adr r2, 800230c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230a:	bf00      	nop
 800230c:	08002341 	.word	0x08002341
 8002310:	08002711 	.word	0x08002711
 8002314:	08002711 	.word	0x08002711
 8002318:	08002711 	.word	0x08002711
 800231c:	08002349 	.word	0x08002349
 8002320:	08002711 	.word	0x08002711
 8002324:	08002711 	.word	0x08002711
 8002328:	08002711 	.word	0x08002711
 800232c:	08002351 	.word	0x08002351
 8002330:	08002711 	.word	0x08002711
 8002334:	08002711 	.word	0x08002711
 8002338:	08002711 	.word	0x08002711
 800233c:	08002541 	.word	0x08002541
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4bb9      	ldr	r3, [pc, #740]	; (8002628 <HAL_RCC_GetSysClockFreq+0x358>)
 8002342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002346:	e1e7      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002348:	4bb8      	ldr	r3, [pc, #736]	; (800262c <HAL_RCC_GetSysClockFreq+0x35c>)
 800234a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800234e:	e1e3      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002350:	4bb4      	ldr	r3, [pc, #720]	; (8002624 <HAL_RCC_GetSysClockFreq+0x354>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235c:	4bb1      	ldr	r3, [pc, #708]	; (8002624 <HAL_RCC_GetSysClockFreq+0x354>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d071      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002368:	4bae      	ldr	r3, [pc, #696]	; (8002624 <HAL_RCC_GetSysClockFreq+0x354>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	2200      	movs	r2, #0
 8002370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002374:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800237c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002380:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800238a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800238e:	4622      	mov	r2, r4
 8002390:	462b      	mov	r3, r5
 8002392:	f04f 0000 	mov.w	r0, #0
 8002396:	f04f 0100 	mov.w	r1, #0
 800239a:	0159      	lsls	r1, r3, #5
 800239c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a0:	0150      	lsls	r0, r2, #5
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4621      	mov	r1, r4
 80023a8:	1a51      	subs	r1, r2, r1
 80023aa:	6439      	str	r1, [r7, #64]	; 0x40
 80023ac:	4629      	mov	r1, r5
 80023ae:	eb63 0301 	sbc.w	r3, r3, r1
 80023b2:	647b      	str	r3, [r7, #68]	; 0x44
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80023c0:	4649      	mov	r1, r9
 80023c2:	018b      	lsls	r3, r1, #6
 80023c4:	4641      	mov	r1, r8
 80023c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ca:	4641      	mov	r1, r8
 80023cc:	018a      	lsls	r2, r1, #6
 80023ce:	4641      	mov	r1, r8
 80023d0:	1a51      	subs	r1, r2, r1
 80023d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80023d4:	4649      	mov	r1, r9
 80023d6:	eb63 0301 	sbc.w	r3, r3, r1
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80023e8:	4649      	mov	r1, r9
 80023ea:	00cb      	lsls	r3, r1, #3
 80023ec:	4641      	mov	r1, r8
 80023ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023f2:	4641      	mov	r1, r8
 80023f4:	00ca      	lsls	r2, r1, #3
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	4622      	mov	r2, r4
 80023fe:	189b      	adds	r3, r3, r2
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
 8002402:	462b      	mov	r3, r5
 8002404:	460a      	mov	r2, r1
 8002406:	eb42 0303 	adc.w	r3, r2, r3
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002418:	4629      	mov	r1, r5
 800241a:	024b      	lsls	r3, r1, #9
 800241c:	4621      	mov	r1, r4
 800241e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002422:	4621      	mov	r1, r4
 8002424:	024a      	lsls	r2, r1, #9
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800242e:	2200      	movs	r2, #0
 8002430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002434:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002438:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800243c:	f7fd ff38 	bl	80002b0 <__aeabi_uldivmod>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4613      	mov	r3, r2
 8002446:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800244a:	e067      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244c:	4b75      	ldr	r3, [pc, #468]	; (8002624 <HAL_RCC_GetSysClockFreq+0x354>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	2200      	movs	r2, #0
 8002454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002458:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800245c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002464:	67bb      	str	r3, [r7, #120]	; 0x78
 8002466:	2300      	movs	r3, #0
 8002468:	67fb      	str	r3, [r7, #124]	; 0x7c
 800246a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800246e:	4622      	mov	r2, r4
 8002470:	462b      	mov	r3, r5
 8002472:	f04f 0000 	mov.w	r0, #0
 8002476:	f04f 0100 	mov.w	r1, #0
 800247a:	0159      	lsls	r1, r3, #5
 800247c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002480:	0150      	lsls	r0, r2, #5
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4621      	mov	r1, r4
 8002488:	1a51      	subs	r1, r2, r1
 800248a:	62b9      	str	r1, [r7, #40]	; 0x28
 800248c:	4629      	mov	r1, r5
 800248e:	eb63 0301 	sbc.w	r3, r3, r1
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80024a0:	4649      	mov	r1, r9
 80024a2:	018b      	lsls	r3, r1, #6
 80024a4:	4641      	mov	r1, r8
 80024a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024aa:	4641      	mov	r1, r8
 80024ac:	018a      	lsls	r2, r1, #6
 80024ae:	4641      	mov	r1, r8
 80024b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80024b4:	4649      	mov	r1, r9
 80024b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ce:	4692      	mov	sl, r2
 80024d0:	469b      	mov	fp, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	eb1a 0303 	adds.w	r3, sl, r3
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	462b      	mov	r3, r5
 80024dc:	eb4b 0303 	adc.w	r3, fp, r3
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024ee:	4629      	mov	r1, r5
 80024f0:	028b      	lsls	r3, r1, #10
 80024f2:	4621      	mov	r1, r4
 80024f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f8:	4621      	mov	r1, r4
 80024fa:	028a      	lsls	r2, r1, #10
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002504:	2200      	movs	r2, #0
 8002506:	673b      	str	r3, [r7, #112]	; 0x70
 8002508:	677a      	str	r2, [r7, #116]	; 0x74
 800250a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800250e:	f7fd fecf 	bl	80002b0 <__aeabi_uldivmod>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4613      	mov	r3, r2
 8002518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800251c:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_GetSysClockFreq+0x354>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	0c1b      	lsrs	r3, r3, #16
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	3301      	adds	r3, #1
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800252e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800253e:	e0eb      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002540:	4b38      	ldr	r3, [pc, #224]	; (8002624 <HAL_RCC_GetSysClockFreq+0x354>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800254c:	4b35      	ldr	r3, [pc, #212]	; (8002624 <HAL_RCC_GetSysClockFreq+0x354>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d06b      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_RCC_GetSysClockFreq+0x354>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	2200      	movs	r2, #0
 8002560:	66bb      	str	r3, [r7, #104]	; 0x68
 8002562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256a:	663b      	str	r3, [r7, #96]	; 0x60
 800256c:	2300      	movs	r3, #0
 800256e:	667b      	str	r3, [r7, #100]	; 0x64
 8002570:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002574:	4622      	mov	r2, r4
 8002576:	462b      	mov	r3, r5
 8002578:	f04f 0000 	mov.w	r0, #0
 800257c:	f04f 0100 	mov.w	r1, #0
 8002580:	0159      	lsls	r1, r3, #5
 8002582:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002586:	0150      	lsls	r0, r2, #5
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4621      	mov	r1, r4
 800258e:	1a51      	subs	r1, r2, r1
 8002590:	61b9      	str	r1, [r7, #24]
 8002592:	4629      	mov	r1, r5
 8002594:	eb63 0301 	sbc.w	r3, r3, r1
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80025a6:	4659      	mov	r1, fp
 80025a8:	018b      	lsls	r3, r1, #6
 80025aa:	4651      	mov	r1, sl
 80025ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025b0:	4651      	mov	r1, sl
 80025b2:	018a      	lsls	r2, r1, #6
 80025b4:	4651      	mov	r1, sl
 80025b6:	ebb2 0801 	subs.w	r8, r2, r1
 80025ba:	4659      	mov	r1, fp
 80025bc:	eb63 0901 	sbc.w	r9, r3, r1
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025d4:	4690      	mov	r8, r2
 80025d6:	4699      	mov	r9, r3
 80025d8:	4623      	mov	r3, r4
 80025da:	eb18 0303 	adds.w	r3, r8, r3
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	462b      	mov	r3, r5
 80025e2:	eb49 0303 	adc.w	r3, r9, r3
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025f4:	4629      	mov	r1, r5
 80025f6:	024b      	lsls	r3, r1, #9
 80025f8:	4621      	mov	r1, r4
 80025fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025fe:	4621      	mov	r1, r4
 8002600:	024a      	lsls	r2, r1, #9
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800260a:	2200      	movs	r2, #0
 800260c:	65bb      	str	r3, [r7, #88]	; 0x58
 800260e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002610:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002614:	f7fd fe4c 	bl	80002b0 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002622:	e065      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x420>
 8002624:	40023800 	.word	0x40023800
 8002628:	00f42400 	.word	0x00f42400
 800262c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002630:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCC_GetSysClockFreq+0x458>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	099b      	lsrs	r3, r3, #6
 8002636:	2200      	movs	r2, #0
 8002638:	4618      	mov	r0, r3
 800263a:	4611      	mov	r1, r2
 800263c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002640:	653b      	str	r3, [r7, #80]	; 0x50
 8002642:	2300      	movs	r3, #0
 8002644:	657b      	str	r3, [r7, #84]	; 0x54
 8002646:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800264a:	4642      	mov	r2, r8
 800264c:	464b      	mov	r3, r9
 800264e:	f04f 0000 	mov.w	r0, #0
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	0159      	lsls	r1, r3, #5
 8002658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265c:	0150      	lsls	r0, r2, #5
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4641      	mov	r1, r8
 8002664:	1a51      	subs	r1, r2, r1
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	4649      	mov	r1, r9
 800266a:	eb63 0301 	sbc.w	r3, r3, r1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800267c:	4659      	mov	r1, fp
 800267e:	018b      	lsls	r3, r1, #6
 8002680:	4651      	mov	r1, sl
 8002682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002686:	4651      	mov	r1, sl
 8002688:	018a      	lsls	r2, r1, #6
 800268a:	4651      	mov	r1, sl
 800268c:	1a54      	subs	r4, r2, r1
 800268e:	4659      	mov	r1, fp
 8002690:	eb63 0501 	sbc.w	r5, r3, r1
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	00eb      	lsls	r3, r5, #3
 800269e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a2:	00e2      	lsls	r2, r4, #3
 80026a4:	4614      	mov	r4, r2
 80026a6:	461d      	mov	r5, r3
 80026a8:	4643      	mov	r3, r8
 80026aa:	18e3      	adds	r3, r4, r3
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	464b      	mov	r3, r9
 80026b0:	eb45 0303 	adc.w	r3, r5, r3
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026c2:	4629      	mov	r1, r5
 80026c4:	028b      	lsls	r3, r1, #10
 80026c6:	4621      	mov	r1, r4
 80026c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026cc:	4621      	mov	r1, r4
 80026ce:	028a      	lsls	r2, r1, #10
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d8:	2200      	movs	r2, #0
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48
 80026dc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80026de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026e2:	f7fd fde5 	bl	80002b0 <__aeabi_uldivmod>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4613      	mov	r3, r2
 80026ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_RCC_GetSysClockFreq+0x458>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0f1b      	lsrs	r3, r3, #28
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80026fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800270e:	e003      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002716:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800271c:	4618      	mov	r0, r3
 800271e:	37b8      	adds	r7, #184	; 0xb8
 8002720:	46bd      	mov	sp, r7
 8002722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	00f42400 	.word	0x00f42400

08002730 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e28d      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8083 	beq.w	8002856 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002750:	4b94      	ldr	r3, [pc, #592]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b04      	cmp	r3, #4
 800275a:	d019      	beq.n	8002790 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800275c:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002764:	2b08      	cmp	r3, #8
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002768:	4b8e      	ldr	r3, [pc, #568]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002774:	d00c      	beq.n	8002790 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d112      	bne.n	80027a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002782:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278e:	d10b      	bne.n	80027a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	4b84      	ldr	r3, [pc, #528]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d05b      	beq.n	8002854 <HAL_RCC_OscConfig+0x124>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d157      	bne.n	8002854 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e25a      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_OscConfig+0x90>
 80027b2:	4b7c      	ldr	r3, [pc, #496]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a7b      	ldr	r2, [pc, #492]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e01d      	b.n	80027fc <HAL_RCC_OscConfig+0xcc>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0xb4>
 80027ca:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a75      	ldr	r2, [pc, #468]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a72      	ldr	r2, [pc, #456]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0xcc>
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a6e      	ldr	r2, [pc, #440]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b6c      	ldr	r3, [pc, #432]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a6b      	ldr	r2, [pc, #428]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fc24 	bl	8001050 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7fe fc20 	bl	8001050 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e21f      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0xdc>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fc10 	bl	8001050 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7fe fc0c 	bl	8001050 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e20b      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x104>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d06f      	beq.n	8002942 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002862:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b00      	cmp	r3, #0
 800286c:	d017      	beq.n	800289e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800286e:	4b4d      	ldr	r3, [pc, #308]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002876:	2b08      	cmp	r3, #8
 8002878:	d105      	bne.n	8002886 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800287a:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d11c      	bne.n	80028cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b44      	ldr	r3, [pc, #272]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x186>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1d3      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4937      	ldr	r1, [pc, #220]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	e03a      	b.n	8002942 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d4:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_RCC_OscConfig+0x278>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe fbb9 	bl	8001050 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fe fbb5 	bl	8001050 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1b4      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4925      	ldr	r1, [pc, #148]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
 8002914:	e015      	b.n	8002942 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_OscConfig+0x278>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fb98 	bl	8001050 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe fb94 	bl	8001050 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e193      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d036      	beq.n	80029bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d016      	beq.n	8002984 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_RCC_OscConfig+0x27c>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fb78 	bl	8001050 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002964:	f7fe fb74 	bl	8001050 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e173      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x234>
 8002982:	e01b      	b.n	80029bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_OscConfig+0x27c>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298a:	f7fe fb61 	bl	8001050 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	e00e      	b.n	80029b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002992:	f7fe fb5d 	bl	8001050 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d907      	bls.n	80029b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e15c      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
 80029a4:	40023800 	.word	0x40023800
 80029a8:	42470000 	.word	0x42470000
 80029ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	4b8a      	ldr	r3, [pc, #552]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 80029b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ea      	bne.n	8002992 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8097 	beq.w	8002af8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ce:	4b83      	ldr	r3, [pc, #524]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	4b7f      	ldr	r3, [pc, #508]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a7e      	ldr	r2, [pc, #504]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b7c      	ldr	r3, [pc, #496]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	4b79      	ldr	r3, [pc, #484]	; (8002be0 <HAL_RCC_OscConfig+0x4b0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a06:	4b76      	ldr	r3, [pc, #472]	; (8002be0 <HAL_RCC_OscConfig+0x4b0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a75      	ldr	r2, [pc, #468]	; (8002be0 <HAL_RCC_OscConfig+0x4b0>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fb1d 	bl	8001050 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7fe fb19 	bl	8001050 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e118      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b6c      	ldr	r3, [pc, #432]	; (8002be0 <HAL_RCC_OscConfig+0x4b0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x31e>
 8002a40:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a65      	ldr	r2, [pc, #404]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	e01c      	b.n	8002a88 <HAL_RCC_OscConfig+0x358>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x340>
 8002a56:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a60      	ldr	r2, [pc, #384]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	4b5e      	ldr	r3, [pc, #376]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a5d      	ldr	r2, [pc, #372]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0x358>
 8002a70:	4b5a      	ldr	r3, [pc, #360]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a59      	ldr	r2, [pc, #356]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	4b57      	ldr	r3, [pc, #348]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a56      	ldr	r2, [pc, #344]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002a82:	f023 0304 	bic.w	r3, r3, #4
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe fade 	bl	8001050 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7fe fada 	bl	8001050 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e0d7      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ee      	beq.n	8002a98 <HAL_RCC_OscConfig+0x368>
 8002aba:	e014      	b.n	8002ae6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe fac8 	bl	8001050 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fac4 	bl	8001050 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0c1      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ada:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ee      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aec:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	4a3a      	ldr	r2, [pc, #232]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80ad 	beq.w	8002c5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b02:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d060      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d145      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <HAL_RCC_OscConfig+0x4b4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fa98 	bl	8001050 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fa94 	bl	8001050 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e093      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	019b      	lsls	r3, r3, #6
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	061b      	lsls	r3, r3, #24
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	071b      	lsls	r3, r3, #28
 8002b6e:	491b      	ldr	r1, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCC_OscConfig+0x4b4>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fa69 	bl	8001050 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe fa65 	bl	8001050 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e064      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x452>
 8002ba0:	e05c      	b.n	8002c5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCC_OscConfig+0x4b4>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fa52 	bl	8001050 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe fa4e 	bl	8001050 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e04d      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x480>
 8002bce:	e045      	b.n	8002c5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e040      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40007000 	.word	0x40007000
 8002be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be8:	4b1f      	ldr	r3, [pc, #124]	; (8002c68 <HAL_RCC_OscConfig+0x538>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d030      	beq.n	8002c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d129      	bne.n	8002c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d122      	bne.n	8002c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c18:	4013      	ands	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d119      	bne.n	8002c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	3b01      	subs	r3, #1
 8002c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d10f      	bne.n	8002c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e041      	b.n	8002d02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fd ff0e 	bl	8000ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f000 fa96 	bl	80031dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d001      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e04e      	b.n	8002dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d022      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d01d      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d018      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00e      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d009      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d111      	bne.n	8002db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d010      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dae:	e007      	b.n	8002dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	40010400 	.word	0x40010400
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40001800 	.word	0x40001800

08002dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d122      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d11b      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0202 	mvn.w	r2, #2
 8002e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f9b5 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f9a7 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f9b8 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d122      	bne.n	8002e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d11b      	bne.n	8002e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0204 	mvn.w	r2, #4
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f98b 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f97d 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f98e 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d122      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0208 	mvn.w	r2, #8
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f961 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f953 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f964 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d122      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d11b      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0210 	mvn.w	r2, #16
 8002f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f937 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f929 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f93a 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10e      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0201 	mvn.w	r2, #1
 8002f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fd52 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b80      	cmp	r3, #128	; 0x80
 8002f7c:	d10e      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f88:	2b80      	cmp	r3, #128	; 0x80
 8002f8a:	d107      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fae0 	bl	800355c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d107      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f8ff 	bl	80031c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d107      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0220 	mvn.w	r2, #32
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 faaa 	bl	8003548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIM_ConfigClockSource+0x1c>
 8003014:	2302      	movs	r3, #2
 8003016:	e0b4      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x186>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003050:	d03e      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003056:	f200 8087 	bhi.w	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	f000 8086 	beq.w	800316e <HAL_TIM_ConfigClockSource+0x172>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003066:	d87f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b70      	cmp	r3, #112	; 0x70
 800306a:	d01a      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0xa6>
 800306c:	2b70      	cmp	r3, #112	; 0x70
 800306e:	d87b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b60      	cmp	r3, #96	; 0x60
 8003072:	d050      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x11a>
 8003074:	2b60      	cmp	r3, #96	; 0x60
 8003076:	d877      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b50      	cmp	r3, #80	; 0x50
 800307a:	d03c      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0xfa>
 800307c:	2b50      	cmp	r3, #80	; 0x50
 800307e:	d873      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d058      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x13a>
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d86f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b30      	cmp	r3, #48	; 0x30
 800308a:	d064      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 800308c:	2b30      	cmp	r3, #48	; 0x30
 800308e:	d86b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d060      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 8003094:	2b20      	cmp	r3, #32
 8003096:	d867      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d05c      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	2b10      	cmp	r3, #16
 800309e:	d05a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 80030a0:	e062      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f000 f9ad 	bl	8003410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	609a      	str	r2, [r3, #8]
      break;
 80030ce:	e04f      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6899      	ldr	r1, [r3, #8]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f000 f996 	bl	8003410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f2:	609a      	str	r2, [r3, #8]
      break;
 80030f4:	e03c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	461a      	mov	r2, r3
 8003104:	f000 f90a 	bl	800331c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2150      	movs	r1, #80	; 0x50
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f963 	bl	80033da <TIM_ITRx_SetConfig>
      break;
 8003114:	e02c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	461a      	mov	r2, r3
 8003124:	f000 f929 	bl	800337a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2160      	movs	r1, #96	; 0x60
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f953 	bl	80033da <TIM_ITRx_SetConfig>
      break;
 8003134:	e01c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	461a      	mov	r2, r3
 8003144:	f000 f8ea 	bl	800331c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2140      	movs	r1, #64	; 0x40
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f943 	bl	80033da <TIM_ITRx_SetConfig>
      break;
 8003154:	e00c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f000 f93a 	bl	80033da <TIM_ITRx_SetConfig>
      break;
 8003166:	e003      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e000      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800316e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <TIM_Base_SetConfig+0x114>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d00f      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a3d      	ldr	r2, [pc, #244]	; (80032f4 <TIM_Base_SetConfig+0x118>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <TIM_Base_SetConfig+0x11c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3b      	ldr	r2, [pc, #236]	; (80032fc <TIM_Base_SetConfig+0x120>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3a      	ldr	r2, [pc, #232]	; (8003300 <TIM_Base_SetConfig+0x124>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d108      	bne.n	800322e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <TIM_Base_SetConfig+0x114>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d02b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323c:	d027      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2c      	ldr	r2, [pc, #176]	; (80032f4 <TIM_Base_SetConfig+0x118>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d023      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <TIM_Base_SetConfig+0x11c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01f      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <TIM_Base_SetConfig+0x120>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a29      	ldr	r2, [pc, #164]	; (8003300 <TIM_Base_SetConfig+0x124>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d017      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a28      	ldr	r2, [pc, #160]	; (8003304 <TIM_Base_SetConfig+0x128>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a27      	ldr	r2, [pc, #156]	; (8003308 <TIM_Base_SetConfig+0x12c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00f      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a26      	ldr	r2, [pc, #152]	; (800330c <TIM_Base_SetConfig+0x130>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <TIM_Base_SetConfig+0x134>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a24      	ldr	r2, [pc, #144]	; (8003314 <TIM_Base_SetConfig+0x138>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <TIM_Base_SetConfig+0x13c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d108      	bne.n	80032a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <TIM_Base_SetConfig+0x114>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d003      	beq.n	80032d4 <TIM_Base_SetConfig+0xf8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <TIM_Base_SetConfig+0x124>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d103      	bne.n	80032dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	615a      	str	r2, [r3, #20]
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00
 8003300:	40010400 	.word	0x40010400
 8003304:	40014000 	.word	0x40014000
 8003308:	40014400 	.word	0x40014400
 800330c:	40014800 	.word	0x40014800
 8003310:	40001800 	.word	0x40001800
 8003314:	40001c00 	.word	0x40001c00
 8003318:	40002000 	.word	0x40002000

0800331c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f023 0201 	bic.w	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f023 030a 	bic.w	r3, r3, #10
 8003358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800337a:	b480      	push	{r7}
 800337c:	b087      	sub	sp, #28
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f023 0210 	bic.w	r2, r3, #16
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	031b      	lsls	r3, r3, #12
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	621a      	str	r2, [r3, #32]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033da:	b480      	push	{r7}
 80033dc:	b085      	sub	sp, #20
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f043 0307 	orr.w	r3, r3, #7
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	609a      	str	r2, [r3, #8]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800342a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	021a      	lsls	r2, r3, #8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	431a      	orrs	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4313      	orrs	r3, r2
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	609a      	str	r2, [r3, #8]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003464:	2302      	movs	r3, #2
 8003466:	e05a      	b.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a21      	ldr	r2, [pc, #132]	; (800352c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d01d      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10c      	bne.n	800350c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4313      	orrs	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40010400 	.word	0x40010400
 8003540:	40014000 	.word	0x40014000
 8003544:	40001800 	.word	0x40001800

08003548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e03f      	b.n	8003602 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fab2 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fe43 	bl	8004240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b08a      	sub	sp, #40	; 0x28
 800360e:	af02      	add	r7, sp, #8
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b20      	cmp	r3, #32
 8003628:	d17c      	bne.n	8003724 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_UART_Transmit+0x2c>
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e075      	b.n	8003726 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_UART_Transmit+0x3e>
 8003644:	2302      	movs	r3, #2
 8003646:	e06e      	b.n	8003726 <HAL_UART_Transmit+0x11c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2221      	movs	r2, #33	; 0x21
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800365e:	f7fd fcf7 	bl	8001050 <HAL_GetTick>
 8003662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	88fa      	ldrh	r2, [r7, #6]
 8003668:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	88fa      	ldrh	r2, [r7, #6]
 800366e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003678:	d108      	bne.n	800368c <HAL_UART_Transmit+0x82>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	e003      	b.n	8003694 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800369c:	e02a      	b.n	80036f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fb83 	bl	8003db4 <UART_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e036      	b.n	8003726 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	3302      	adds	r3, #2
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	e007      	b.n	80036e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3301      	adds	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1cf      	bne.n	800369e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2200      	movs	r2, #0
 8003706:	2140      	movs	r1, #64	; 0x40
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fb53 	bl	8003db4 <UART_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e006      	b.n	8003726 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	4613      	mov	r3, r2
 800373a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	d130      	bne.n	80037aa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_UART_Transmit_IT+0x26>
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e029      	b.n	80037ac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_UART_Transmit_IT+0x38>
 8003762:	2302      	movs	r3, #2
 8003764:	e022      	b.n	80037ac <HAL_UART_Transmit_IT+0x7e>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2221      	movs	r2, #33	; 0x21
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e000      	b.n	80037ac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80037aa:	2302      	movs	r3, #2
  }
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	; 0x30
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	4613      	mov	r3, r2
 80037c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d152      	bne.n	8003878 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e04b      	b.n	800387a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e044      	b.n	800387a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	461a      	mov	r2, r3
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fb43 	bl	8003e90 <UART_Start_Receive_IT>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003814:	2b00      	cmp	r3, #0
 8003816:	d12c      	bne.n	8003872 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	2b01      	cmp	r3, #1
 800381e:	d125      	bne.n	800386c <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	617b      	str	r3, [r7, #20]
   return(result);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f043 0310 	orr.w	r3, r3, #16
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003856:	627a      	str	r2, [r7, #36]	; 0x24
 8003858:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6a39      	ldr	r1, [r7, #32]
 800385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	61fb      	str	r3, [r7, #28]
   return(result);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800386a:	e002      	b.n	8003872 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003876:	e000      	b.n	800387a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3730      	adds	r7, #48	; 0x30
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b0ba      	sub	sp, #232	; 0xe8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_UART_IRQHandler+0x66>
 80038d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fbf1 	bl	80040ca <UART_Receive_IT>
      return;
 80038e8:	e256      	b.n	8003d98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80de 	beq.w	8003ab0 <HAL_UART_IRQHandler+0x22c>
 80038f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d106      	bne.n	800390e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003904:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80d1 	beq.w	8003ab0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800390e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_UART_IRQHandler+0xae>
 800391a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <HAL_UART_IRQHandler+0xd2>
 800393e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 0202 	orr.w	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_UART_IRQHandler+0xf6>
 8003962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d011      	beq.n	80039aa <HAL_UART_IRQHandler+0x126>
 8003986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d105      	bne.n	800399e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f043 0208 	orr.w	r2, r3, #8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 81ed 	beq.w	8003d8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_UART_IRQHandler+0x14e>
 80039c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fb7c 	bl	80040ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <HAL_UART_IRQHandler+0x17a>
 80039f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d04f      	beq.n	8003a9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa84 	bl	8003f0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d141      	bne.n	8003a96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3314      	adds	r3, #20
 8003a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3314      	adds	r3, #20
 8003a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1d9      	bne.n	8003a12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d013      	beq.n	8003a8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	4a7d      	ldr	r2, [pc, #500]	; (8003c60 <HAL_UART_IRQHandler+0x3dc>)
 8003a6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fc6e 	bl	8001354 <HAL_DMA_Abort_IT>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d016      	beq.n	8003aac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e00e      	b.n	8003aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f003 fbd8 	bl	8007244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e00a      	b.n	8003aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f003 fbd4 	bl	8007244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e006      	b.n	8003aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f003 fbd0 	bl	8007244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003aaa:	e170      	b.n	8003d8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	bf00      	nop
    return;
 8003aae:	e16e      	b.n	8003d8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	f040 814a 	bne.w	8003d4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8143 	beq.w	8003d4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 813c 	beq.w	8003d4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	f040 80b4 	bne.w	8003c64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8140 	beq.w	8003d92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	f080 8139 	bcs.w	8003d92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b32:	f000 8088 	beq.w	8003c46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1d9      	bne.n	8003b36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3314      	adds	r3, #20
 8003b88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ba6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003baa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e1      	bne.n	8003b82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003be2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003be4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003be8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e3      	bne.n	8003bbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c16:	f023 0310 	bic.w	r3, r3, #16
 8003c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c28:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e3      	bne.n	8003c04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fd fb17 	bl	8001274 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f003 faff 	bl	800725a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c5c:	e099      	b.n	8003d92 <HAL_UART_IRQHandler+0x50e>
 8003c5e:	bf00      	nop
 8003c60:	08003fd3 	.word	0x08003fd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 808b 	beq.w	8003d96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8086 	beq.w	8003d96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cae:	647a      	str	r2, [r7, #68]	; 0x44
 8003cb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e3      	bne.n	8003c8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3314      	adds	r3, #20
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ce6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e3      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0310 	bic.w	r3, r3, #16
 8003d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d2c:	61fa      	str	r2, [r7, #28]
 8003d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	69b9      	ldr	r1, [r7, #24]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	617b      	str	r3, [r7, #20]
   return(result);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e3      	bne.n	8003d08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d44:	4619      	mov	r1, r3
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f003 fa87 	bl	800725a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d4c:	e023      	b.n	8003d96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_UART_IRQHandler+0x4ea>
 8003d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f947 	bl	8003ffa <UART_Transmit_IT>
    return;
 8003d6c:	e014      	b.n	8003d98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00e      	beq.n	8003d98 <HAL_UART_IRQHandler+0x514>
 8003d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f987 	bl	800409a <UART_EndTransmit_IT>
    return;
 8003d8c:	e004      	b.n	8003d98 <HAL_UART_IRQHandler+0x514>
    return;
 8003d8e:	bf00      	nop
 8003d90:	e002      	b.n	8003d98 <HAL_UART_IRQHandler+0x514>
      return;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <HAL_UART_IRQHandler+0x514>
      return;
 8003d96:	bf00      	nop
  }
}
 8003d98:	37e8      	adds	r7, #232	; 0xe8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop

08003da0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b090      	sub	sp, #64	; 0x40
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc4:	e050      	b.n	8003e68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d04c      	beq.n	8003e68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dd4:	f7fd f93c 	bl	8001050 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d241      	bcs.n	8003e68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e04:	637a      	str	r2, [r7, #52]	; 0x34
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e5      	bne.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	613b      	str	r3, [r7, #16]
   return(result);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3314      	adds	r3, #20
 8003e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e38:	623a      	str	r2, [r7, #32]
 8003e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	69f9      	ldr	r1, [r7, #28]
 8003e3e:	6a3a      	ldr	r2, [r7, #32]
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e5      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e00f      	b.n	8003e88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4013      	ands	r3, r2
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	bf0c      	ite	eq
 8003e78:	2301      	moveq	r3, #1
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d09f      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3740      	adds	r7, #64	; 0x40
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2222      	movs	r2, #34	; 0x22
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003edc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0220 	orr.w	r2, r2, #32
 8003efc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b095      	sub	sp, #84	; 0x54
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f34:	643a      	str	r2, [r7, #64]	; 0x40
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e5      	bne.n	8003f14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3314      	adds	r3, #20
 8003f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e5      	bne.n	8003f48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d119      	bne.n	8003fb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f023 0310 	bic.w	r3, r3, #16
 8003f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa4:	61ba      	str	r2, [r7, #24]
 8003fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fc6:	bf00      	nop
 8003fc8:	3754      	adds	r7, #84	; 0x54
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f003 f929 	bl	8007244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b21      	cmp	r3, #33	; 0x21
 800400c:	d13e      	bne.n	800408c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	d114      	bne.n	8004042 <UART_Transmit_IT+0x48>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d110      	bne.n	8004042 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004034:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	1c9a      	adds	r2, r3, #2
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	621a      	str	r2, [r3, #32]
 8004040:	e008      	b.n	8004054 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	1c59      	adds	r1, r3, #1
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6211      	str	r1, [r2, #32]
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29b      	uxth	r3, r3
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4619      	mov	r1, r3
 8004062:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10f      	bne.n	8004088 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004076:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004086:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f003 f8dc 	bl	8007278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08c      	sub	sp, #48	; 0x30
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b22      	cmp	r3, #34	; 0x22
 80040dc:	f040 80ab 	bne.w	8004236 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e8:	d117      	bne.n	800411a <UART_Receive_IT+0x50>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d113      	bne.n	800411a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004108:	b29a      	uxth	r2, r3
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	1c9a      	adds	r2, r3, #2
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
 8004118:	e026      	b.n	8004168 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d007      	beq.n	800413e <UART_Receive_IT+0x74>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <UART_Receive_IT+0x82>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e008      	b.n	800415e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004158:	b2da      	uxtb	r2, r3
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29b      	uxth	r3, r3
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4619      	mov	r1, r3
 8004176:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004178:	2b00      	cmp	r3, #0
 800417a:	d15a      	bne.n	8004232 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0220 	bic.w	r2, r2, #32
 800418a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800419a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d135      	bne.n	8004228 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	613b      	str	r3, [r7, #16]
   return(result);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f023 0310 	bic.w	r3, r3, #16
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	623a      	str	r2, [r7, #32]
 80041e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	69f9      	ldr	r1, [r7, #28]
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e5      	bne.n	80041c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b10      	cmp	r3, #16
 8004202:	d10a      	bne.n	800421a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f003 f81a 	bl	800725a <HAL_UARTEx_RxEventCallback>
 8004226:	e002      	b.n	800422e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff fdb9 	bl	8003da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e002      	b.n	8004238 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3730      	adds	r7, #48	; 0x30
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004244:	b0c0      	sub	sp, #256	; 0x100
 8004246:	af00      	add	r7, sp, #0
 8004248:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	68d9      	ldr	r1, [r3, #12]
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	ea40 0301 	orr.w	r3, r0, r1
 8004268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	431a      	orrs	r2, r3
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	431a      	orrs	r2, r3
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004298:	f021 010c 	bic.w	r1, r1, #12
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042a6:	430b      	orrs	r3, r1
 80042a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ba:	6999      	ldr	r1, [r3, #24]
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	ea40 0301 	orr.w	r3, r0, r1
 80042c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b8f      	ldr	r3, [pc, #572]	; (800450c <UART_SetConfig+0x2cc>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d005      	beq.n	80042e0 <UART_SetConfig+0xa0>
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b8d      	ldr	r3, [pc, #564]	; (8004510 <UART_SetConfig+0x2d0>)
 80042dc:	429a      	cmp	r2, r3
 80042de:	d104      	bne.n	80042ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7fd fc86 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 80042e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042e8:	e003      	b.n	80042f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ea:	f7fd fc6d 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 80042ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fc:	f040 810c 	bne.w	8004518 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004304:	2200      	movs	r2, #0
 8004306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800430a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800430e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004312:	4622      	mov	r2, r4
 8004314:	462b      	mov	r3, r5
 8004316:	1891      	adds	r1, r2, r2
 8004318:	65b9      	str	r1, [r7, #88]	; 0x58
 800431a:	415b      	adcs	r3, r3
 800431c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800431e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004322:	4621      	mov	r1, r4
 8004324:	eb12 0801 	adds.w	r8, r2, r1
 8004328:	4629      	mov	r1, r5
 800432a:	eb43 0901 	adc.w	r9, r3, r1
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800433a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004342:	4690      	mov	r8, r2
 8004344:	4699      	mov	r9, r3
 8004346:	4623      	mov	r3, r4
 8004348:	eb18 0303 	adds.w	r3, r8, r3
 800434c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004350:	462b      	mov	r3, r5
 8004352:	eb49 0303 	adc.w	r3, r9, r3
 8004356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004366:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800436a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800436e:	460b      	mov	r3, r1
 8004370:	18db      	adds	r3, r3, r3
 8004372:	653b      	str	r3, [r7, #80]	; 0x50
 8004374:	4613      	mov	r3, r2
 8004376:	eb42 0303 	adc.w	r3, r2, r3
 800437a:	657b      	str	r3, [r7, #84]	; 0x54
 800437c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004380:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004384:	f7fb ff94 	bl	80002b0 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4b61      	ldr	r3, [pc, #388]	; (8004514 <UART_SetConfig+0x2d4>)
 800438e:	fba3 2302 	umull	r2, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	011c      	lsls	r4, r3, #4
 8004396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80043b0:	415b      	adcs	r3, r3
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043b8:	4641      	mov	r1, r8
 80043ba:	eb12 0a01 	adds.w	sl, r2, r1
 80043be:	4649      	mov	r1, r9
 80043c0:	eb43 0b01 	adc.w	fp, r3, r1
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d8:	4692      	mov	sl, r2
 80043da:	469b      	mov	fp, r3
 80043dc:	4643      	mov	r3, r8
 80043de:	eb1a 0303 	adds.w	r3, sl, r3
 80043e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043e6:	464b      	mov	r3, r9
 80043e8:	eb4b 0303 	adc.w	r3, fp, r3
 80043ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004400:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004404:	460b      	mov	r3, r1
 8004406:	18db      	adds	r3, r3, r3
 8004408:	643b      	str	r3, [r7, #64]	; 0x40
 800440a:	4613      	mov	r3, r2
 800440c:	eb42 0303 	adc.w	r3, r2, r3
 8004410:	647b      	str	r3, [r7, #68]	; 0x44
 8004412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004416:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800441a:	f7fb ff49 	bl	80002b0 <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4611      	mov	r1, r2
 8004424:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <UART_SetConfig+0x2d4>)
 8004426:	fba3 2301 	umull	r2, r3, r3, r1
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2264      	movs	r2, #100	; 0x64
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	1acb      	subs	r3, r1, r3
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800443a:	4b36      	ldr	r3, [pc, #216]	; (8004514 <UART_SetConfig+0x2d4>)
 800443c:	fba3 2302 	umull	r2, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004448:	441c      	add	r4, r3
 800444a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004454:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004458:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	63b9      	str	r1, [r7, #56]	; 0x38
 8004464:	415b      	adcs	r3, r3
 8004466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800446c:	4641      	mov	r1, r8
 800446e:	1851      	adds	r1, r2, r1
 8004470:	6339      	str	r1, [r7, #48]	; 0x30
 8004472:	4649      	mov	r1, r9
 8004474:	414b      	adcs	r3, r1
 8004476:	637b      	str	r3, [r7, #52]	; 0x34
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004484:	4659      	mov	r1, fp
 8004486:	00cb      	lsls	r3, r1, #3
 8004488:	4651      	mov	r1, sl
 800448a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448e:	4651      	mov	r1, sl
 8004490:	00ca      	lsls	r2, r1, #3
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	4603      	mov	r3, r0
 8004498:	4642      	mov	r2, r8
 800449a:	189b      	adds	r3, r3, r2
 800449c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044a0:	464b      	mov	r3, r9
 80044a2:	460a      	mov	r2, r1
 80044a4:	eb42 0303 	adc.w	r3, r2, r3
 80044a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044c0:	460b      	mov	r3, r1
 80044c2:	18db      	adds	r3, r3, r3
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c6:	4613      	mov	r3, r2
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044d6:	f7fb feeb 	bl	80002b0 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <UART_SetConfig+0x2d4>)
 80044e0:	fba3 1302 	umull	r1, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	2164      	movs	r1, #100	; 0x64
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	3332      	adds	r3, #50	; 0x32
 80044f2:	4a08      	ldr	r2, [pc, #32]	; (8004514 <UART_SetConfig+0x2d4>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	f003 0207 	and.w	r2, r3, #7
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4422      	add	r2, r4
 8004506:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004508:	e105      	b.n	8004716 <UART_SetConfig+0x4d6>
 800450a:	bf00      	nop
 800450c:	40011000 	.word	0x40011000
 8004510:	40011400 	.word	0x40011400
 8004514:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451c:	2200      	movs	r2, #0
 800451e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004522:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004526:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800452a:	4642      	mov	r2, r8
 800452c:	464b      	mov	r3, r9
 800452e:	1891      	adds	r1, r2, r2
 8004530:	6239      	str	r1, [r7, #32]
 8004532:	415b      	adcs	r3, r3
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800453a:	4641      	mov	r1, r8
 800453c:	1854      	adds	r4, r2, r1
 800453e:	4649      	mov	r1, r9
 8004540:	eb43 0501 	adc.w	r5, r3, r1
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	00eb      	lsls	r3, r5, #3
 800454e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004552:	00e2      	lsls	r2, r4, #3
 8004554:	4614      	mov	r4, r2
 8004556:	461d      	mov	r5, r3
 8004558:	4643      	mov	r3, r8
 800455a:	18e3      	adds	r3, r4, r3
 800455c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004560:	464b      	mov	r3, r9
 8004562:	eb45 0303 	adc.w	r3, r5, r3
 8004566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004576:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004586:	4629      	mov	r1, r5
 8004588:	008b      	lsls	r3, r1, #2
 800458a:	4621      	mov	r1, r4
 800458c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004590:	4621      	mov	r1, r4
 8004592:	008a      	lsls	r2, r1, #2
 8004594:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004598:	f7fb fe8a 	bl	80002b0 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4b60      	ldr	r3, [pc, #384]	; (8004724 <UART_SetConfig+0x4e4>)
 80045a2:	fba3 2302 	umull	r2, r3, r3, r2
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	011c      	lsls	r4, r3, #4
 80045aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	1891      	adds	r1, r2, r2
 80045c2:	61b9      	str	r1, [r7, #24]
 80045c4:	415b      	adcs	r3, r3
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045cc:	4641      	mov	r1, r8
 80045ce:	1851      	adds	r1, r2, r1
 80045d0:	6139      	str	r1, [r7, #16]
 80045d2:	4649      	mov	r1, r9
 80045d4:	414b      	adcs	r3, r1
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045e4:	4659      	mov	r1, fp
 80045e6:	00cb      	lsls	r3, r1, #3
 80045e8:	4651      	mov	r1, sl
 80045ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ee:	4651      	mov	r1, sl
 80045f0:	00ca      	lsls	r2, r1, #3
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	4642      	mov	r2, r8
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004600:	464b      	mov	r3, r9
 8004602:	460a      	mov	r2, r1
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	67bb      	str	r3, [r7, #120]	; 0x78
 8004616:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004624:	4649      	mov	r1, r9
 8004626:	008b      	lsls	r3, r1, #2
 8004628:	4641      	mov	r1, r8
 800462a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462e:	4641      	mov	r1, r8
 8004630:	008a      	lsls	r2, r1, #2
 8004632:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004636:	f7fb fe3b 	bl	80002b0 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4b39      	ldr	r3, [pc, #228]	; (8004724 <UART_SetConfig+0x4e4>)
 8004640:	fba3 1302 	umull	r1, r3, r3, r2
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	2164      	movs	r1, #100	; 0x64
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	3332      	adds	r3, #50	; 0x32
 8004652:	4a34      	ldr	r2, [pc, #208]	; (8004724 <UART_SetConfig+0x4e4>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800465e:	441c      	add	r4, r3
 8004660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004664:	2200      	movs	r2, #0
 8004666:	673b      	str	r3, [r7, #112]	; 0x70
 8004668:	677a      	str	r2, [r7, #116]	; 0x74
 800466a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800466e:	4642      	mov	r2, r8
 8004670:	464b      	mov	r3, r9
 8004672:	1891      	adds	r1, r2, r2
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	415b      	adcs	r3, r3
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800467e:	4641      	mov	r1, r8
 8004680:	1851      	adds	r1, r2, r1
 8004682:	6039      	str	r1, [r7, #0]
 8004684:	4649      	mov	r1, r9
 8004686:	414b      	adcs	r3, r1
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004696:	4659      	mov	r1, fp
 8004698:	00cb      	lsls	r3, r1, #3
 800469a:	4651      	mov	r1, sl
 800469c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a0:	4651      	mov	r1, sl
 80046a2:	00ca      	lsls	r2, r1, #3
 80046a4:	4610      	mov	r0, r2
 80046a6:	4619      	mov	r1, r3
 80046a8:	4603      	mov	r3, r0
 80046aa:	4642      	mov	r2, r8
 80046ac:	189b      	adds	r3, r3, r2
 80046ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80046b0:	464b      	mov	r3, r9
 80046b2:	460a      	mov	r2, r1
 80046b4:	eb42 0303 	adc.w	r3, r2, r3
 80046b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	663b      	str	r3, [r7, #96]	; 0x60
 80046c4:	667a      	str	r2, [r7, #100]	; 0x64
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046d2:	4649      	mov	r1, r9
 80046d4:	008b      	lsls	r3, r1, #2
 80046d6:	4641      	mov	r1, r8
 80046d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046dc:	4641      	mov	r1, r8
 80046de:	008a      	lsls	r2, r1, #2
 80046e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046e4:	f7fb fde4 	bl	80002b0 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <UART_SetConfig+0x4e4>)
 80046ee:	fba3 1302 	umull	r1, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2164      	movs	r1, #100	; 0x64
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	3332      	adds	r3, #50	; 0x32
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <UART_SetConfig+0x4e4>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4422      	add	r2, r4
 8004714:	609a      	str	r2, [r3, #8]
}
 8004716:	bf00      	nop
 8004718:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800471c:	46bd      	mov	sp, r7
 800471e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004722:	bf00      	nop
 8004724:	51eb851f 	.word	0x51eb851f

08004728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004728:	b084      	sub	sp, #16
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	f107 001c 	add.w	r0, r7, #28
 8004736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	2b01      	cmp	r3, #1
 800473e:	d122      	bne.n	8004786 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d105      	bne.n	800477a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fa9c 	bl	8004cb8 <USB_CoreReset>
 8004780:	4603      	mov	r3, r0
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	e01a      	b.n	80047bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa90 	bl	8004cb8 <USB_CoreReset>
 8004798:	4603      	mov	r3, r0
 800479a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800479c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
 80047ae:	e005      	b.n	80047bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d10b      	bne.n	80047da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f043 0206 	orr.w	r2, r3, #6
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047e6:	b004      	add	sp, #16
 80047e8:	4770      	bx	lr

080047ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d115      	bne.n	800485a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800483a:	2001      	movs	r0, #1
 800483c:	f7fc fc14 	bl	8001068 <HAL_Delay>
      ms++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa28 	bl	8004c9c <USB_GetMode>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d01e      	beq.n	8004890 <USB_SetCurrentMode+0x84>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b31      	cmp	r3, #49	; 0x31
 8004856:	d9f0      	bls.n	800483a <USB_SetCurrentMode+0x2e>
 8004858:	e01a      	b.n	8004890 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d115      	bne.n	800488c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800486c:	2001      	movs	r0, #1
 800486e:	f7fc fbfb 	bl	8001068 <HAL_Delay>
      ms++;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3301      	adds	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fa0f 	bl	8004c9c <USB_GetMode>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <USB_SetCurrentMode+0x84>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b31      	cmp	r3, #49	; 0x31
 8004888:	d9f0      	bls.n	800486c <USB_SetCurrentMode+0x60>
 800488a:	e001      	b.n	8004890 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e005      	b.n	800489c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b32      	cmp	r3, #50	; 0x32
 8004894:	d101      	bne.n	800489a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048a4:	b084      	sub	sp, #16
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b086      	sub	sp, #24
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e009      	b.n	80048d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3340      	adds	r3, #64	; 0x40
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	2200      	movs	r2, #0
 80048d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	3301      	adds	r3, #1
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b0e      	cmp	r3, #14
 80048dc:	d9f2      	bls.n	80048c4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d11c      	bne.n	800491e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f2:	f043 0302 	orr.w	r3, r3, #2
 80048f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	e005      	b.n	800492a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004930:	461a      	mov	r2, r3
 8004932:	2300      	movs	r3, #0
 8004934:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493c:	4619      	mov	r1, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004944:	461a      	mov	r2, r3
 8004946:	680b      	ldr	r3, [r1, #0]
 8004948:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10c      	bne.n	800496a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d104      	bne.n	8004960 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004956:	2100      	movs	r1, #0
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f965 	bl	8004c28 <USB_SetDevSpeed>
 800495e:	e008      	b.n	8004972 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004960:	2101      	movs	r1, #1
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f960 	bl	8004c28 <USB_SetDevSpeed>
 8004968:	e003      	b.n	8004972 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800496a:	2103      	movs	r1, #3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f95b 	bl	8004c28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004972:	2110      	movs	r1, #16
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f8f3 	bl	8004b60 <USB_FlushTxFifo>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f91f 	bl	8004bc8 <USB_FlushRxFifo>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	461a      	mov	r2, r3
 800499c:	2300      	movs	r3, #0
 800499e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a6:	461a      	mov	r2, r3
 80049a8:	2300      	movs	r3, #0
 80049aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b2:	461a      	mov	r2, r3
 80049b4:	2300      	movs	r3, #0
 80049b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	e043      	b.n	8004a46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049d4:	d118      	bne.n	8004a08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	461a      	mov	r2, r3
 80049ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	e013      	b.n	8004a1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fe:	461a      	mov	r2, r3
 8004a00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e008      	b.n	8004a1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	461a      	mov	r2, r3
 8004a16:	2300      	movs	r3, #0
 8004a18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	461a      	mov	r2, r3
 8004a28:	2300      	movs	r3, #0
 8004a2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	3301      	adds	r3, #1
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d3b7      	bcc.n	80049be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	e043      	b.n	8004adc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a6a:	d118      	bne.n	8004a9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e013      	b.n	8004ab0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	461a      	mov	r2, r3
 8004a96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e008      	b.n	8004ab0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abc:	461a      	mov	r2, r3
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ad4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d3b7      	bcc.n	8004a54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d105      	bne.n	8004b18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f043 0210 	orr.w	r2, r3, #16
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699a      	ldr	r2, [r3, #24]
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <USB_DevInit+0x2b8>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f043 0208 	orr.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d107      	bne.n	8004b4c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b44:	f043 0304 	orr.w	r3, r3, #4
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b58:	b004      	add	sp, #16
 8004b5a:	4770      	bx	lr
 8004b5c:	803c3800 	.word	0x803c3800

08004b60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <USB_FlushTxFifo+0x64>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e01b      	b.n	8004bb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	daf2      	bge.n	8004b6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	019b      	lsls	r3, r3, #6
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <USB_FlushTxFifo+0x64>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e006      	b.n	8004bb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d0f0      	beq.n	8004b98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	00030d40 	.word	0x00030d40

08004bc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4a11      	ldr	r2, [pc, #68]	; (8004c24 <USB_FlushRxFifo+0x5c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e018      	b.n	8004c18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	daf2      	bge.n	8004bd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <USB_FlushRxFifo+0x5c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e006      	b.n	8004c18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d0f0      	beq.n	8004bf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	00030d40 	.word	0x00030d40

08004c28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c74:	f023 0303 	bic.w	r3, r3, #3
 8004c78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c88:	f043 0302 	orr.w	r3, r3, #2
 8004c8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <USB_CoreReset+0x64>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e01b      	b.n	8004d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	daf2      	bge.n	8004cc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f043 0201 	orr.w	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <USB_CoreReset+0x64>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e006      	b.n	8004d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d0f0      	beq.n	8004cee <USB_CoreReset+0x36>

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	00030d40 	.word	0x00030d40

08004d20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d32:	2b84      	cmp	r3, #132	; 0x84
 8004d34:	d005      	beq.n	8004d42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004d36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3303      	adds	r3, #3
 8004d40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d54:	f000 fee6 	bl	8005b24 <vTaskStartScheduler>
  
  return osOK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d60:	b089      	sub	sp, #36	; 0x24
 8004d62:	af04      	add	r7, sp, #16
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d020      	beq.n	8004db2 <osThreadCreate+0x54>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01c      	beq.n	8004db2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685c      	ldr	r4, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681d      	ldr	r5, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691e      	ldr	r6, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff ffc8 	bl	8004d20 <makeFreeRtosPriority>
 8004d90:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d9a:	9202      	str	r2, [sp, #8]
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	9100      	str	r1, [sp, #0]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	4632      	mov	r2, r6
 8004da4:	4629      	mov	r1, r5
 8004da6:	4620      	mov	r0, r4
 8004da8:	f000 fccc 	bl	8005744 <xTaskCreateStatic>
 8004dac:	4603      	mov	r3, r0
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e01c      	b.n	8004dec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685c      	ldr	r4, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dbe:	b29e      	uxth	r6, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff ffaa 	bl	8004d20 <makeFreeRtosPriority>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f107 030c 	add.w	r3, r7, #12
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	9200      	str	r2, [sp, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f000 fd0e 	bl	80057fe <xTaskCreate>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d001      	beq.n	8004dec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004dec:	68fb      	ldr	r3, [r7, #12]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004df6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <osDelay+0x16>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	e000      	b.n	8004e0e <osDelay+0x18>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fe54 	bl	8005abc <vTaskDelay>
  
  return osOK;
 8004e14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f103 0208 	add.w	r2, r3, #8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f04f 32ff 	mov.w	r2, #4294967295
 8004e36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f103 0208 	add.w	r2, r3, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f103 0208 	add.w	r2, r3, #8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed6:	d103      	bne.n	8004ee0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	e00c      	b.n	8004efa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	e002      	b.n	8004eee <vListInsert+0x2e>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d2f6      	bcs.n	8004ee8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6892      	ldr	r2, [r2, #8]
 8004f48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6852      	ldr	r2, [r2, #4]
 8004f52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d103      	bne.n	8004f66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	1e5a      	subs	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fb2:	f001 fc1f 	bl	80067f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	68f9      	ldr	r1, [r7, #12]
 8004fc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fc2:	fb01 f303 	mul.w	r3, r1, r3
 8004fc6:	441a      	add	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	68f9      	ldr	r1, [r7, #12]
 8004fe6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fe8:	fb01 f303 	mul.w	r3, r1, r3
 8004fec:	441a      	add	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	22ff      	movs	r2, #255	; 0xff
 8004ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	22ff      	movs	r2, #255	; 0xff
 8004ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d114      	bne.n	8005032 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01a      	beq.n	8005046 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3310      	adds	r3, #16
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fff5 	bl	8006004 <xTaskRemoveFromEventList>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d012      	beq.n	8005046 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005020:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <xQueueGenericReset+0xcc>)
 8005022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	e009      	b.n	8005046 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3310      	adds	r3, #16
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fef1 	bl	8004e1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3324      	adds	r3, #36	; 0x24
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff feec 	bl	8004e1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005046:	f001 fc05 	bl	8006854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800504a:	2301      	movs	r3, #1
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	e000ed04 	.word	0xe000ed04

08005058 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <xQueueGenericCreate+0x2a>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	613b      	str	r3, [r7, #16]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	3350      	adds	r3, #80	; 0x50
 8005090:	4618      	mov	r0, r3
 8005092:	f001 fc91 	bl	80069b8 <pvPortMalloc>
 8005096:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d011      	beq.n	80050c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	3350      	adds	r3, #80	; 0x50
 80050a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050b0:	79fa      	ldrb	r2, [r7, #7]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	4613      	mov	r3, r2
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f805 	bl	80050cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050c2:	69bb      	ldr	r3, [r7, #24]
	}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d103      	bne.n	80050e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e002      	b.n	80050ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050fa:	2101      	movs	r1, #1
 80050fc:	69b8      	ldr	r0, [r7, #24]
 80050fe:	f7ff ff43 	bl	8004f88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	78fa      	ldrb	r2, [r7, #3]
 8005106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08e      	sub	sp, #56	; 0x38
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005122:	2300      	movs	r3, #0
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <xQueueGenericSend+0x32>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d103      	bne.n	8005154 <xQueueGenericSend+0x40>
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <xQueueGenericSend+0x44>
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <xQueueGenericSend+0x46>
 8005158:	2300      	movs	r3, #0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <xQueueGenericSend+0x60>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d103      	bne.n	8005182 <xQueueGenericSend+0x6e>
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <xQueueGenericSend+0x72>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <xQueueGenericSend+0x74>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	623b      	str	r3, [r7, #32]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051a2:	f001 f8ef 	bl	8006384 <xTaskGetSchedulerState>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <xQueueGenericSend+0x9e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <xQueueGenericSend+0xa2>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <xQueueGenericSend+0xa4>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	61fb      	str	r3, [r7, #28]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051d2:	f001 fb0f 	bl	80067f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <xQueueGenericSend+0xd4>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d129      	bne.n	800523c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ee:	f000 f96f 	bl	80054d0 <prvCopyDataToQueue>
 80051f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	3324      	adds	r3, #36	; 0x24
 8005200:	4618      	mov	r0, r3
 8005202:	f000 feff 	bl	8006004 <xTaskRemoveFromEventList>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800520c:	4b3f      	ldr	r3, [pc, #252]	; (800530c <xQueueGenericSend+0x1f8>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	e00a      	b.n	8005234 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005224:	4b39      	ldr	r3, [pc, #228]	; (800530c <xQueueGenericSend+0x1f8>)
 8005226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005234:	f001 fb0e 	bl	8006854 <vPortExitCritical>
				return pdPASS;
 8005238:	2301      	movs	r3, #1
 800523a:	e063      	b.n	8005304 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005242:	f001 fb07 	bl	8006854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005246:	2300      	movs	r3, #0
 8005248:	e05c      	b.n	8005304 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800524a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005250:	f107 0314 	add.w	r3, r7, #20
 8005254:	4618      	mov	r0, r3
 8005256:	f000 ff37 	bl	80060c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800525a:	2301      	movs	r3, #1
 800525c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800525e:	f001 faf9 	bl	8006854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005262:	f000 fccb 	bl	8005bfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005266:	f001 fac5 	bl	80067f4 <vPortEnterCritical>
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005270:	b25b      	sxtb	r3, r3
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005276:	d103      	bne.n	8005280 <xQueueGenericSend+0x16c>
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005286:	b25b      	sxtb	r3, r3
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d103      	bne.n	8005296 <xQueueGenericSend+0x182>
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005296:	f001 fadd 	bl	8006854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800529a:	1d3a      	adds	r2, r7, #4
 800529c:	f107 0314 	add.w	r3, r7, #20
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 ff26 	bl	80060f4 <xTaskCheckForTimeOut>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d124      	bne.n	80052f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052b0:	f000 fa06 	bl	80056c0 <prvIsQueueFull>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d018      	beq.n	80052ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	3310      	adds	r3, #16
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fe7a 	bl	8005fbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ca:	f000 f991 	bl	80055f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052ce:	f000 fca3 	bl	8005c18 <xTaskResumeAll>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f47f af7c 	bne.w	80051d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <xQueueGenericSend+0x1f8>)
 80052dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	e772      	b.n	80051d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ee:	f000 f97f 	bl	80055f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052f2:	f000 fc91 	bl	8005c18 <xTaskResumeAll>
 80052f6:	e76c      	b.n	80051d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052fa:	f000 f979 	bl	80055f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052fe:	f000 fc8b 	bl	8005c18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005304:	4618      	mov	r0, r3
 8005306:	3738      	adds	r7, #56	; 0x38
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08c      	sub	sp, #48	; 0x30
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800531c:	2300      	movs	r3, #0
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <xQueueReceive+0x30>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	623b      	str	r3, [r7, #32]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <xQueueReceive+0x3e>
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <xQueueReceive+0x42>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <xQueueReceive+0x44>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <xQueueReceive+0x5e>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	61fb      	str	r3, [r7, #28]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800536e:	f001 f809 	bl	8006384 <xTaskGetSchedulerState>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <xQueueReceive+0x6e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <xQueueReceive+0x72>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <xQueueReceive+0x74>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xQueueReceive+0x8e>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	61bb      	str	r3, [r7, #24]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800539e:	f001 fa29 	bl	80067f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01f      	beq.n	80053ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b2:	f000 f8f7 	bl	80055a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1e5a      	subs	r2, r3, #1
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00f      	beq.n	80053e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	3310      	adds	r3, #16
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fe1a 	bl	8006004 <xTaskRemoveFromEventList>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053d6:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <xQueueReceive+0x1bc>)
 80053d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053e6:	f001 fa35 	bl	8006854 <vPortExitCritical>
				return pdPASS;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e069      	b.n	80054c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d103      	bne.n	80053fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053f4:	f001 fa2e 	bl	8006854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e062      	b.n	80054c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005402:	f107 0310 	add.w	r3, r7, #16
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fe5e 	bl	80060c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800540c:	2301      	movs	r3, #1
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005410:	f001 fa20 	bl	8006854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005414:	f000 fbf2 	bl	8005bfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005418:	f001 f9ec 	bl	80067f4 <vPortEnterCritical>
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005422:	b25b      	sxtb	r3, r3
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d103      	bne.n	8005432 <xQueueReceive+0x122>
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005438:	b25b      	sxtb	r3, r3
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d103      	bne.n	8005448 <xQueueReceive+0x138>
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005448:	f001 fa04 	bl	8006854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800544c:	1d3a      	adds	r2, r7, #4
 800544e:	f107 0310 	add.w	r3, r7, #16
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fe4d 	bl	80060f4 <xTaskCheckForTimeOut>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d123      	bne.n	80054a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005462:	f000 f917 	bl	8005694 <prvIsQueueEmpty>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d017      	beq.n	800549c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	3324      	adds	r3, #36	; 0x24
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	4611      	mov	r1, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fda1 	bl	8005fbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800547a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800547c:	f000 f8b8 	bl	80055f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005480:	f000 fbca 	bl	8005c18 <xTaskResumeAll>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d189      	bne.n	800539e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <xQueueReceive+0x1bc>)
 800548c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	e780      	b.n	800539e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800549c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800549e:	f000 f8a7 	bl	80055f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054a2:	f000 fbb9 	bl	8005c18 <xTaskResumeAll>
 80054a6:	e77a      	b.n	800539e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054aa:	f000 f8a1 	bl	80055f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054ae:	f000 fbb3 	bl	8005c18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b4:	f000 f8ee 	bl	8005694 <prvIsQueueEmpty>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f43f af6f 	beq.w	800539e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3730      	adds	r7, #48	; 0x30
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d14d      	bne.n	8005592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 ff60 	bl	80063c0 <xTaskPriorityDisinherit>
 8005500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	e043      	b.n	8005592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d119      	bne.n	8005544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6858      	ldr	r0, [r3, #4]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	461a      	mov	r2, r3
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	f002 fba1 	bl	8007c62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	441a      	add	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	d32b      	bcc.n	8005592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	605a      	str	r2, [r3, #4]
 8005542:	e026      	b.n	8005592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68d8      	ldr	r0, [r3, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	461a      	mov	r2, r3
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	f002 fb87 	bl	8007c62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	425b      	negs	r3, r3
 800555e:	441a      	add	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d207      	bcs.n	8005580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	425b      	negs	r3, r3
 800557a:	441a      	add	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d105      	bne.n	8005592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	3b01      	subs	r3, #1
 8005590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800559a:	697b      	ldr	r3, [r7, #20]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d018      	beq.n	80055e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	441a      	add	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d303      	bcc.n	80055d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68d9      	ldr	r1, [r3, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	461a      	mov	r2, r3
 80055e2:	6838      	ldr	r0, [r7, #0]
 80055e4:	f002 fb3d 	bl	8007c62 <memcpy>
	}
}
 80055e8:	bf00      	nop
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055f8:	f001 f8fc 	bl	80067f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005604:	e011      	b.n	800562a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b00      	cmp	r3, #0
 800560c:	d012      	beq.n	8005634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3324      	adds	r3, #36	; 0x24
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fcf6 	bl	8006004 <xTaskRemoveFromEventList>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800561e:	f000 fdcb 	bl	80061b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	3b01      	subs	r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800562a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	dce9      	bgt.n	8005606 <prvUnlockQueue+0x16>
 8005632:	e000      	b.n	8005636 <prvUnlockQueue+0x46>
					break;
 8005634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	22ff      	movs	r2, #255	; 0xff
 800563a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800563e:	f001 f909 	bl	8006854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005642:	f001 f8d7 	bl	80067f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800564c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800564e:	e011      	b.n	8005674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3310      	adds	r3, #16
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fcd1 	bl	8006004 <xTaskRemoveFromEventList>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005668:	f000 fda6 	bl	80061b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800566c:	7bbb      	ldrb	r3, [r7, #14]
 800566e:	3b01      	subs	r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005678:	2b00      	cmp	r3, #0
 800567a:	dce9      	bgt.n	8005650 <prvUnlockQueue+0x60>
 800567c:	e000      	b.n	8005680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800567e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	22ff      	movs	r2, #255	; 0xff
 8005684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005688:	f001 f8e4 	bl	8006854 <vPortExitCritical>
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800569c:	f001 f8aa 	bl	80067f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e001      	b.n	80056b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056b2:	f001 f8cf 	bl	8006854 <vPortExitCritical>

	return xReturn;
 80056b6:	68fb      	ldr	r3, [r7, #12]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056c8:	f001 f894 	bl	80067f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d102      	bne.n	80056de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e001      	b.n	80056e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056e2:	f001 f8b7 	bl	8006854 <vPortExitCritical>

	return xReturn;
 80056e6:	68fb      	ldr	r3, [r7, #12]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e014      	b.n	800572a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005700:	4a0f      	ldr	r2, [pc, #60]	; (8005740 <vQueueAddToRegistry+0x50>)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10b      	bne.n	8005724 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800570c:	490c      	ldr	r1, [pc, #48]	; (8005740 <vQueueAddToRegistry+0x50>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <vQueueAddToRegistry+0x50>)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005722:	e006      	b.n	8005732 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3301      	adds	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b07      	cmp	r3, #7
 800572e:	d9e7      	bls.n	8005700 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	200009b8 	.word	0x200009b8

08005744 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08e      	sub	sp, #56	; 0x38
 8005748:	af04      	add	r7, sp, #16
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	623b      	str	r3, [r7, #32]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <xTaskCreateStatic+0x46>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	61fb      	str	r3, [r7, #28]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800578a:	23c4      	movs	r3, #196	; 0xc4
 800578c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2bc4      	cmp	r3, #196	; 0xc4
 8005792:	d00a      	beq.n	80057aa <xTaskCreateStatic+0x66>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	61bb      	str	r3, [r7, #24]
}
 80057a6:	bf00      	nop
 80057a8:	e7fe      	b.n	80057a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01e      	beq.n	80057f0 <xTaskCreateStatic+0xac>
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	2202      	movs	r2, #2
 80057c6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057ca:	2300      	movs	r3, #0
 80057cc:	9303      	str	r3, [sp, #12]
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	9302      	str	r3, [sp, #8]
 80057d2:	f107 0314 	add.w	r3, r7, #20
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f850 	bl	8005888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ea:	f000 f8f9 	bl	80059e0 <prvAddNewTaskToReadyList>
 80057ee:	e001      	b.n	80057f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057f4:	697b      	ldr	r3, [r7, #20]
	}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3728      	adds	r7, #40	; 0x28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b08c      	sub	sp, #48	; 0x30
 8005802:	af04      	add	r7, sp, #16
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	4613      	mov	r3, r2
 800580c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4618      	mov	r0, r3
 8005814:	f001 f8d0 	bl	80069b8 <pvPortMalloc>
 8005818:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00e      	beq.n	800583e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005820:	20c4      	movs	r0, #196	; 0xc4
 8005822:	f001 f8c9 	bl	80069b8 <pvPortMalloc>
 8005826:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
 8005834:	e005      	b.n	8005842 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005836:	6978      	ldr	r0, [r7, #20]
 8005838:	f001 f98a 	bl	8006b50 <vPortFree>
 800583c:	e001      	b.n	8005842 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d017      	beq.n	8005878 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005850:	88fa      	ldrh	r2, [r7, #6]
 8005852:	2300      	movs	r3, #0
 8005854:	9303      	str	r3, [sp, #12]
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	9302      	str	r3, [sp, #8]
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f80e 	bl	8005888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800586c:	69f8      	ldr	r0, [r7, #28]
 800586e:	f000 f8b7 	bl	80059e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005872:	2301      	movs	r3, #1
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	e002      	b.n	800587e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005878:	f04f 33ff 	mov.w	r3, #4294967295
 800587c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800587e:	69bb      	ldr	r3, [r7, #24]
	}
 8005880:	4618      	mov	r0, r3
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	461a      	mov	r2, r3
 80058a0:	21a5      	movs	r1, #165	; 0xa5
 80058a2:	f002 f9ec 	bl	8007c7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058b0:	3b01      	subs	r3, #1
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f023 0307 	bic.w	r3, r3, #7
 80058be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	617b      	str	r3, [r7, #20]
}
 80058dc:	bf00      	nop
 80058de:	e7fe      	b.n	80058de <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01f      	beq.n	800592c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058ec:	2300      	movs	r3, #0
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e012      	b.n	8005918 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	7819      	ldrb	r1, [r3, #0]
 80058fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	3334      	adds	r3, #52	; 0x34
 8005902:	460a      	mov	r2, r1
 8005904:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	4413      	add	r3, r2
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d006      	beq.n	8005920 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3301      	adds	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	d9e9      	bls.n	80058f2 <prvInitialiseNewTask+0x6a>
 800591e:	e000      	b.n	8005922 <prvInitialiseNewTask+0x9a>
			{
				break;
 8005920:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800592a:	e003      	b.n	8005934 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	2b06      	cmp	r3, #6
 8005938:	d901      	bls.n	800593e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800593a:	2306      	movs	r3, #6
 800593c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005942:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005948:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	2200      	movs	r2, #0
 800594e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	3304      	adds	r3, #4
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff fa82 	bl	8004e5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	3318      	adds	r3, #24
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fa7d 	bl	8004e5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005968:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	f1c3 0207 	rsb	r2, r3, #7
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005978:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	2200      	movs	r2, #0
 800597e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	2200      	movs	r2, #0
 800598c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	335c      	adds	r3, #92	; 0x5c
 8005994:	2260      	movs	r2, #96	; 0x60
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f002 f970 	bl	8007c7e <memset>
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	4a0c      	ldr	r2, [pc, #48]	; (80059d4 <prvInitialiseNewTask+0x14c>)
 80059a2:	661a      	str	r2, [r3, #96]	; 0x60
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	4a0c      	ldr	r2, [pc, #48]	; (80059d8 <prvInitialiseNewTask+0x150>)
 80059a8:	665a      	str	r2, [r3, #100]	; 0x64
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	4a0b      	ldr	r2, [pc, #44]	; (80059dc <prvInitialiseNewTask+0x154>)
 80059ae:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	68f9      	ldr	r1, [r7, #12]
 80059b4:	69b8      	ldr	r0, [r7, #24]
 80059b6:	f000 fdef 	bl	8006598 <pxPortInitialiseStack>
 80059ba:	4602      	mov	r2, r0
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059cc:	bf00      	nop
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	08008c84 	.word	0x08008c84
 80059d8:	08008ca4 	.word	0x08008ca4
 80059dc:	08008c64 	.word	0x08008c64

080059e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059e8:	f000 ff04 	bl	80067f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059ec:	4b2c      	ldr	r3, [pc, #176]	; (8005aa0 <prvAddNewTaskToReadyList+0xc0>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	4a2b      	ldr	r2, [pc, #172]	; (8005aa0 <prvAddNewTaskToReadyList+0xc0>)
 80059f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059f6:	4b2b      	ldr	r3, [pc, #172]	; (8005aa4 <prvAddNewTaskToReadyList+0xc4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059fe:	4a29      	ldr	r2, [pc, #164]	; (8005aa4 <prvAddNewTaskToReadyList+0xc4>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a04:	4b26      	ldr	r3, [pc, #152]	; (8005aa0 <prvAddNewTaskToReadyList+0xc0>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d110      	bne.n	8005a2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a0c:	f000 fbf8 	bl	8006200 <prvInitialiseTaskLists>
 8005a10:	e00d      	b.n	8005a2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a12:	4b25      	ldr	r3, [pc, #148]	; (8005aa8 <prvAddNewTaskToReadyList+0xc8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a1a:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <prvAddNewTaskToReadyList+0xc4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d802      	bhi.n	8005a2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a28:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <prvAddNewTaskToReadyList+0xc4>)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a2e:	4b1f      	ldr	r3, [pc, #124]	; (8005aac <prvAddNewTaskToReadyList+0xcc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	4a1d      	ldr	r2, [pc, #116]	; (8005aac <prvAddNewTaskToReadyList+0xcc>)
 8005a36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a38:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <prvAddNewTaskToReadyList+0xcc>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	2201      	movs	r2, #1
 8005a46:	409a      	lsls	r2, r3
 8005a48:	4b19      	ldr	r3, [pc, #100]	; (8005ab0 <prvAddNewTaskToReadyList+0xd0>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	4a18      	ldr	r2, [pc, #96]	; (8005ab0 <prvAddNewTaskToReadyList+0xd0>)
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <prvAddNewTaskToReadyList+0xd4>)
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7ff fa05 	bl	8004e78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a6e:	f000 fef1 	bl	8006854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <prvAddNewTaskToReadyList+0xc8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <prvAddNewTaskToReadyList+0xc4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d207      	bcs.n	8005a98 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a88:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <prvAddNewTaskToReadyList+0xd8>)
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a98:	bf00      	nop
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20000af8 	.word	0x20000af8
 8005aa4:	200009f8 	.word	0x200009f8
 8005aa8:	20000b04 	.word	0x20000b04
 8005aac:	20000b14 	.word	0x20000b14
 8005ab0:	20000b00 	.word	0x20000b00
 8005ab4:	200009fc 	.word	0x200009fc
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d017      	beq.n	8005afe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ace:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <vTaskDelay+0x60>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <vTaskDelay+0x30>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60bb      	str	r3, [r7, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005aec:	f000 f886 	bl	8005bfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005af0:	2100      	movs	r1, #0
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fcea 	bl	80064cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005af8:	f000 f88e 	bl	8005c18 <xTaskResumeAll>
 8005afc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d107      	bne.n	8005b14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b04:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <vTaskDelay+0x64>)
 8005b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000b20 	.word	0x20000b20
 8005b20:	e000ed04 	.word	0xe000ed04

08005b24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b32:	463a      	mov	r2, r7
 8005b34:	1d39      	adds	r1, r7, #4
 8005b36:	f107 0308 	add.w	r3, r7, #8
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fa fd3a 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	9202      	str	r2, [sp, #8]
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	460a      	mov	r2, r1
 8005b52:	4922      	ldr	r1, [pc, #136]	; (8005bdc <vTaskStartScheduler+0xb8>)
 8005b54:	4822      	ldr	r0, [pc, #136]	; (8005be0 <vTaskStartScheduler+0xbc>)
 8005b56:	f7ff fdf5 	bl	8005744 <xTaskCreateStatic>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4a21      	ldr	r2, [pc, #132]	; (8005be4 <vTaskStartScheduler+0xc0>)
 8005b5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b60:	4b20      	ldr	r3, [pc, #128]	; (8005be4 <vTaskStartScheduler+0xc0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	e001      	b.n	8005b72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d11d      	bne.n	8005bb4 <vTaskStartScheduler+0x90>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	613b      	str	r3, [r7, #16]
}
 8005b8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b8c:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <vTaskStartScheduler+0xc4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	335c      	adds	r3, #92	; 0x5c
 8005b92:	4a16      	ldr	r2, [pc, #88]	; (8005bec <vTaskStartScheduler+0xc8>)
 8005b94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b96:	4b16      	ldr	r3, [pc, #88]	; (8005bf0 <vTaskStartScheduler+0xcc>)
 8005b98:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b9e:	4b15      	ldr	r3, [pc, #84]	; (8005bf4 <vTaskStartScheduler+0xd0>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ba4:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <vTaskStartScheduler+0xd4>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005baa:	f7fa ff11 	bl	80009d0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bae:	f000 fd7f 	bl	80066b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bb2:	e00e      	b.n	8005bd2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d10a      	bne.n	8005bd2 <vTaskStartScheduler+0xae>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	60fb      	str	r3, [r7, #12]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <vTaskStartScheduler+0xac>
}
 8005bd2:	bf00      	nop
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	08008a14 	.word	0x08008a14
 8005be0:	080061d1 	.word	0x080061d1
 8005be4:	20000b1c 	.word	0x20000b1c
 8005be8:	200009f8 	.word	0x200009f8
 8005bec:	20000084 	.word	0x20000084
 8005bf0:	20000b18 	.word	0x20000b18
 8005bf4:	20000b04 	.word	0x20000b04
 8005bf8:	20000afc 	.word	0x20000afc

08005bfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c00:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <vTaskSuspendAll+0x18>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	4a03      	ldr	r2, [pc, #12]	; (8005c14 <vTaskSuspendAll+0x18>)
 8005c08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c0a:	bf00      	nop
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	20000b20 	.word	0x20000b20

08005c18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c26:	4b41      	ldr	r3, [pc, #260]	; (8005d2c <xTaskResumeAll+0x114>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	603b      	str	r3, [r7, #0]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c44:	f000 fdd6 	bl	80067f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c48:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <xTaskResumeAll+0x114>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	4a37      	ldr	r2, [pc, #220]	; (8005d2c <xTaskResumeAll+0x114>)
 8005c50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c52:	4b36      	ldr	r3, [pc, #216]	; (8005d2c <xTaskResumeAll+0x114>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d161      	bne.n	8005d1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c5a:	4b35      	ldr	r3, [pc, #212]	; (8005d30 <xTaskResumeAll+0x118>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d05d      	beq.n	8005d1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c62:	e02e      	b.n	8005cc2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c64:	4b33      	ldr	r3, [pc, #204]	; (8005d34 <xTaskResumeAll+0x11c>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3318      	adds	r3, #24
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff f95e 	bl	8004f32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff f959 	bl	8004f32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	2201      	movs	r2, #1
 8005c86:	409a      	lsls	r2, r3
 8005c88:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <xTaskResumeAll+0x120>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	4a2a      	ldr	r2, [pc, #168]	; (8005d38 <xTaskResumeAll+0x120>)
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4a27      	ldr	r2, [pc, #156]	; (8005d3c <xTaskResumeAll+0x124>)
 8005ca0:	441a      	add	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f7ff f8e5 	bl	8004e78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb2:	4b23      	ldr	r3, [pc, #140]	; (8005d40 <xTaskResumeAll+0x128>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d302      	bcc.n	8005cc2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005cbc:	4b21      	ldr	r3, [pc, #132]	; (8005d44 <xTaskResumeAll+0x12c>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <xTaskResumeAll+0x11c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1cc      	bne.n	8005c64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cd0:	f000 fb38 	bl	8006344 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cd4:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <xTaskResumeAll+0x130>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d010      	beq.n	8005d02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ce0:	f000 f836 	bl	8005d50 <xTaskIncrementTick>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005cea:	4b16      	ldr	r3, [pc, #88]	; (8005d44 <xTaskResumeAll+0x12c>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f1      	bne.n	8005ce0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005cfc:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <xTaskResumeAll+0x130>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d02:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <xTaskResumeAll+0x12c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <xTaskResumeAll+0x134>)
 8005d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d1e:	f000 fd99 	bl	8006854 <vPortExitCritical>

	return xAlreadyYielded;
 8005d22:	68bb      	ldr	r3, [r7, #8]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20000b20 	.word	0x20000b20
 8005d30:	20000af8 	.word	0x20000af8
 8005d34:	20000ab8 	.word	0x20000ab8
 8005d38:	20000b00 	.word	0x20000b00
 8005d3c:	200009fc 	.word	0x200009fc
 8005d40:	200009f8 	.word	0x200009f8
 8005d44:	20000b0c 	.word	0x20000b0c
 8005d48:	20000b08 	.word	0x20000b08
 8005d4c:	e000ed04 	.word	0xe000ed04

08005d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5a:	4b4e      	ldr	r3, [pc, #312]	; (8005e94 <xTaskIncrementTick+0x144>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f040 808e 	bne.w	8005e80 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d64:	4b4c      	ldr	r3, [pc, #304]	; (8005e98 <xTaskIncrementTick+0x148>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d6c:	4a4a      	ldr	r2, [pc, #296]	; (8005e98 <xTaskIncrementTick+0x148>)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d120      	bne.n	8005dba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d78:	4b48      	ldr	r3, [pc, #288]	; (8005e9c <xTaskIncrementTick+0x14c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	603b      	str	r3, [r7, #0]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <xTaskIncrementTick+0x46>
 8005d98:	4b40      	ldr	r3, [pc, #256]	; (8005e9c <xTaskIncrementTick+0x14c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	4b40      	ldr	r3, [pc, #256]	; (8005ea0 <xTaskIncrementTick+0x150>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a3e      	ldr	r2, [pc, #248]	; (8005e9c <xTaskIncrementTick+0x14c>)
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	4a3e      	ldr	r2, [pc, #248]	; (8005ea0 <xTaskIncrementTick+0x150>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b3d      	ldr	r3, [pc, #244]	; (8005ea4 <xTaskIncrementTick+0x154>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	4a3c      	ldr	r2, [pc, #240]	; (8005ea4 <xTaskIncrementTick+0x154>)
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	f000 fac5 	bl	8006344 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dba:	4b3b      	ldr	r3, [pc, #236]	; (8005ea8 <xTaskIncrementTick+0x158>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d348      	bcc.n	8005e56 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dc4:	4b35      	ldr	r3, [pc, #212]	; (8005e9c <xTaskIncrementTick+0x14c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d104      	bne.n	8005dd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dce:	4b36      	ldr	r3, [pc, #216]	; (8005ea8 <xTaskIncrementTick+0x158>)
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd4:	601a      	str	r2, [r3, #0]
					break;
 8005dd6:	e03e      	b.n	8005e56 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd8:	4b30      	ldr	r3, [pc, #192]	; (8005e9c <xTaskIncrementTick+0x14c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d203      	bcs.n	8005df8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005df0:	4a2d      	ldr	r2, [pc, #180]	; (8005ea8 <xTaskIncrementTick+0x158>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005df6:	e02e      	b.n	8005e56 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff f898 	bl	8004f32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	3318      	adds	r3, #24
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff f88f 	bl	8004f32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	2201      	movs	r2, #1
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	4b23      	ldr	r3, [pc, #140]	; (8005eac <xTaskIncrementTick+0x15c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	4a22      	ldr	r2, [pc, #136]	; (8005eac <xTaskIncrementTick+0x15c>)
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4a1f      	ldr	r2, [pc, #124]	; (8005eb0 <xTaskIncrementTick+0x160>)
 8005e34:	441a      	add	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f7ff f81b 	bl	8004e78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e46:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <xTaskIncrementTick+0x164>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d3b9      	bcc.n	8005dc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e54:	e7b6      	b.n	8005dc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e56:	4b17      	ldr	r3, [pc, #92]	; (8005eb4 <xTaskIncrementTick+0x164>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	4914      	ldr	r1, [pc, #80]	; (8005eb0 <xTaskIncrementTick+0x160>)
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d901      	bls.n	8005e72 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <xTaskIncrementTick+0x168>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d007      	beq.n	8005e8a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e004      	b.n	8005e8a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e80:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <xTaskIncrementTick+0x16c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3301      	adds	r3, #1
 8005e86:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <xTaskIncrementTick+0x16c>)
 8005e88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e8a:	697b      	ldr	r3, [r7, #20]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000b20 	.word	0x20000b20
 8005e98:	20000afc 	.word	0x20000afc
 8005e9c:	20000ab0 	.word	0x20000ab0
 8005ea0:	20000ab4 	.word	0x20000ab4
 8005ea4:	20000b10 	.word	0x20000b10
 8005ea8:	20000b18 	.word	0x20000b18
 8005eac:	20000b00 	.word	0x20000b00
 8005eb0:	200009fc 	.word	0x200009fc
 8005eb4:	200009f8 	.word	0x200009f8
 8005eb8:	20000b0c 	.word	0x20000b0c
 8005ebc:	20000b08 	.word	0x20000b08

08005ec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ec6:	4b35      	ldr	r3, [pc, #212]	; (8005f9c <vTaskSwitchContext+0xdc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ece:	4b34      	ldr	r3, [pc, #208]	; (8005fa0 <vTaskSwitchContext+0xe0>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ed4:	e05d      	b.n	8005f92 <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 8005ed6:	4b32      	ldr	r3, [pc, #200]	; (8005fa0 <vTaskSwitchContext+0xe0>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005edc:	f7fa fd84 	bl	80009e8 <getRunTimeCounterValue>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	4a30      	ldr	r2, [pc, #192]	; (8005fa4 <vTaskSwitchContext+0xe4>)
 8005ee4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005ee6:	4b2f      	ldr	r3, [pc, #188]	; (8005fa4 <vTaskSwitchContext+0xe4>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4b2f      	ldr	r3, [pc, #188]	; (8005fa8 <vTaskSwitchContext+0xe8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d909      	bls.n	8005f06 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005ef2:	4b2e      	ldr	r3, [pc, #184]	; (8005fac <vTaskSwitchContext+0xec>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005ef8:	4a2a      	ldr	r2, [pc, #168]	; (8005fa4 <vTaskSwitchContext+0xe4>)
 8005efa:	6810      	ldr	r0, [r2, #0]
 8005efc:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <vTaskSwitchContext+0xe8>)
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	1a82      	subs	r2, r0, r2
 8005f02:	440a      	add	r2, r1
 8005f04:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005f06:	4b27      	ldr	r3, [pc, #156]	; (8005fa4 <vTaskSwitchContext+0xe4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a27      	ldr	r2, [pc, #156]	; (8005fa8 <vTaskSwitchContext+0xe8>)
 8005f0c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0e:	4b28      	ldr	r3, [pc, #160]	; (8005fb0 <vTaskSwitchContext+0xf0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	fab3 f383 	clz	r3, r3
 8005f1a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f1c:	7afb      	ldrb	r3, [r7, #11]
 8005f1e:	f1c3 031f 	rsb	r3, r3, #31
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	4923      	ldr	r1, [pc, #140]	; (8005fb4 <vTaskSwitchContext+0xf4>)
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <vTaskSwitchContext+0x8e>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	607b      	str	r3, [r7, #4]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <vTaskSwitchContext+0x8c>
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a16      	ldr	r2, [pc, #88]	; (8005fb4 <vTaskSwitchContext+0xf4>)
 8005f5a:	4413      	add	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	605a      	str	r2, [r3, #4]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d104      	bne.n	8005f7e <vTaskSwitchContext+0xbe>
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a09      	ldr	r2, [pc, #36]	; (8005fac <vTaskSwitchContext+0xec>)
 8005f86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f88:	4b08      	ldr	r3, [pc, #32]	; (8005fac <vTaskSwitchContext+0xec>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	335c      	adds	r3, #92	; 0x5c
 8005f8e:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <vTaskSwitchContext+0xf8>)
 8005f90:	6013      	str	r3, [r2, #0]
}
 8005f92:	bf00      	nop
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000b20 	.word	0x20000b20
 8005fa0:	20000b0c 	.word	0x20000b0c
 8005fa4:	20000b28 	.word	0x20000b28
 8005fa8:	20000b24 	.word	0x20000b24
 8005fac:	200009f8 	.word	0x200009f8
 8005fb0:	20000b00 	.word	0x20000b00
 8005fb4:	200009fc 	.word	0x200009fc
 8005fb8:	20000084 	.word	0x20000084

08005fbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	60fb      	str	r3, [r7, #12]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fe2:	4b07      	ldr	r3, [pc, #28]	; (8006000 <vTaskPlaceOnEventList+0x44>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3318      	adds	r3, #24
 8005fe8:	4619      	mov	r1, r3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fe ff68 	bl	8004ec0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	6838      	ldr	r0, [r7, #0]
 8005ff4:	f000 fa6a 	bl	80064cc <prvAddCurrentTaskToDelayedList>
}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	200009f8 	.word	0x200009f8

08006004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	60fb      	str	r3, [r7, #12]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	3318      	adds	r3, #24
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe ff7c 	bl	8004f32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800603a:	4b1d      	ldr	r3, [pc, #116]	; (80060b0 <xTaskRemoveFromEventList+0xac>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d11c      	bne.n	800607c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	3304      	adds	r3, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe ff73 	bl	8004f32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	2201      	movs	r2, #1
 8006052:	409a      	lsls	r2, r3
 8006054:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <xTaskRemoveFromEventList+0xb0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4313      	orrs	r3, r2
 800605a:	4a16      	ldr	r2, [pc, #88]	; (80060b4 <xTaskRemoveFromEventList+0xb0>)
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4a13      	ldr	r2, [pc, #76]	; (80060b8 <xTaskRemoveFromEventList+0xb4>)
 800606c:	441a      	add	r2, r3
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	3304      	adds	r3, #4
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f7fe feff 	bl	8004e78 <vListInsertEnd>
 800607a:	e005      	b.n	8006088 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	3318      	adds	r3, #24
 8006080:	4619      	mov	r1, r3
 8006082:	480e      	ldr	r0, [pc, #56]	; (80060bc <xTaskRemoveFromEventList+0xb8>)
 8006084:	f7fe fef8 	bl	8004e78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <xTaskRemoveFromEventList+0xbc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	429a      	cmp	r2, r3
 8006094:	d905      	bls.n	80060a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006096:	2301      	movs	r3, #1
 8006098:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <xTaskRemoveFromEventList+0xc0>)
 800609c:	2201      	movs	r2, #1
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e001      	b.n	80060a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060a6:	697b      	ldr	r3, [r7, #20]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000b20 	.word	0x20000b20
 80060b4:	20000b00 	.word	0x20000b00
 80060b8:	200009fc 	.word	0x200009fc
 80060bc:	20000ab8 	.word	0x20000ab8
 80060c0:	200009f8 	.word	0x200009f8
 80060c4:	20000b0c 	.word	0x20000b0c

080060c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <vTaskInternalSetTimeOutState+0x24>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <vTaskInternalSetTimeOutState+0x28>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	605a      	str	r2, [r3, #4]
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	20000b10 	.word	0x20000b10
 80060f0:	20000afc 	.word	0x20000afc

080060f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	613b      	str	r3, [r7, #16]
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	60fb      	str	r3, [r7, #12]
}
 8006132:	bf00      	nop
 8006134:	e7fe      	b.n	8006134 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006136:	f000 fb5d 	bl	80067f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800613a:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <xTaskCheckForTimeOut+0xbc>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d102      	bne.n	800615a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006154:	2300      	movs	r3, #0
 8006156:	61fb      	str	r3, [r7, #28]
 8006158:	e023      	b.n	80061a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <xTaskCheckForTimeOut+0xc0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d007      	beq.n	8006176 <xTaskCheckForTimeOut+0x82>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	429a      	cmp	r2, r3
 800616e:	d302      	bcc.n	8006176 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006170:	2301      	movs	r3, #1
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	e015      	b.n	80061a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	429a      	cmp	r2, r3
 800617e:	d20b      	bcs.n	8006198 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	1ad2      	subs	r2, r2, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff ff9b 	bl	80060c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	e004      	b.n	80061a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800619e:	2301      	movs	r3, #1
 80061a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061a2:	f000 fb57 	bl	8006854 <vPortExitCritical>

	return xReturn;
 80061a6:	69fb      	ldr	r3, [r7, #28]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000afc 	.word	0x20000afc
 80061b4:	20000b10 	.word	0x20000b10

080061b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061bc:	4b03      	ldr	r3, [pc, #12]	; (80061cc <vTaskMissedYield+0x14>)
 80061be:	2201      	movs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]
}
 80061c2:	bf00      	nop
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	20000b0c 	.word	0x20000b0c

080061d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061d8:	f000 f852 	bl	8006280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <prvIdleTask+0x28>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d9f9      	bls.n	80061d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <prvIdleTask+0x2c>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061f4:	e7f0      	b.n	80061d8 <prvIdleTask+0x8>
 80061f6:	bf00      	nop
 80061f8:	200009fc 	.word	0x200009fc
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
 800620a:	e00c      	b.n	8006226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4a12      	ldr	r2, [pc, #72]	; (8006260 <prvInitialiseTaskLists+0x60>)
 8006218:	4413      	add	r3, r2
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fdff 	bl	8004e1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3301      	adds	r3, #1
 8006224:	607b      	str	r3, [r7, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b06      	cmp	r3, #6
 800622a:	d9ef      	bls.n	800620c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800622c:	480d      	ldr	r0, [pc, #52]	; (8006264 <prvInitialiseTaskLists+0x64>)
 800622e:	f7fe fdf6 	bl	8004e1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006232:	480d      	ldr	r0, [pc, #52]	; (8006268 <prvInitialiseTaskLists+0x68>)
 8006234:	f7fe fdf3 	bl	8004e1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006238:	480c      	ldr	r0, [pc, #48]	; (800626c <prvInitialiseTaskLists+0x6c>)
 800623a:	f7fe fdf0 	bl	8004e1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800623e:	480c      	ldr	r0, [pc, #48]	; (8006270 <prvInitialiseTaskLists+0x70>)
 8006240:	f7fe fded 	bl	8004e1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006244:	480b      	ldr	r0, [pc, #44]	; (8006274 <prvInitialiseTaskLists+0x74>)
 8006246:	f7fe fdea 	bl	8004e1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <prvInitialiseTaskLists+0x78>)
 800624c:	4a05      	ldr	r2, [pc, #20]	; (8006264 <prvInitialiseTaskLists+0x64>)
 800624e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006250:	4b0a      	ldr	r3, [pc, #40]	; (800627c <prvInitialiseTaskLists+0x7c>)
 8006252:	4a05      	ldr	r2, [pc, #20]	; (8006268 <prvInitialiseTaskLists+0x68>)
 8006254:	601a      	str	r2, [r3, #0]
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	200009fc 	.word	0x200009fc
 8006264:	20000a88 	.word	0x20000a88
 8006268:	20000a9c 	.word	0x20000a9c
 800626c:	20000ab8 	.word	0x20000ab8
 8006270:	20000acc 	.word	0x20000acc
 8006274:	20000ae4 	.word	0x20000ae4
 8006278:	20000ab0 	.word	0x20000ab0
 800627c:	20000ab4 	.word	0x20000ab4

08006280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006286:	e019      	b.n	80062bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006288:	f000 fab4 	bl	80067f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628c:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <prvCheckTasksWaitingTermination+0x50>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	4618      	mov	r0, r3
 800629a:	f7fe fe4a 	bl	8004f32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800629e:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <prvCheckTasksWaitingTermination+0x54>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	4a0b      	ldr	r2, [pc, #44]	; (80062d4 <prvCheckTasksWaitingTermination+0x54>)
 80062a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062a8:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <prvCheckTasksWaitingTermination+0x58>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <prvCheckTasksWaitingTermination+0x58>)
 80062b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062b2:	f000 facf 	bl	8006854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f810 	bl	80062dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <prvCheckTasksWaitingTermination+0x58>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e1      	bne.n	8006288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000acc 	.word	0x20000acc
 80062d4:	20000af8 	.word	0x20000af8
 80062d8:	20000ae0 	.word	0x20000ae0

080062dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	335c      	adds	r3, #92	; 0x5c
 80062e8:	4618      	mov	r0, r3
 80062ea:	f002 f8c5 	bl	8008478 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d108      	bne.n	800630a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fc27 	bl	8006b50 <vPortFree>
				vPortFree( pxTCB );
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fc24 	bl	8006b50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006308:	e018      	b.n	800633c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006310:	2b01      	cmp	r3, #1
 8006312:	d103      	bne.n	800631c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fc1b 	bl	8006b50 <vPortFree>
	}
 800631a:	e00f      	b.n	800633c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006322:	2b02      	cmp	r3, #2
 8006324:	d00a      	beq.n	800633c <prvDeleteTCB+0x60>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	60fb      	str	r3, [r7, #12]
}
 8006338:	bf00      	nop
 800633a:	e7fe      	b.n	800633a <prvDeleteTCB+0x5e>
	}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800634a:	4b0c      	ldr	r3, [pc, #48]	; (800637c <prvResetNextTaskUnblockTime+0x38>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006354:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <prvResetNextTaskUnblockTime+0x3c>)
 8006356:	f04f 32ff 	mov.w	r2, #4294967295
 800635a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800635c:	e008      	b.n	8006370 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635e:	4b07      	ldr	r3, [pc, #28]	; (800637c <prvResetNextTaskUnblockTime+0x38>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	4a04      	ldr	r2, [pc, #16]	; (8006380 <prvResetNextTaskUnblockTime+0x3c>)
 800636e:	6013      	str	r3, [r2, #0]
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	20000ab0 	.word	0x20000ab0
 8006380:	20000b18 	.word	0x20000b18

08006384 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800638a:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <xTaskGetSchedulerState+0x34>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006392:	2301      	movs	r3, #1
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	e008      	b.n	80063aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006398:	4b08      	ldr	r3, [pc, #32]	; (80063bc <xTaskGetSchedulerState+0x38>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d102      	bne.n	80063a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063a0:	2302      	movs	r3, #2
 80063a2:	607b      	str	r3, [r7, #4]
 80063a4:	e001      	b.n	80063aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063a6:	2300      	movs	r3, #0
 80063a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063aa:	687b      	ldr	r3, [r7, #4]
	}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	20000b04 	.word	0x20000b04
 80063bc:	20000b20 	.word	0x20000b20

080063c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d06e      	beq.n	80064b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063d6:	4b3a      	ldr	r3, [pc, #232]	; (80064c0 <xTaskPriorityDisinherit+0x100>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d00a      	beq.n	80063f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	60fb      	str	r3, [r7, #12]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	60bb      	str	r3, [r7, #8]
}
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006418:	1e5a      	subs	r2, r3, #1
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006426:	429a      	cmp	r2, r3
 8006428:	d044      	beq.n	80064b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	2b00      	cmp	r3, #0
 8006430:	d140      	bne.n	80064b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3304      	adds	r3, #4
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fd7b 	bl	8004f32 <uxListRemove>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d115      	bne.n	800646e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	491f      	ldr	r1, [pc, #124]	; (80064c4 <xTaskPriorityDisinherit+0x104>)
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <xTaskPriorityDisinherit+0xae>
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	2201      	movs	r2, #1
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43da      	mvns	r2, r3
 8006464:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <xTaskPriorityDisinherit+0x108>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4013      	ands	r3, r2
 800646a:	4a17      	ldr	r2, [pc, #92]	; (80064c8 <xTaskPriorityDisinherit+0x108>)
 800646c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	f1c3 0207 	rsb	r2, r3, #7
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	2201      	movs	r2, #1
 8006488:	409a      	lsls	r2, r3
 800648a:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <xTaskPriorityDisinherit+0x108>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4313      	orrs	r3, r2
 8006490:	4a0d      	ldr	r2, [pc, #52]	; (80064c8 <xTaskPriorityDisinherit+0x108>)
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <xTaskPriorityDisinherit+0x104>)
 80064a2:	441a      	add	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4619      	mov	r1, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	f7fe fce4 	bl	8004e78 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064b4:	697b      	ldr	r3, [r7, #20]
	}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	200009f8 	.word	0x200009f8
 80064c4:	200009fc 	.word	0x200009fc
 80064c8:	20000b00 	.word	0x20000b00

080064cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064d6:	4b29      	ldr	r3, [pc, #164]	; (800657c <prvAddCurrentTaskToDelayedList+0xb0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064dc:	4b28      	ldr	r3, [pc, #160]	; (8006580 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fd25 	bl	8004f32 <uxListRemove>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10b      	bne.n	8006506 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064ee:	4b24      	ldr	r3, [pc, #144]	; (8006580 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	2201      	movs	r2, #1
 80064f6:	fa02 f303 	lsl.w	r3, r2, r3
 80064fa:	43da      	mvns	r2, r3
 80064fc:	4b21      	ldr	r3, [pc, #132]	; (8006584 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4013      	ands	r3, r2
 8006502:	4a20      	ldr	r2, [pc, #128]	; (8006584 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006504:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d10a      	bne.n	8006524 <prvAddCurrentTaskToDelayedList+0x58>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006514:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3304      	adds	r3, #4
 800651a:	4619      	mov	r1, r3
 800651c:	481a      	ldr	r0, [pc, #104]	; (8006588 <prvAddCurrentTaskToDelayedList+0xbc>)
 800651e:	f7fe fcab 	bl	8004e78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006522:	e026      	b.n	8006572 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4413      	add	r3, r2
 800652a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800652c:	4b14      	ldr	r3, [pc, #80]	; (8006580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	429a      	cmp	r2, r3
 800653a:	d209      	bcs.n	8006550 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800653c:	4b13      	ldr	r3, [pc, #76]	; (800658c <prvAddCurrentTaskToDelayedList+0xc0>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4b0f      	ldr	r3, [pc, #60]	; (8006580 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f7fe fcb9 	bl	8004ec0 <vListInsert>
}
 800654e:	e010      	b.n	8006572 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006550:	4b0f      	ldr	r3, [pc, #60]	; (8006590 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3304      	adds	r3, #4
 800655a:	4619      	mov	r1, r3
 800655c:	4610      	mov	r0, r2
 800655e:	f7fe fcaf 	bl	8004ec0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006562:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	429a      	cmp	r2, r3
 800656a:	d202      	bcs.n	8006572 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800656c:	4a09      	ldr	r2, [pc, #36]	; (8006594 <prvAddCurrentTaskToDelayedList+0xc8>)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6013      	str	r3, [r2, #0]
}
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000afc 	.word	0x20000afc
 8006580:	200009f8 	.word	0x200009f8
 8006584:	20000b00 	.word	0x20000b00
 8006588:	20000ae4 	.word	0x20000ae4
 800658c:	20000ab4 	.word	0x20000ab4
 8006590:	20000ab0 	.word	0x20000ab0
 8006594:	20000b18 	.word	0x20000b18

08006598 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3b04      	subs	r3, #4
 80065a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3b04      	subs	r3, #4
 80065b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f023 0201 	bic.w	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3b04      	subs	r3, #4
 80065c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065c8:	4a0c      	ldr	r2, [pc, #48]	; (80065fc <pxPortInitialiseStack+0x64>)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3b14      	subs	r3, #20
 80065d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3b04      	subs	r3, #4
 80065de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f06f 0202 	mvn.w	r2, #2
 80065e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3b20      	subs	r3, #32
 80065ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065ee:	68fb      	ldr	r3, [r7, #12]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	08006601 	.word	0x08006601

08006600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800660a:	4b12      	ldr	r3, [pc, #72]	; (8006654 <prvTaskExitError+0x54>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d00a      	beq.n	800662a <prvTaskExitError+0x2a>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	60fb      	str	r3, [r7, #12]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <prvTaskExitError+0x28>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60bb      	str	r3, [r7, #8]
}
 800663c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800663e:	bf00      	nop
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0fc      	beq.n	8006640 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	2000000c 	.word	0x2000000c
	...

08006660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <pxCurrentTCBConst2>)
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	6808      	ldr	r0, [r1, #0]
 8006666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	f380 8809 	msr	PSP, r0
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8811 	msr	BASEPRI, r0
 800667a:	4770      	bx	lr
 800667c:	f3af 8000 	nop.w

08006680 <pxCurrentTCBConst2>:
 8006680:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop

08006688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006688:	4808      	ldr	r0, [pc, #32]	; (80066ac <prvPortStartFirstTask+0x24>)
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	6800      	ldr	r0, [r0, #0]
 800668e:	f380 8808 	msr	MSP, r0
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8814 	msr	CONTROL, r0
 800669a:	b662      	cpsie	i
 800669c:	b661      	cpsie	f
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	df00      	svc	0
 80066a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066aa:	bf00      	nop
 80066ac:	e000ed08 	.word	0xe000ed08

080066b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066b6:	4b46      	ldr	r3, [pc, #280]	; (80067d0 <xPortStartScheduler+0x120>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a46      	ldr	r2, [pc, #280]	; (80067d4 <xPortStartScheduler+0x124>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d10a      	bne.n	80066d6 <xPortStartScheduler+0x26>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	613b      	str	r3, [r7, #16]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066d6:	4b3e      	ldr	r3, [pc, #248]	; (80067d0 <xPortStartScheduler+0x120>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a3f      	ldr	r2, [pc, #252]	; (80067d8 <xPortStartScheduler+0x128>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10a      	bne.n	80066f6 <xPortStartScheduler+0x46>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	60fb      	str	r3, [r7, #12]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066f6:	4b39      	ldr	r3, [pc, #228]	; (80067dc <xPortStartScheduler+0x12c>)
 80066f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	22ff      	movs	r2, #255	; 0xff
 8006706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4b31      	ldr	r3, [pc, #196]	; (80067e0 <xPortStartScheduler+0x130>)
 800671c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800671e:	4b31      	ldr	r3, [pc, #196]	; (80067e4 <xPortStartScheduler+0x134>)
 8006720:	2207      	movs	r2, #7
 8006722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006724:	e009      	b.n	800673a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006726:	4b2f      	ldr	r3, [pc, #188]	; (80067e4 <xPortStartScheduler+0x134>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3b01      	subs	r3, #1
 800672c:	4a2d      	ldr	r2, [pc, #180]	; (80067e4 <xPortStartScheduler+0x134>)
 800672e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	2b80      	cmp	r3, #128	; 0x80
 8006744:	d0ef      	beq.n	8006726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006746:	4b27      	ldr	r3, [pc, #156]	; (80067e4 <xPortStartScheduler+0x134>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f1c3 0307 	rsb	r3, r3, #7
 800674e:	2b04      	cmp	r3, #4
 8006750:	d00a      	beq.n	8006768 <xPortStartScheduler+0xb8>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	60bb      	str	r3, [r7, #8]
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006768:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <xPortStartScheduler+0x134>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	021b      	lsls	r3, r3, #8
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <xPortStartScheduler+0x134>)
 8006770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006772:	4b1c      	ldr	r3, [pc, #112]	; (80067e4 <xPortStartScheduler+0x134>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800677a:	4a1a      	ldr	r2, [pc, #104]	; (80067e4 <xPortStartScheduler+0x134>)
 800677c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006786:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <xPortStartScheduler+0x138>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <xPortStartScheduler+0x138>)
 800678c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <xPortStartScheduler+0x138>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a14      	ldr	r2, [pc, #80]	; (80067e8 <xPortStartScheduler+0x138>)
 8006798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800679c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800679e:	f000 f8dd 	bl	800695c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067a2:	4b12      	ldr	r3, [pc, #72]	; (80067ec <xPortStartScheduler+0x13c>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067a8:	f000 f8fc 	bl	80069a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067ac:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <xPortStartScheduler+0x140>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a0f      	ldr	r2, [pc, #60]	; (80067f0 <xPortStartScheduler+0x140>)
 80067b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067b8:	f7ff ff66 	bl	8006688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067bc:	f7ff fb80 	bl	8005ec0 <vTaskSwitchContext>
	prvTaskExitError();
 80067c0:	f7ff ff1e 	bl	8006600 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	e000ed00 	.word	0xe000ed00
 80067d4:	410fc271 	.word	0x410fc271
 80067d8:	410fc270 	.word	0x410fc270
 80067dc:	e000e400 	.word	0xe000e400
 80067e0:	20000b2c 	.word	0x20000b2c
 80067e4:	20000b30 	.word	0x20000b30
 80067e8:	e000ed20 	.word	0xe000ed20
 80067ec:	2000000c 	.word	0x2000000c
 80067f0:	e000ef34 	.word	0xe000ef34

080067f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	607b      	str	r3, [r7, #4]
}
 800680c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800680e:	4b0f      	ldr	r3, [pc, #60]	; (800684c <vPortEnterCritical+0x58>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3301      	adds	r3, #1
 8006814:	4a0d      	ldr	r2, [pc, #52]	; (800684c <vPortEnterCritical+0x58>)
 8006816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <vPortEnterCritical+0x58>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d10f      	bne.n	8006840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <vPortEnterCritical+0x5c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <vPortEnterCritical+0x4c>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	603b      	str	r3, [r7, #0]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <vPortEnterCritical+0x4a>
	}
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	2000000c 	.word	0x2000000c
 8006850:	e000ed04 	.word	0xe000ed04

08006854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800685a:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <vPortExitCritical+0x50>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <vPortExitCritical+0x24>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	607b      	str	r3, [r7, #4]
}
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <vPortExitCritical+0x50>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3b01      	subs	r3, #1
 800687e:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <vPortExitCritical+0x50>)
 8006880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006882:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <vPortExitCritical+0x50>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <vPortExitCritical+0x42>
 800688a:	2300      	movs	r3, #0
 800688c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	2000000c 	.word	0x2000000c
	...

080068b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068b0:	f3ef 8009 	mrs	r0, PSP
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	4b15      	ldr	r3, [pc, #84]	; (8006910 <pxCurrentTCBConst>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	f01e 0f10 	tst.w	lr, #16
 80068c0:	bf08      	it	eq
 80068c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	6010      	str	r0, [r2, #0]
 80068cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068d4:	f380 8811 	msr	BASEPRI, r0
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f7ff faee 	bl	8005ec0 <vTaskSwitchContext>
 80068e4:	f04f 0000 	mov.w	r0, #0
 80068e8:	f380 8811 	msr	BASEPRI, r0
 80068ec:	bc09      	pop	{r0, r3}
 80068ee:	6819      	ldr	r1, [r3, #0]
 80068f0:	6808      	ldr	r0, [r1, #0]
 80068f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f6:	f01e 0f10 	tst.w	lr, #16
 80068fa:	bf08      	it	eq
 80068fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006900:	f380 8809 	msr	PSP, r0
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w

08006910 <pxCurrentTCBConst>:
 8006910:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop

08006918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	607b      	str	r3, [r7, #4]
}
 8006930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006932:	f7ff fa0d 	bl	8005d50 <xTaskIncrementTick>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <SysTick_Handler+0x40>)
 800693e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f383 8811 	msr	BASEPRI, r3
}
 800694e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <vPortSetupTimerInterrupt+0x34>)
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <vPortSetupTimerInterrupt+0x38>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <vPortSetupTimerInterrupt+0x3c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <vPortSetupTimerInterrupt+0x40>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	099b      	lsrs	r3, r3, #6
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <vPortSetupTimerInterrupt+0x44>)
 800697a:	3b01      	subs	r3, #1
 800697c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800697e:	4b04      	ldr	r3, [pc, #16]	; (8006990 <vPortSetupTimerInterrupt+0x34>)
 8006980:	2207      	movs	r2, #7
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	e000e010 	.word	0xe000e010
 8006994:	e000e018 	.word	0xe000e018
 8006998:	20000000 	.word	0x20000000
 800699c:	10624dd3 	.word	0x10624dd3
 80069a0:	e000e014 	.word	0xe000e014

080069a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069b4 <vPortEnableVFP+0x10>
 80069a8:	6801      	ldr	r1, [r0, #0]
 80069aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069ae:	6001      	str	r1, [r0, #0]
 80069b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069b2:	bf00      	nop
 80069b4:	e000ed88 	.word	0xe000ed88

080069b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069c4:	f7ff f91a 	bl	8005bfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069c8:	4b5b      	ldr	r3, [pc, #364]	; (8006b38 <pvPortMalloc+0x180>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069d0:	f000 f920 	bl	8006c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069d4:	4b59      	ldr	r3, [pc, #356]	; (8006b3c <pvPortMalloc+0x184>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4013      	ands	r3, r2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f040 8093 	bne.w	8006b08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01d      	beq.n	8006a24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069e8:	2208      	movs	r2, #8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d014      	beq.n	8006a24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f023 0307 	bic.w	r3, r3, #7
 8006a00:	3308      	adds	r3, #8
 8006a02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <pvPortMalloc+0x6c>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	617b      	str	r3, [r7, #20]
}
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d06e      	beq.n	8006b08 <pvPortMalloc+0x150>
 8006a2a:	4b45      	ldr	r3, [pc, #276]	; (8006b40 <pvPortMalloc+0x188>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d869      	bhi.n	8006b08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a34:	4b43      	ldr	r3, [pc, #268]	; (8006b44 <pvPortMalloc+0x18c>)
 8006a36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a38:	4b42      	ldr	r3, [pc, #264]	; (8006b44 <pvPortMalloc+0x18c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a3e:	e004      	b.n	8006a4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d903      	bls.n	8006a5c <pvPortMalloc+0xa4>
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1f1      	bne.n	8006a40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a5c:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <pvPortMalloc+0x180>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d050      	beq.n	8006b08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2208      	movs	r2, #8
 8006a6c:	4413      	add	r3, r2
 8006a6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	2308      	movs	r3, #8
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d91f      	bls.n	8006ac8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <pvPortMalloc+0xf8>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	613b      	str	r3, [r7, #16]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	1ad2      	subs	r2, r2, r3
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ac2:	69b8      	ldr	r0, [r7, #24]
 8006ac4:	f000 f908 	bl	8006cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ac8:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <pvPortMalloc+0x188>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	4a1b      	ldr	r2, [pc, #108]	; (8006b40 <pvPortMalloc+0x188>)
 8006ad4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ad6:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <pvPortMalloc+0x188>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b1b      	ldr	r3, [pc, #108]	; (8006b48 <pvPortMalloc+0x190>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d203      	bcs.n	8006aea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <pvPortMalloc+0x188>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a18      	ldr	r2, [pc, #96]	; (8006b48 <pvPortMalloc+0x190>)
 8006ae8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <pvPortMalloc+0x184>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006afe:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <pvPortMalloc+0x194>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	4a11      	ldr	r2, [pc, #68]	; (8006b4c <pvPortMalloc+0x194>)
 8006b06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b08:	f7ff f886 	bl	8005c18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <pvPortMalloc+0x174>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	60fb      	str	r3, [r7, #12]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <pvPortMalloc+0x172>
	return pvReturn;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3728      	adds	r7, #40	; 0x28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	2000473c 	.word	0x2000473c
 8006b3c:	20004750 	.word	0x20004750
 8006b40:	20004740 	.word	0x20004740
 8006b44:	20004734 	.word	0x20004734
 8006b48:	20004744 	.word	0x20004744
 8006b4c:	20004748 	.word	0x20004748

08006b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d04d      	beq.n	8006bfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b62:	2308      	movs	r3, #8
 8006b64:	425b      	negs	r3, r3
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4413      	add	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	4b24      	ldr	r3, [pc, #144]	; (8006c08 <vPortFree+0xb8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <vPortFree+0x44>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	60fb      	str	r3, [r7, #12]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00a      	beq.n	8006bb2 <vPortFree+0x62>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60bb      	str	r3, [r7, #8]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <vPortFree+0xb8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01e      	beq.n	8006bfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d11a      	bne.n	8006bfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <vPortFree+0xb8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	401a      	ands	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bd8:	f7ff f810 	bl	8005bfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <vPortFree+0xbc>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4413      	add	r3, r2
 8006be6:	4a09      	ldr	r2, [pc, #36]	; (8006c0c <vPortFree+0xbc>)
 8006be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bea:	6938      	ldr	r0, [r7, #16]
 8006bec:	f000 f874 	bl	8006cd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bf0:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <vPortFree+0xc0>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	4a06      	ldr	r2, [pc, #24]	; (8006c10 <vPortFree+0xc0>)
 8006bf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bfa:	f7ff f80d 	bl	8005c18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bfe:	bf00      	nop
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20004750 	.word	0x20004750
 8006c0c:	20004740 	.word	0x20004740
 8006c10:	2000474c 	.word	0x2000474c

08006c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c20:	4b27      	ldr	r3, [pc, #156]	; (8006cc0 <prvHeapInit+0xac>)
 8006c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00c      	beq.n	8006c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3307      	adds	r3, #7
 8006c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	4a1f      	ldr	r2, [pc, #124]	; (8006cc0 <prvHeapInit+0xac>)
 8006c44:	4413      	add	r3, r2
 8006c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c4c:	4a1d      	ldr	r2, [pc, #116]	; (8006cc4 <prvHeapInit+0xb0>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c52:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <prvHeapInit+0xb0>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c60:	2208      	movs	r2, #8
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0307 	bic.w	r3, r3, #7
 8006c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c7e:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c94:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <prvHeapInit+0xb8>)
 8006ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4a09      	ldr	r2, [pc, #36]	; (8006cd0 <prvHeapInit+0xbc>)
 8006caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cac:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <prvHeapInit+0xc0>)
 8006cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cb2:	601a      	str	r2, [r3, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	20000b34 	.word	0x20000b34
 8006cc4:	20004734 	.word	0x20004734
 8006cc8:	2000473c 	.word	0x2000473c
 8006ccc:	20004744 	.word	0x20004744
 8006cd0:	20004740 	.word	0x20004740
 8006cd4:	20004750 	.word	0x20004750

08006cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ce0:	4b28      	ldr	r3, [pc, #160]	; (8006d84 <prvInsertBlockIntoFreeList+0xac>)
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e002      	b.n	8006cec <prvInsertBlockIntoFreeList+0x14>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d8f7      	bhi.n	8006ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	4413      	add	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d108      	bne.n	8006d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	441a      	add	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	441a      	add	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d118      	bne.n	8006d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <prvInsertBlockIntoFreeList+0xb0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d00d      	beq.n	8006d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	441a      	add	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e008      	b.n	8006d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d56:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <prvInsertBlockIntoFreeList+0xb0>)
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e003      	b.n	8006d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d002      	beq.n	8006d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20004734 	.word	0x20004734
 8006d88:	2000473c 	.word	0x2000473c

08006d8c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8006d94:	1d39      	adds	r1, r7, #4
 8006d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	4803      	ldr	r0, [pc, #12]	; (8006dac <__io_putchar+0x20>)
 8006d9e:	f7fc fc34 	bl	800360a <HAL_UART_Transmit>

	return ch;
 8006da2:	687b      	ldr	r3, [r7, #4]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000410 	.word	0x20000410

08006db0 <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	taskENTER_CRITICAL();
 8006db8:	f7ff fd1c 	bl	80067f4 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4807      	ldr	r0, [pc, #28]	; (8006ddc <vPrintString+0x2c>)
 8006dc0:	f001 fb34 	bl	800842c <iprintf>
		fflush( stdout );
 8006dc4:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <vPrintString+0x30>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fe08 	bl	80079e0 <fflush>
	}
	taskEXIT_CRITICAL();
 8006dd0:	f7ff fd40 	bl	8006854 <vPortExitCritical>
}
 8006dd4:	bf00      	nop
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	08008a44 	.word	0x08008a44
 8006de0:	20000084 	.word	0x20000084

08006de4 <HAL_GPIO_EXTI_Callback>:
 *
 * @param[uint16_t] GPIO_Pin  Número de pin del GPIO de interrupción .
 *
 * @return Función del tipo void.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	80fb      	strh	r3, [r7, #6]
	aux = HAL_GetTick() / portTICK_PERIOD_MS; //Guarda el tiempo en el que se llama al callback.
 8006dee:	f7fa f92f 	bl	8001050 <HAL_GetTick>
 8006df2:	4603      	mov	r3, r0
 8006df4:	4a12      	ldr	r2, [pc, #72]	; (8006e40 <HAL_GPIO_EXTI_Callback+0x5c>)
 8006df6:	6013      	str	r3, [r2, #0]
	if (eboard_switch()) {
 8006df8:	f000 fb02 	bl	8007400 <eboard_switch>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <HAL_GPIO_EXTI_Callback+0x34>
		RisingUp_Time = aux;
 8006e02:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <HAL_GPIO_EXTI_Callback+0x5c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a0f      	ldr	r2, [pc, #60]	; (8006e44 <HAL_GPIO_EXTI_Callback+0x60>)
 8006e08:	6013      	str	r3, [r2, #0]
		rising_flag = 0;
 8006e0a:	4b0f      	ldr	r3, [pc, #60]	; (8006e48 <HAL_GPIO_EXTI_Callback+0x64>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
		FallingDown_Time = 0;
 8006e10:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <HAL_GPIO_EXTI_Callback+0x68>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
	} else if (!eboard_switch()) {
		FallingDown_Time = aux;
		rising_flag = 1;
	}
}
 8006e16:	e00e      	b.n	8006e36 <HAL_GPIO_EXTI_Callback+0x52>
	} else if (!eboard_switch()) {
 8006e18:	f000 faf2 	bl	8007400 <eboard_switch>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f083 0301 	eor.w	r3, r3, #1
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d006      	beq.n	8006e36 <HAL_GPIO_EXTI_Callback+0x52>
		FallingDown_Time = aux;
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <HAL_GPIO_EXTI_Callback+0x5c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a07      	ldr	r2, [pc, #28]	; (8006e4c <HAL_GPIO_EXTI_Callback+0x68>)
 8006e2e:	6013      	str	r3, [r2, #0]
		rising_flag = 1;
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <HAL_GPIO_EXTI_Callback+0x64>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	701a      	strb	r2, [r3, #0]
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20004770 	.word	0x20004770
 8006e44:	20004758 	.word	0x20004758
 8006e48:	2000476c 	.word	0x2000476c
 8006e4c:	2000475c 	.word	0x2000475c

08006e50 <resetear_parametros>:
 *
 * @param[void]
 *
 * @return Función del tipo void.
 */
static void resetear_parametros(void) {
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
	RisingUp_Time = 0;
 8006e54:	4b10      	ldr	r3, [pc, #64]	; (8006e98 <resetear_parametros+0x48>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
	FallingDown_Time = 0;
 8006e5a:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <resetear_parametros+0x4c>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
	BtnPressed_Time = 0;
 8006e60:	4b0f      	ldr	r3, [pc, #60]	; (8006ea0 <resetear_parametros+0x50>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]
	rising_flag = 0;
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <resetear_parametros+0x54>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
	vPrintString(messages[Btn_State]); //Envío de mensaje por UART del estado del botón
 8006e6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ea8 <resetear_parametros+0x58>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <resetear_parametros+0x5c>)
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff ff99 	bl	8006db0 <vPrintString>
	if (Btn_State != BLOCKED)
 8006e7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <resetear_parametros+0x58>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d003      	beq.n	8006e8e <resetear_parametros+0x3e>
		Btn_State = NONE;
 8006e86:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <resetear_parametros+0x58>)
 8006e88:	2204      	movs	r2, #4
 8006e8a:	701a      	strb	r2, [r3, #0]
	else
		Btn_State = UNBLOCKED;
}
 8006e8c:	e002      	b.n	8006e94 <resetear_parametros+0x44>
		Btn_State = UNBLOCKED;
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <resetear_parametros+0x58>)
 8006e90:	2203      	movs	r2, #3
 8006e92:	701a      	strb	r2, [r3, #0]
}
 8006e94:	bf00      	nop
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20004758 	.word	0x20004758
 8006e9c:	2000475c 	.word	0x2000475c
 8006ea0:	20004760 	.word	0x20004760
 8006ea4:	2000476c 	.word	0x2000476c
 8006ea8:	20004764 	.word	0x20004764
 8006eac:	20000010 	.word	0x20000010

08006eb0 <process_button_state>:
 * @param[enum Btn_Status] Estado del botón
 *
 * @return Función del tipo void.
 */
void process_button_state(enum Btn_Status estadoButton)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	71fb      	strb	r3, [r7, #7]
	switch (estadoButton) {
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d84a      	bhi.n	8006f56 <process_button_state+0xa6>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <process_button_state+0x18>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006edd 	.word	0x08006edd
 8006ecc:	08006ee3 	.word	0x08006ee3
 8006ed0:	08006ee9 	.word	0x08006ee9
 8006ed4:	08006ef7 	.word	0x08006ef7
 8006ed8:	08006efd 	.word	0x08006efd
			case SHORTPRESSED:
				resetear_parametros();
 8006edc:	f7ff ffb8 	bl	8006e50 <resetear_parametros>
				break;
 8006ee0:	e040      	b.n	8006f64 <process_button_state+0xb4>
			case LONGPRESSED:
				resetear_parametros();
 8006ee2:	f7ff ffb5 	bl	8006e50 <resetear_parametros>
				break;
 8006ee6:	e03d      	b.n	8006f64 <process_button_state+0xb4>
			case BLOCKED:
				if (rising_flag)
 8006ee8:	4b20      	ldr	r3, [pc, #128]	; (8006f6c <process_button_state+0xbc>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d036      	beq.n	8006f5e <process_button_state+0xae>
					resetear_parametros();
 8006ef0:	f7ff ffae 	bl	8006e50 <resetear_parametros>
				break;
 8006ef4:	e033      	b.n	8006f5e <process_button_state+0xae>
			case UNBLOCKED:
				resetear_parametros();
 8006ef6:	f7ff ffab 	bl	8006e50 <resetear_parametros>
				break;
 8006efa:	e033      	b.n	8006f64 <process_button_state+0xb4>
			case NONE:
				if (100 < BtnPressed_Time && BtnPressed_Time < 2000)
 8006efc:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <process_button_state+0xc0>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b64      	cmp	r3, #100	; 0x64
 8006f02:	dd08      	ble.n	8006f16 <process_button_state+0x66>
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <process_button_state+0xc0>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f0c:	da03      	bge.n	8006f16 <process_button_state+0x66>
					Btn_State = SHORTPRESSED;
 8006f0e:	4b19      	ldr	r3, [pc, #100]	; (8006f74 <process_button_state+0xc4>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	e01e      	b.n	8006f54 <process_button_state+0xa4>

				else if (2000 < BtnPressed_Time && BtnPressed_Time < 8000)
 8006f16:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <process_button_state+0xc0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f1e:	dd08      	ble.n	8006f32 <process_button_state+0x82>
 8006f20:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <process_button_state+0xc0>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006f28:	da03      	bge.n	8006f32 <process_button_state+0x82>
					Btn_State = LONGPRESSED;
 8006f2a:	4b12      	ldr	r3, [pc, #72]	; (8006f74 <process_button_state+0xc4>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	e010      	b.n	8006f54 <process_button_state+0xa4>

				else if (RisingUp_Time != 0
 8006f32:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <process_button_state+0xc8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d013      	beq.n	8006f62 <process_button_state+0xb2>
						&& ((HAL_GetTick() / portTICK_PERIOD_MS - RisingUp_Time)
 8006f3a:	f7fa f889 	bl	8001050 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <process_button_state+0xc8>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006f4a:	d30a      	bcc.n	8006f62 <process_button_state+0xb2>
								>= 8000))
					Btn_State = BLOCKED;
 8006f4c:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <process_button_state+0xc4>)
 8006f4e:	2202      	movs	r2, #2
 8006f50:	701a      	strb	r2, [r3, #0]
				break;
 8006f52:	e006      	b.n	8006f62 <process_button_state+0xb2>
 8006f54:	e005      	b.n	8006f62 <process_button_state+0xb2>
			default:
				Btn_State = NONE;
 8006f56:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <process_button_state+0xc4>)
 8006f58:	2204      	movs	r2, #4
 8006f5a:	701a      	strb	r2, [r3, #0]
				break;
 8006f5c:	e002      	b.n	8006f64 <process_button_state+0xb4>
				break;
 8006f5e:	bf00      	nop
 8006f60:	e000      	b.n	8006f64 <process_button_state+0xb4>
				break;
 8006f62:	bf00      	nop

			}
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	2000476c 	.word	0x2000476c
 8006f70:	20004760 	.word	0x20004760
 8006f74:	20004764 	.word	0x20004764
 8006f78:	20004758 	.word	0x20004758

08006f7c <vTask_OA_BTN>:
 *
 * @param[void *] Puntero a parámetros.
 *
 * @return Función del tipo void.
 */
void vTask_OA_BTN(void *pvParameters) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
	vPrintString(OABTN_WelcomeMsg);
 8006f84:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <vTask_OA_BTN+0x60>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff ff11 	bl	8006db0 <vPrintString>

		/*
		 * La resta que determina el tiempo que llevó presionado el botón se realiza
		 * cuando se ha detectado un flanco ascendete del botón de usuario.
		 */
		if (rising_flag)
 8006f8e:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <vTask_OA_BTN+0x64>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <vTask_OA_BTN+0x2a>
			BtnPressed_Time = FallingDown_Time - RisingUp_Time;
 8006f96:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <vTask_OA_BTN+0x68>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b13      	ldr	r3, [pc, #76]	; (8006fe8 <vTask_OA_BTN+0x6c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4b12      	ldr	r3, [pc, #72]	; (8006fec <vTask_OA_BTN+0x70>)
 8006fa4:	601a      	str	r2, [r3, #0]
		 * LONGPRESSED: El botón fue presionado entre 2000 y 8000 ms.
		 * BLOCKED: El botón se mantuvo presionado más de 8000 ms.
		 * UNBLOCKED: El botón estuvo en estado BLOCKED y posteriormente se liberó.
		 * NONE: El botón no fue presionado.
		 */
		process_button_state(Btn_State);
 8006fa6:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <vTask_OA_BTN+0x74>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff ff80 	bl	8006eb0 <process_button_state>

		/*
		 * Se encola la notificación del estado del botón
		 * objeto activo para ser leída por el objeto activo led.
		 */
		sd = xQueueSend(QueueBtnStatus, &Btn_State, portMAX_DELAY);
 8006fb0:	4b10      	ldr	r3, [pc, #64]	; (8006ff4 <vTask_OA_BTN+0x78>)
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fba:	490d      	ldr	r1, [pc, #52]	; (8006ff0 <vTask_OA_BTN+0x74>)
 8006fbc:	f7fe f8aa 	bl	8005114 <xQueueGenericSend>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	4a0d      	ldr	r2, [pc, #52]	; (8006ff8 <vTask_OA_BTN+0x7c>)
 8006fc4:	6013      	str	r3, [r2, #0]
		//Revisar que el mensaje se halla encolado correctamente.
		assert(sd != 0);
 8006fc6:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <vTask_OA_BTN+0x7c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1df      	bne.n	8006f8e <vTask_OA_BTN+0x12>
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <vTask_OA_BTN+0x80>)
 8006fd0:	4a0b      	ldr	r2, [pc, #44]	; (8007000 <vTask_OA_BTN+0x84>)
 8006fd2:	2197      	movs	r1, #151	; 0x97
 8006fd4:	480b      	ldr	r0, [pc, #44]	; (8007004 <vTask_OA_BTN+0x88>)
 8006fd6:	f000 fc1d 	bl	8007814 <__assert_func>
 8006fda:	bf00      	nop
 8006fdc:	20000024 	.word	0x20000024
 8006fe0:	2000476c 	.word	0x2000476c
 8006fe4:	2000475c 	.word	0x2000475c
 8006fe8:	20004758 	.word	0x20004758
 8006fec:	20004760 	.word	0x20004760
 8006ff0:	20004764 	.word	0x20004764
 8006ff4:	20004754 	.word	0x20004754
 8006ff8:	20004768 	.word	0x20004768
 8006ffc:	08008acc 	.word	0x08008acc
 8007000:	08008c18 	.word	0x08008c18
 8007004:	08008ad4 	.word	0x08008ad4

08007008 <vTask_OA_LEDS>:
 *
 * @param[void *] Puntero a parámetros.
 *
 * @return Función del tipo void.
 */
void vTask_OA_LEDS(void *pvParameters) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]

	BaseType_t rv; //Variable para verificar el correcto encolado de la notificación
	enum Btn_Status Received; //Variable que almacena la notificación de la cola que contiene el estado del botón
	const TickType_t xDelay10000ms = pdMS_TO_TICKS(10000UL); //xTicksToWait de la cola
 8007010:	f242 7310 	movw	r3, #10000	; 0x2710
 8007014:	617b      	str	r3, [r7, #20]
	vPrintString(OALEDS_WelcomeMsg);
 8007016:	4b3e      	ldr	r3, [pc, #248]	; (8007110 <vTask_OA_LEDS+0x108>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff fec8 	bl	8006db0 <vPrintString>
	while (1) {

		/*
		 * Recibe el estado del botón de la cola y lo envía a la variable Received
		 */
		rv = xQueueReceive(QueueBtnStatus, &Received, xDelay10000ms);
 8007020:	4b3c      	ldr	r3, [pc, #240]	; (8007114 <vTask_OA_LEDS+0x10c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f107 010f 	add.w	r1, r7, #15
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4618      	mov	r0, r3
 800702c:	f7fe f970 	bl	8005310 <xQueueReceive>
 8007030:	4603      	mov	r3, r0
 8007032:	613b      	str	r3, [r7, #16]
		 * UNBLOCKED: Apagar el LED verde y el LED rojo.
		 * NONE: No realiza nada.
		 *
		 */

		switch (Received) {
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	2b04      	cmp	r3, #4
 8007038:	d860      	bhi.n	80070fc <vTask_OA_LEDS+0xf4>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <vTask_OA_LEDS+0x38>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007055 	.word	0x08007055
 8007044:	0800708b 	.word	0x0800708b
 8007048:	080070c1 	.word	0x080070c1
 800704c:	080070df 	.word	0x080070df
 8007050:	0800710b 	.word	0x0800710b
		case SHORTPRESSED: // Toggle Led Verde
			vPrintString(messages[Received]);
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	461a      	mov	r2, r3
 8007058:	4b2f      	ldr	r3, [pc, #188]	; (8007118 <vTask_OA_LEDS+0x110>)
 800705a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff fea6 	bl	8006db0 <vPrintString>
			eboard_led_green(!eboard_gpio_read(EBOARD_GPIO_LEDG));
 8007064:	2001      	movs	r0, #1
 8007066:	f000 f993 	bl	8007390 <eboard_gpio_read>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	bf14      	ite	ne
 8007070:	2301      	movne	r3, #1
 8007072:	2300      	moveq	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	f083 0301 	eor.w	r3, r3, #1
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	b2db      	uxtb	r3, r3
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f9ae 	bl	80073e4 <eboard_led_green>
			break;
 8007088:	e040      	b.n	800710c <vTask_OA_LEDS+0x104>
		case LONGPRESSED: // Toggle Led Rojo
			vPrintString(messages[Received]);
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	461a      	mov	r2, r3
 800708e:	4b22      	ldr	r3, [pc, #136]	; (8007118 <vTask_OA_LEDS+0x110>)
 8007090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff fe8b 	bl	8006db0 <vPrintString>
			eboard_led_red(!eboard_gpio_read(EBOARD_GPIO_LEDR));
 800709a:	2000      	movs	r0, #0
 800709c:	f000 f978 	bl	8007390 <eboard_gpio_read>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	bf14      	ite	ne
 80070a6:	2301      	movne	r3, #1
 80070a8:	2300      	moveq	r3, #0
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f083 0301 	eor.w	r3, r3, #1
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f985 	bl	80073c8 <eboard_led_red>
			break;
 80070be:	e025      	b.n	800710c <vTask_OA_LEDS+0x104>
		case BLOCKED: // Encender los dos Leds
			vPrintString(messages[Received]);
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	461a      	mov	r2, r3
 80070c4:	4b14      	ldr	r3, [pc, #80]	; (8007118 <vTask_OA_LEDS+0x110>)
 80070c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fe70 	bl	8006db0 <vPrintString>
			eboard_led_green(true);
 80070d0:	2001      	movs	r0, #1
 80070d2:	f000 f987 	bl	80073e4 <eboard_led_green>
			eboard_led_red(true);
 80070d6:	2001      	movs	r0, #1
 80070d8:	f000 f976 	bl	80073c8 <eboard_led_red>
			break;
 80070dc:	e016      	b.n	800710c <vTask_OA_LEDS+0x104>
		case UNBLOCKED: //Apagar los dos leds
			vPrintString(messages[Received]);
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	461a      	mov	r2, r3
 80070e2:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <vTask_OA_LEDS+0x110>)
 80070e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff fe61 	bl	8006db0 <vPrintString>
			eboard_led_green(false);
 80070ee:	2000      	movs	r0, #0
 80070f0:	f000 f978 	bl	80073e4 <eboard_led_green>
			eboard_led_red(false);
 80070f4:	2000      	movs	r0, #0
 80070f6:	f000 f967 	bl	80073c8 <eboard_led_red>
			break;
 80070fa:	e007      	b.n	800710c <vTask_OA_LEDS+0x104>
		case NONE: //No se presionó el botón
			//No realiza nada
			break;
		default:
			eboard_led_green(false);
 80070fc:	2000      	movs	r0, #0
 80070fe:	f000 f971 	bl	80073e4 <eboard_led_green>
			eboard_led_red(false);
 8007102:	2000      	movs	r0, #0
 8007104:	f000 f960 	bl	80073c8 <eboard_led_red>
			break;
 8007108:	e000      	b.n	800710c <vTask_OA_LEDS+0x104>
			break;
 800710a:	bf00      	nop
		rv = xQueueReceive(QueueBtnStatus, &Received, xDelay10000ms);
 800710c:	e788      	b.n	8007020 <vTask_OA_LEDS+0x18>
 800710e:	bf00      	nop
 8007110:	20000028 	.word	0x20000028
 8007114:	20004754 	.word	0x20004754
 8007118:	20000010 	.word	0x20000010

0800711c <app_init>:
		                    "- Anthony  Maisincho              N°SIU e2011 \r\n"
		                    "- Jesus    Gonzales               N°SIU e2006\r\n";
//Inicia las tareas de los OA

	/* App Initialization */
void app_init( void ){
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af02      	add	r7, sp, #8
		  	vPrintString( pcTextForMain );
 8007122:	4b2e      	ldr	r3, [pc, #184]	; (80071dc <app_init+0xc0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff fe42 	bl	8006db0 <vPrintString>

		    // drivers
		    {
		      eboard_init();
 800712c:	f000 f99c 	bl	8007468 <eboard_init>
		    }

			/*Creación de colas*/
		  	QueueBtnStatus = xQueueCreate(10,sizeof(Btn_State));
 8007130:	2200      	movs	r2, #0
 8007132:	2101      	movs	r1, #1
 8007134:	200a      	movs	r0, #10
 8007136:	f7fd ff8f 	bl	8005058 <xQueueGenericCreate>
 800713a:	4603      	mov	r3, r0
 800713c:	4a28      	ldr	r2, [pc, #160]	; (80071e0 <app_init+0xc4>)
 800713e:	6013      	str	r3, [r2, #0]


			/* Check the queues was created successfully */
			configASSERT( QueueBtnStatus != NULL );
 8007140:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <app_init+0xc4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10a      	bne.n	800715e <app_init+0x42>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	60bb      	str	r3, [r7, #8]
}
 800715a:	bf00      	nop
 800715c:	e7fe      	b.n	800715c <app_init+0x40>


			/* We want this queue to be viewable in a RTOS kernel aware debugger, so register it. */
			vQueueAddToRegistry( QueueBtnStatus, "QueueBtnStatus" );
 800715e:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <app_init+0xc4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4920      	ldr	r1, [pc, #128]	; (80071e4 <app_init+0xc8>)
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe fac3 	bl	80056f0 <vQueueAddToRegistry>


			BaseType_t ret;

			/* Task OA_BTN thread at priority 2 */
			ret = xTaskCreate(vTask_OA_BTN, /* Pointer to the function thats implement the task. */
 800716a:	4b1f      	ldr	r3, [pc, #124]	; (80071e8 <app_init+0xcc>)
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	2302      	movs	r3, #2
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	2300      	movs	r3, #0
 8007174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007178:	491c      	ldr	r1, [pc, #112]	; (80071ec <app_init+0xd0>)
 800717a:	481d      	ldr	r0, [pc, #116]	; (80071f0 <app_init+0xd4>)
 800717c:	f7fe fb3f 	bl	80057fe <xTaskCreate>
 8007180:	60f8      	str	r0, [r7, #12]
			NULL, /* We are not using the task parameter.		*/
			(tskIDLE_PRIORITY + 2UL), /* This task will run at priority 1. 		*/
			&vTask_OA_BTNHandle); /* We are using a variable as task handle.	*/

			/* Check the task was created successfully. */
			configASSERT(ret == pdPASS);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d00a      	beq.n	800719e <app_init+0x82>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	607b      	str	r3, [r7, #4]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <app_init+0x80>

			/* Task B thread at priority 2 */
			ret = xTaskCreate(vTask_OA_LEDS, /* Pointer to the function thats implement the task. */
 800719e:	4b15      	ldr	r3, [pc, #84]	; (80071f4 <app_init+0xd8>)
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	2302      	movs	r3, #2
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	2300      	movs	r3, #0
 80071a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071ac:	4912      	ldr	r1, [pc, #72]	; (80071f8 <app_init+0xdc>)
 80071ae:	4813      	ldr	r0, [pc, #76]	; (80071fc <app_init+0xe0>)
 80071b0:	f7fe fb25 	bl	80057fe <xTaskCreate>
 80071b4:	60f8      	str	r0, [r7, #12]
			NULL, /* We are not using the task parameter.		*/
			(tskIDLE_PRIORITY + 2UL), /* This task will run at priority 1. 		*/
			&vTask_OA_LEDSHandle); /* We are using a variable as task handle.	*/

			/* Check the task was created successfully. */
			configASSERT(ret == pdPASS);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d00a      	beq.n	80071d2 <app_init+0xb6>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	603b      	str	r3, [r7, #0]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <app_init+0xb4>

			return;
 80071d2:	bf00      	nop

}
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	2000002c 	.word	0x2000002c
 80071e0:	20004754 	.word	0x20004754
 80071e4:	08008bd4 	.word	0x08008bd4
 80071e8:	20004774 	.word	0x20004774
 80071ec:	08008be4 	.word	0x08008be4
 80071f0:	08006f7d 	.word	0x08006f7d
 80071f4:	20004778 	.word	0x20004778
 80071f8:	08008bf0 	.word	0x08008bf0
 80071fc:	08007009 	.word	0x08007009

08007200 <euart_hal_receive>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void euart_hal_receive(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  HAL_UARTEx_ReceiveToIdle_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	b29b      	uxth	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f7fc facf 	bl	80037b8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <euart_hal_send>:

void euart_hal_send(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	b29b      	uxth	r3, r3
 8007232:	461a      	mov	r2, r3
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7fc fa79 	bl	800372e <HAL_UART_Transmit_IT>
}
 800723c:	bf00      	nop
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_error((void*)huart);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f8df 	bl	8007410 <eboard_hal_port_uart_error>
  // TODO: ¿?
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	807b      	strh	r3, [r7, #2]
  eboard_hal_port_uart_rx_irq((void*)huart, size);
 8007266:	887b      	ldrh	r3, [r7, #2]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8da 	bl	8007424 <eboard_hal_port_uart_rx_irq>
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_tx_irq((void*)huart);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f8e1 	bl	8007448 <eboard_hal_port_uart_tx_irq>
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <eboard_hal_port_gpio_write>:

void eboard_hal_port_gpio_write(void *handle, bool value)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  driver_gpio_descriptor_t_ *hgpio = (driver_gpio_descriptor_t_*)handle;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(hgpio->GPIOx, hgpio->GPIO_Pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6858      	ldr	r0, [r3, #4]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	891b      	ldrh	r3, [r3, #8]
 80072a6:	78fa      	ldrb	r2, [r7, #3]
 80072a8:	4619      	mov	r1, r3
 80072aa:	f7fa fa21 	bl	80016f0 <HAL_GPIO_WritePin>
}
 80072ae:	bf00      	nop
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <eboard_hal_port_gpio_read>:

bool eboard_hal_port_gpio_read(void *handle)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  driver_gpio_descriptor_t_ *hgpio = (driver_gpio_descriptor_t_*)handle;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	60fb      	str	r3, [r7, #12]
  GPIO_PinState state = HAL_GPIO_ReadPin(hgpio->GPIOx, hgpio->GPIO_Pin);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	891b      	ldrh	r3, [r3, #8]
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fa f9f7 	bl	80016c0 <HAL_GPIO_ReadPin>
 80072d2:	4603      	mov	r3, r0
 80072d4:	72fb      	strb	r3, [r7, #11]
  return (GPIO_PIN_SET == state);
 80072d6:	7afb      	ldrb	r3, [r7, #11]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	bf0c      	ite	eq
 80072dc:	2301      	moveq	r3, #1
 80072de:	2300      	movne	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <eboard_uart_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void eboard_uart_init(void* phuart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	6078      	str	r0, [r7, #4]
  euart_init(pheuart_, phuart, tx_buffer_, RB_TX_BUFFER_SIZE_, rx_buffer_, RB_RX_BUFFER_SIZE_);
 80072f4:	4807      	ldr	r0, [pc, #28]	; (8007314 <eboard_uart_init+0x28>)
 80072f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	4b06      	ldr	r3, [pc, #24]	; (8007318 <eboard_uart_init+0x2c>)
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007304:	4a05      	ldr	r2, [pc, #20]	; (800731c <eboard_uart_init+0x30>)
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	f000 fa22 	bl	8007750 <euart_init>
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20004c7c 	.word	0x20004c7c
 8007318:	20004b7c 	.word	0x20004b7c
 800731c:	2000477c 	.word	0x2000477c

08007320 <eboard_gpio_init>:

void eboard_gpio_init(eboard_gpio_idx_t idx, void* hgpio)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	6039      	str	r1, [r7, #0]
 800732a:	71fb      	strb	r3, [r7, #7]
	gpios_[idx].hgpio = hgpio;
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	4905      	ldr	r1, [pc, #20]	; (8007344 <eboard_gpio_init+0x24>)
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000064 	.word	0x20000064

08007348 <eboard_gpio_write>:

void eboard_gpio_write(eboard_gpio_idx_t idx, bool value)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	460a      	mov	r2, r1
 8007352:	71fb      	strb	r3, [r7, #7]
 8007354:	4613      	mov	r3, r2
 8007356:	71bb      	strb	r3, [r7, #6]
  if(EBOARD_GPIO__CNT <= idx)
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d810      	bhi.n	8007380 <eboard_gpio_write+0x38>
  {
    return;
  }

  eboard_gpio_descriptor_t_* hgpio = gpios_ + idx;
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	4a0a      	ldr	r2, [pc, #40]	; (800738c <eboard_gpio_write+0x44>)
 8007364:	4413      	add	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  if(hgpio->input)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	791b      	ldrb	r3, [r3, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d109      	bne.n	8007384 <eboard_gpio_write+0x3c>
  {
    return;
  }

  eboard_hal_port_gpio_write((void*)hgpio->hgpio, value);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	79ba      	ldrb	r2, [r7, #6]
 8007376:	4611      	mov	r1, r2
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff ff88 	bl	800728e <eboard_hal_port_gpio_write>
 800737e:	e002      	b.n	8007386 <eboard_gpio_write+0x3e>
    return;
 8007380:	bf00      	nop
 8007382:	e000      	b.n	8007386 <eboard_gpio_write+0x3e>
    return;
 8007384:	bf00      	nop
}
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20000064 	.word	0x20000064

08007390 <eboard_gpio_read>:

bool eboard_gpio_read(eboard_gpio_idx_t idx)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	4603      	mov	r3, r0
 8007398:	71fb      	strb	r3, [r7, #7]
  if(EBOARD_GPIO__CNT <= idx)
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	2b03      	cmp	r3, #3
 800739e:	d901      	bls.n	80073a4 <eboard_gpio_read+0x14>
  {
    return false;
 80073a0:	2300      	movs	r3, #0
 80073a2:	e00a      	b.n	80073ba <eboard_gpio_read+0x2a>
  }

  eboard_gpio_descriptor_t_* hgpio = gpios_ + idx;
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	4a06      	ldr	r2, [pc, #24]	; (80073c4 <eboard_gpio_read+0x34>)
 80073aa:	4413      	add	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
  return eboard_hal_port_gpio_read((void*)hgpio->hgpio);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff ff7f 	bl	80072b6 <eboard_hal_port_gpio_read>
 80073b8:	4603      	mov	r3, r0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000064 	.word	0x20000064

080073c8 <eboard_led_red>:

void eboard_led_red(bool value)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	71fb      	strb	r3, [r7, #7]
  eboard_gpio_write(EBOARD_GPIO_LEDR, value);
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	4619      	mov	r1, r3
 80073d6:	2000      	movs	r0, #0
 80073d8:	f7ff ffb6 	bl	8007348 <eboard_gpio_write>
}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <eboard_led_green>:

void eboard_led_green(bool value)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	71fb      	strb	r3, [r7, #7]
  eboard_gpio_write(EBOARD_GPIO_LEDG, value);
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	4619      	mov	r1, r3
 80073f2:	2001      	movs	r0, #1
 80073f4:	f7ff ffa8 	bl	8007348 <eboard_gpio_write>
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <eboard_switch>:
{
  eboard_gpio_write(EBOARD_GPIO_LEDB, value);
}

bool eboard_switch(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  return eboard_gpio_read(EBOARD_GPIO_SW);
 8007404:	2003      	movs	r0, #3
 8007406:	f7ff ffc3 	bl	8007390 <eboard_gpio_read>
 800740a:	4603      	mov	r3, r0
}
 800740c:	4618      	mov	r0, r3
 800740e:	bd80      	pop	{r7, pc}

08007410 <eboard_hal_port_uart_error>:
  eboard_uart_swrite_line((elog_msg_len < (ELOG_MAXLEN - 1)) ? "" : " ...");
}

// port uart
void eboard_hal_port_uart_error(void* huart)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  // TODO: ¿?
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <eboard_hal_port_uart_rx_irq>:

void eboard_hal_port_uart_rx_irq(void* huart, uint16_t size)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	807b      	strh	r3, [r7, #2]
  euart_rx_irq(pheuart_, huart, size);
 8007430:	4804      	ldr	r0, [pc, #16]	; (8007444 <eboard_hal_port_uart_rx_irq+0x20>)
 8007432:	887b      	ldrh	r3, [r7, #2]
 8007434:	461a      	mov	r2, r3
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	f000 f9ac 	bl	8007794 <euart_rx_irq>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20004c7c 	.word	0x20004c7c

08007448 <eboard_hal_port_uart_tx_irq>:

void eboard_hal_port_uart_tx_irq(void* huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  euart_tx_irq(pheuart_, (void*)huart);
 8007450:	4b04      	ldr	r3, [pc, #16]	; (8007464 <eboard_hal_port_uart_tx_irq+0x1c>)
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f9bc 	bl	80077d2 <euart_tx_irq>
}
 800745a:	bf00      	nop
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20004c7c 	.word	0x20004c7c

08007468 <eboard_init>:

void eboard_init(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
  eboard_uart_init((void*)p_huart_selected_);
 800746e:	4b10      	ldr	r3, [pc, #64]	; (80074b0 <eboard_init+0x48>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff ff3a 	bl	80072ec <eboard_uart_init>

  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 8007478:	2300      	movs	r3, #0
 800747a:	71fb      	strb	r3, [r7, #7]
 800747c:	e00f      	b.n	800749e <eboard_init+0x36>
  {
    eboard_gpio_init(idx, (void*)(driver_gpios_ + idx));
 800747e:	79fa      	ldrb	r2, [r7, #7]
 8007480:	4613      	mov	r3, r2
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	461a      	mov	r2, r3
 800748a:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <eboard_init+0x4c>)
 800748c:	441a      	add	r2, r3
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff ff44 	bl	8007320 <eboard_gpio_init>
  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	3301      	adds	r3, #1
 800749c:	71fb      	strb	r3, [r7, #7]
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d9ec      	bls.n	800747e <eboard_init+0x16>
  }
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20000060 	.word	0x20000060
 80074b4:	20000030 	.word	0x20000030

080074b8 <inc_idex_>:
 */

#include "eringbuffer.h"

inline static void inc_idex_(size_t *index, size_t size)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  *index += 1;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	601a      	str	r2, [r3, #0]
  if(size <= *index)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d802      	bhi.n	80074dc <inc_idex_+0x24>
  {
    *index = 0;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
  }
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <write_byte_>:

inline static void write_byte_(eringbuffer_t *rb, uint8_t byte)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  rb->buffer[rb->w] = byte;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->w), rb->size);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f103 020c 	add.w	r2, r3, #12
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	4619      	mov	r1, r3
 800750e:	4610      	mov	r0, r2
 8007510:	f7ff ffd2 	bl	80074b8 <inc_idex_>
  rb->len++;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	609a      	str	r2, [r3, #8]
}
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <read_byte_>:

inline static void read_byte_(eringbuffer_t *rb, uint8_t *byte)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b082      	sub	sp, #8
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  *byte = rb->buffer[rb->r];
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	4413      	add	r3, r2
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->r), rb->size);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f103 0210 	add.w	r2, r3, #16
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f7ff ffb3 	bl	80074b8 <inc_idex_>
  rb->len--;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	1e5a      	subs	r2, r3, #1
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	609a      	str	r2, [r3, #8]
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <eringbuffer_init>:

void eringbuffer_init(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  rb->buffer = buffer;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	601a      	str	r2, [r3, #0]
  rb->size = size;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	605a      	str	r2, [r3, #4]
  rb->len = 0;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	609a      	str	r2, [r3, #8]
  rb->w = 0;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	60da      	str	r2, [r3, #12]
  rb->r = 0;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	611a      	str	r2, [r3, #16]
}
 800758e:	bf00      	nop
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <eringbuffer_len>:
{
  return rb->size;
}

size_t eringbuffer_len(const eringbuffer_t *rb)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  return rb->len;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <eringbuffer_free>:

size_t eringbuffer_free(const eringbuffer_t *rb)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  return rb->size - rb->len;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	1ad3      	subs	r3, r2, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <eringbuffer_is_full>:

bool eringbuffer_is_full(const eringbuffer_t *rb)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_free(rb));
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff ffea 	bl	80075b2 <eringbuffer_free>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	bf0c      	ite	eq
 80075e4:	2301      	moveq	r3, #1
 80075e6:	2300      	movne	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <eringbuffer_is_empty>:

bool eringbuffer_is_empty(const eringbuffer_t *rb)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_len(rb));
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff ffcd 	bl	800759a <eringbuffer_len>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	bf0c      	ite	eq
 8007606:	2301      	moveq	r3, #1
 8007608:	2300      	movne	r3, #0
 800760a:	b2db      	uxtb	r3, r3
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <eringbuffer_write_byte>:

size_t eringbuffer_write_byte(eringbuffer_t *rb, uint8_t byte)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  if(eringbuffer_is_full(rb))
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff ffd5 	bl	80075d0 <eringbuffer_is_full>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <eringbuffer_write_byte+0x1c>
  {
    return 0;
 800762c:	2300      	movs	r3, #0
 800762e:	e005      	b.n	800763c <eringbuffer_write_byte+0x28>
  }
  write_byte_(rb, byte);
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff ff57 	bl	80074e8 <write_byte_>
  return 1;
 800763a:	2301      	movs	r3, #1
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <eringbuffer_write>:

size_t eringbuffer_write(eringbuffer_t *rb, const uint8_t *buffer, size_t size)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e00d      	b.n	8007672 <eringbuffer_write+0x2e>
  {
    if(0 == eringbuffer_write_byte(rb, buffer[i]))
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	4413      	add	r3, r2
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	4619      	mov	r1, r3
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7ff ffd7 	bl	8007614 <eringbuffer_write_byte>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d007      	beq.n	800767c <eringbuffer_write+0x38>
  for(i = 0; i < size; ++i)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	3301      	adds	r3, #1
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	429a      	cmp	r2, r3
 8007678:	d3ed      	bcc.n	8007656 <eringbuffer_write+0x12>
 800767a:	e000      	b.n	800767e <eringbuffer_write+0x3a>
    {
      break;
 800767c:	bf00      	nop
    }
  }
  return i;
 800767e:	697b      	ldr	r3, [r7, #20]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <eringbuffer_read_byte>:

size_t eringbuffer_read_byte(eringbuffer_t *rb, uint8_t *byte)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  if(eringbuffer_is_empty(rb))
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff ffad 	bl	80075f2 <eringbuffer_is_empty>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <eringbuffer_read_byte+0x1a>
  {
    return 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	e004      	b.n	80076ac <eringbuffer_read_byte+0x24>
  }
  read_byte_(rb, byte);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff ff3e 	bl	8007526 <read_byte_>
  return 1;
 80076aa:	2301      	movs	r3, #1
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <eringbuffer_read>:

size_t eringbuffer_read(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	e00c      	b.n	80076e0 <eringbuffer_read+0x2c>
  {
    if(0 == eringbuffer_read_byte(rb, buffer + i))
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	4413      	add	r3, r2
 80076cc:	4619      	mov	r1, r3
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff ffda 	bl	8007688 <eringbuffer_read_byte>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <eringbuffer_read+0x36>
  for(i = 0; i < size; ++i)
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	3301      	adds	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d3ee      	bcc.n	80076c6 <eringbuffer_read+0x12>
 80076e8:	e000      	b.n	80076ec <eringbuffer_read+0x38>
    {
      break;
 80076ea:	bf00      	nop
    }
  }
  return i;
 80076ec:	697b      	ldr	r3, [r7, #20]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <hal_receive_>:
#define pTX_BUFFER      (phandle->tx.pbuffer)
#define pRX_RB          (&(phandle->rx.rb))
#define pRX_BUFFER      (phandle->rx.pbuffer)

void hal_receive_(euart_t *phandle)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  euart_hal_receive(phandle->phardware_handle, pRX_BUFFER, EUART_HAL_BUFFER_SIZE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3340      	adds	r3, #64	; 0x40
 8007706:	2210      	movs	r2, #16
 8007708:	4619      	mov	r1, r3
 800770a:	f7ff fd79 	bl	8007200 <euart_hal_receive>
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <hal_send_>:

void hal_send_(euart_t *phandle)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  size_t tx_len = eringbuffer_read(pTX_RB, pTX_BUFFER, EUART_HAL_BUFFER_SIZE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f103 0008 	add.w	r0, r3, #8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	331c      	adds	r3, #28
 8007728:	2210      	movs	r2, #16
 800772a:	4619      	mov	r1, r3
 800772c:	f7ff ffc2 	bl	80076b4 <eringbuffer_read>
 8007730:	60f8      	str	r0, [r7, #12]
  euart_hal_send(phandle->phardware_handle, pTX_BUFFER, tx_len);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	331c      	adds	r3, #28
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4619      	mov	r1, r3
 800773e:	f7ff fd70 	bl	8007222 <euart_hal_send>
  phandle->tx_free = false;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	711a      	strb	r2, [r3, #4]
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <euart_init>:

void euart_init(euart_t *phandle, void* phardware_handle, uint8_t* ptx_buffer, size_t tx_buffer_size, uint8_t* prx_buffer, size_t rx_buffer_size)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
  phandle->phardware_handle = phardware_handle;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	601a      	str	r2, [r3, #0]
  eringbuffer_init(pTX_RB, ptx_buffer, tx_buffer_size);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3308      	adds	r3, #8
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff fef9 	bl	8007564 <eringbuffer_init>
  eringbuffer_init(pRX_RB, prx_buffer, rx_buffer_size);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	332c      	adds	r3, #44	; 0x2c
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	69b9      	ldr	r1, [r7, #24]
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fef2 	bl	8007564 <eringbuffer_init>
  phandle->tx_free = true;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	711a      	strb	r2, [r3, #4]

  hal_receive_(phandle);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff ffb5 	bl	80076f6 <hal_receive_>
}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <euart_rx_irq>:
{
  return eringbuffer_read(pRX_RB, buffer, size);
}

void euart_rx_irq(euart_t *phandle, void *phardware_handle, size_t size)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  if(phandle->phardware_handle != phardware_handle)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d10f      	bne.n	80077ca <euart_rx_irq+0x36>
  {
    return;
  }

  if(0 < size)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d008      	beq.n	80077c2 <euart_rx_irq+0x2e>
  {
    eringbuffer_write(pRX_RB, pRX_BUFFER, size);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3340      	adds	r3, #64	; 0x40
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4619      	mov	r1, r3
 80077be:	f7ff ff41 	bl	8007644 <eringbuffer_write>
  }
  hal_receive_(phandle);
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff ff97 	bl	80076f6 <hal_receive_>
 80077c8:	e000      	b.n	80077cc <euart_rx_irq+0x38>
    return;
 80077ca:	bf00      	nop
}
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <euart_tx_irq>:

void euart_tx_irq(euart_t *phandle, void *phardware_handle)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  phandle->tx_free = true;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	711a      	strb	r2, [r3, #4]
  if(phandle->phardware_handle != phardware_handle)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d10e      	bne.n	800780a <euart_tx_irq+0x38>
  {
    return;
  }

  if(!eringbuffer_is_empty(pTX_RB))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3308      	adds	r3, #8
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fefe 	bl	80075f2 <eringbuffer_is_empty>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f083 0301 	eor.w	r3, r3, #1
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <euart_tx_irq+0x3a>
  {
    hal_send_(phandle);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff ff87 	bl	8007716 <hal_send_>
 8007808:	e000      	b.n	800780c <euart_tx_irq+0x3a>
    return;
 800780a:	bf00      	nop
  }
}
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <__assert_func>:
 8007814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007816:	4614      	mov	r4, r2
 8007818:	461a      	mov	r2, r3
 800781a:	4b09      	ldr	r3, [pc, #36]	; (8007840 <__assert_func+0x2c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4605      	mov	r5, r0
 8007820:	68d8      	ldr	r0, [r3, #12]
 8007822:	b14c      	cbz	r4, 8007838 <__assert_func+0x24>
 8007824:	4b07      	ldr	r3, [pc, #28]	; (8007844 <__assert_func+0x30>)
 8007826:	9100      	str	r1, [sp, #0]
 8007828:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800782c:	4906      	ldr	r1, [pc, #24]	; (8007848 <__assert_func+0x34>)
 800782e:	462b      	mov	r3, r5
 8007830:	f000 f9be 	bl	8007bb0 <fiprintf>
 8007834:	f000 ffa2 	bl	800877c <abort>
 8007838:	4b04      	ldr	r3, [pc, #16]	; (800784c <__assert_func+0x38>)
 800783a:	461c      	mov	r4, r3
 800783c:	e7f3      	b.n	8007826 <__assert_func+0x12>
 800783e:	bf00      	nop
 8007840:	20000084 	.word	0x20000084
 8007844:	08008c25 	.word	0x08008c25
 8007848:	08008c32 	.word	0x08008c32
 800784c:	08008c60 	.word	0x08008c60

08007850 <__errno>:
 8007850:	4b01      	ldr	r3, [pc, #4]	; (8007858 <__errno+0x8>)
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	20000084 	.word	0x20000084

0800785c <__sflush_r>:
 800785c:	898a      	ldrh	r2, [r1, #12]
 800785e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007862:	4605      	mov	r5, r0
 8007864:	0710      	lsls	r0, r2, #28
 8007866:	460c      	mov	r4, r1
 8007868:	d458      	bmi.n	800791c <__sflush_r+0xc0>
 800786a:	684b      	ldr	r3, [r1, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	dc05      	bgt.n	800787c <__sflush_r+0x20>
 8007870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	dc02      	bgt.n	800787c <__sflush_r+0x20>
 8007876:	2000      	movs	r0, #0
 8007878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800787c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800787e:	2e00      	cmp	r6, #0
 8007880:	d0f9      	beq.n	8007876 <__sflush_r+0x1a>
 8007882:	2300      	movs	r3, #0
 8007884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007888:	682f      	ldr	r7, [r5, #0]
 800788a:	602b      	str	r3, [r5, #0]
 800788c:	d032      	beq.n	80078f4 <__sflush_r+0x98>
 800788e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	075a      	lsls	r2, r3, #29
 8007894:	d505      	bpl.n	80078a2 <__sflush_r+0x46>
 8007896:	6863      	ldr	r3, [r4, #4]
 8007898:	1ac0      	subs	r0, r0, r3
 800789a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800789c:	b10b      	cbz	r3, 80078a2 <__sflush_r+0x46>
 800789e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078a0:	1ac0      	subs	r0, r0, r3
 80078a2:	2300      	movs	r3, #0
 80078a4:	4602      	mov	r2, r0
 80078a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078a8:	6a21      	ldr	r1, [r4, #32]
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b0      	blx	r6
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	d106      	bne.n	80078c2 <__sflush_r+0x66>
 80078b4:	6829      	ldr	r1, [r5, #0]
 80078b6:	291d      	cmp	r1, #29
 80078b8:	d82c      	bhi.n	8007914 <__sflush_r+0xb8>
 80078ba:	4a2a      	ldr	r2, [pc, #168]	; (8007964 <__sflush_r+0x108>)
 80078bc:	40ca      	lsrs	r2, r1
 80078be:	07d6      	lsls	r6, r2, #31
 80078c0:	d528      	bpl.n	8007914 <__sflush_r+0xb8>
 80078c2:	2200      	movs	r2, #0
 80078c4:	6062      	str	r2, [r4, #4]
 80078c6:	04d9      	lsls	r1, r3, #19
 80078c8:	6922      	ldr	r2, [r4, #16]
 80078ca:	6022      	str	r2, [r4, #0]
 80078cc:	d504      	bpl.n	80078d8 <__sflush_r+0x7c>
 80078ce:	1c42      	adds	r2, r0, #1
 80078d0:	d101      	bne.n	80078d6 <__sflush_r+0x7a>
 80078d2:	682b      	ldr	r3, [r5, #0]
 80078d4:	b903      	cbnz	r3, 80078d8 <__sflush_r+0x7c>
 80078d6:	6560      	str	r0, [r4, #84]	; 0x54
 80078d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078da:	602f      	str	r7, [r5, #0]
 80078dc:	2900      	cmp	r1, #0
 80078de:	d0ca      	beq.n	8007876 <__sflush_r+0x1a>
 80078e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078e4:	4299      	cmp	r1, r3
 80078e6:	d002      	beq.n	80078ee <__sflush_r+0x92>
 80078e8:	4628      	mov	r0, r5
 80078ea:	f000 f9d1 	bl	8007c90 <_free_r>
 80078ee:	2000      	movs	r0, #0
 80078f0:	6360      	str	r0, [r4, #52]	; 0x34
 80078f2:	e7c1      	b.n	8007878 <__sflush_r+0x1c>
 80078f4:	6a21      	ldr	r1, [r4, #32]
 80078f6:	2301      	movs	r3, #1
 80078f8:	4628      	mov	r0, r5
 80078fa:	47b0      	blx	r6
 80078fc:	1c41      	adds	r1, r0, #1
 80078fe:	d1c7      	bne.n	8007890 <__sflush_r+0x34>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0c4      	beq.n	8007890 <__sflush_r+0x34>
 8007906:	2b1d      	cmp	r3, #29
 8007908:	d001      	beq.n	800790e <__sflush_r+0xb2>
 800790a:	2b16      	cmp	r3, #22
 800790c:	d101      	bne.n	8007912 <__sflush_r+0xb6>
 800790e:	602f      	str	r7, [r5, #0]
 8007910:	e7b1      	b.n	8007876 <__sflush_r+0x1a>
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	e7ad      	b.n	8007878 <__sflush_r+0x1c>
 800791c:	690f      	ldr	r7, [r1, #16]
 800791e:	2f00      	cmp	r7, #0
 8007920:	d0a9      	beq.n	8007876 <__sflush_r+0x1a>
 8007922:	0793      	lsls	r3, r2, #30
 8007924:	680e      	ldr	r6, [r1, #0]
 8007926:	bf08      	it	eq
 8007928:	694b      	ldreq	r3, [r1, #20]
 800792a:	600f      	str	r7, [r1, #0]
 800792c:	bf18      	it	ne
 800792e:	2300      	movne	r3, #0
 8007930:	eba6 0807 	sub.w	r8, r6, r7
 8007934:	608b      	str	r3, [r1, #8]
 8007936:	f1b8 0f00 	cmp.w	r8, #0
 800793a:	dd9c      	ble.n	8007876 <__sflush_r+0x1a>
 800793c:	6a21      	ldr	r1, [r4, #32]
 800793e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007940:	4643      	mov	r3, r8
 8007942:	463a      	mov	r2, r7
 8007944:	4628      	mov	r0, r5
 8007946:	47b0      	blx	r6
 8007948:	2800      	cmp	r0, #0
 800794a:	dc06      	bgt.n	800795a <__sflush_r+0xfe>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	e78e      	b.n	8007878 <__sflush_r+0x1c>
 800795a:	4407      	add	r7, r0
 800795c:	eba8 0800 	sub.w	r8, r8, r0
 8007960:	e7e9      	b.n	8007936 <__sflush_r+0xda>
 8007962:	bf00      	nop
 8007964:	20400001 	.word	0x20400001

08007968 <_fflush_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	690b      	ldr	r3, [r1, #16]
 800796c:	4605      	mov	r5, r0
 800796e:	460c      	mov	r4, r1
 8007970:	b913      	cbnz	r3, 8007978 <_fflush_r+0x10>
 8007972:	2500      	movs	r5, #0
 8007974:	4628      	mov	r0, r5
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	b118      	cbz	r0, 8007982 <_fflush_r+0x1a>
 800797a:	6983      	ldr	r3, [r0, #24]
 800797c:	b90b      	cbnz	r3, 8007982 <_fflush_r+0x1a>
 800797e:	f000 f899 	bl	8007ab4 <__sinit>
 8007982:	4b14      	ldr	r3, [pc, #80]	; (80079d4 <_fflush_r+0x6c>)
 8007984:	429c      	cmp	r4, r3
 8007986:	d11b      	bne.n	80079c0 <_fflush_r+0x58>
 8007988:	686c      	ldr	r4, [r5, #4]
 800798a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0ef      	beq.n	8007972 <_fflush_r+0xa>
 8007992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007994:	07d0      	lsls	r0, r2, #31
 8007996:	d404      	bmi.n	80079a2 <_fflush_r+0x3a>
 8007998:	0599      	lsls	r1, r3, #22
 800799a:	d402      	bmi.n	80079a2 <_fflush_r+0x3a>
 800799c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800799e:	f000 f95e 	bl	8007c5e <__retarget_lock_acquire_recursive>
 80079a2:	4628      	mov	r0, r5
 80079a4:	4621      	mov	r1, r4
 80079a6:	f7ff ff59 	bl	800785c <__sflush_r>
 80079aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ac:	07da      	lsls	r2, r3, #31
 80079ae:	4605      	mov	r5, r0
 80079b0:	d4e0      	bmi.n	8007974 <_fflush_r+0xc>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	059b      	lsls	r3, r3, #22
 80079b6:	d4dd      	bmi.n	8007974 <_fflush_r+0xc>
 80079b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ba:	f000 f951 	bl	8007c60 <__retarget_lock_release_recursive>
 80079be:	e7d9      	b.n	8007974 <_fflush_r+0xc>
 80079c0:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <_fflush_r+0x70>)
 80079c2:	429c      	cmp	r4, r3
 80079c4:	d101      	bne.n	80079ca <_fflush_r+0x62>
 80079c6:	68ac      	ldr	r4, [r5, #8]
 80079c8:	e7df      	b.n	800798a <_fflush_r+0x22>
 80079ca:	4b04      	ldr	r3, [pc, #16]	; (80079dc <_fflush_r+0x74>)
 80079cc:	429c      	cmp	r4, r3
 80079ce:	bf08      	it	eq
 80079d0:	68ec      	ldreq	r4, [r5, #12]
 80079d2:	e7da      	b.n	800798a <_fflush_r+0x22>
 80079d4:	08008c84 	.word	0x08008c84
 80079d8:	08008ca4 	.word	0x08008ca4
 80079dc:	08008c64 	.word	0x08008c64

080079e0 <fflush>:
 80079e0:	4601      	mov	r1, r0
 80079e2:	b920      	cbnz	r0, 80079ee <fflush+0xe>
 80079e4:	4b04      	ldr	r3, [pc, #16]	; (80079f8 <fflush+0x18>)
 80079e6:	4905      	ldr	r1, [pc, #20]	; (80079fc <fflush+0x1c>)
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	f000 b8f3 	b.w	8007bd4 <_fwalk_reent>
 80079ee:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <fflush+0x20>)
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	f7ff bfb9 	b.w	8007968 <_fflush_r>
 80079f6:	bf00      	nop
 80079f8:	08008cc4 	.word	0x08008cc4
 80079fc:	08007969 	.word	0x08007969
 8007a00:	20000084 	.word	0x20000084

08007a04 <std>:
 8007a04:	2300      	movs	r3, #0
 8007a06:	b510      	push	{r4, lr}
 8007a08:	4604      	mov	r4, r0
 8007a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a12:	6083      	str	r3, [r0, #8]
 8007a14:	8181      	strh	r1, [r0, #12]
 8007a16:	6643      	str	r3, [r0, #100]	; 0x64
 8007a18:	81c2      	strh	r2, [r0, #14]
 8007a1a:	6183      	str	r3, [r0, #24]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	2208      	movs	r2, #8
 8007a20:	305c      	adds	r0, #92	; 0x5c
 8007a22:	f000 f92c 	bl	8007c7e <memset>
 8007a26:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <std+0x38>)
 8007a28:	6263      	str	r3, [r4, #36]	; 0x24
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <std+0x3c>)
 8007a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <std+0x40>)
 8007a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <std+0x44>)
 8007a34:	6224      	str	r4, [r4, #32]
 8007a36:	6323      	str	r3, [r4, #48]	; 0x30
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	bf00      	nop
 8007a3c:	08008551 	.word	0x08008551
 8007a40:	08008573 	.word	0x08008573
 8007a44:	080085ab 	.word	0x080085ab
 8007a48:	080085cf 	.word	0x080085cf

08007a4c <_cleanup_r>:
 8007a4c:	4901      	ldr	r1, [pc, #4]	; (8007a54 <_cleanup_r+0x8>)
 8007a4e:	f000 b8c1 	b.w	8007bd4 <_fwalk_reent>
 8007a52:	bf00      	nop
 8007a54:	08007969 	.word	0x08007969

08007a58 <__sfmoreglue>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	2268      	movs	r2, #104	; 0x68
 8007a5c:	1e4d      	subs	r5, r1, #1
 8007a5e:	4355      	muls	r5, r2
 8007a60:	460e      	mov	r6, r1
 8007a62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a66:	f000 f97f 	bl	8007d68 <_malloc_r>
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	b140      	cbz	r0, 8007a80 <__sfmoreglue+0x28>
 8007a6e:	2100      	movs	r1, #0
 8007a70:	e9c0 1600 	strd	r1, r6, [r0]
 8007a74:	300c      	adds	r0, #12
 8007a76:	60a0      	str	r0, [r4, #8]
 8007a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a7c:	f000 f8ff 	bl	8007c7e <memset>
 8007a80:	4620      	mov	r0, r4
 8007a82:	bd70      	pop	{r4, r5, r6, pc}

08007a84 <__sfp_lock_acquire>:
 8007a84:	4801      	ldr	r0, [pc, #4]	; (8007a8c <__sfp_lock_acquire+0x8>)
 8007a86:	f000 b8ea 	b.w	8007c5e <__retarget_lock_acquire_recursive>
 8007a8a:	bf00      	nop
 8007a8c:	20004ccd 	.word	0x20004ccd

08007a90 <__sfp_lock_release>:
 8007a90:	4801      	ldr	r0, [pc, #4]	; (8007a98 <__sfp_lock_release+0x8>)
 8007a92:	f000 b8e5 	b.w	8007c60 <__retarget_lock_release_recursive>
 8007a96:	bf00      	nop
 8007a98:	20004ccd 	.word	0x20004ccd

08007a9c <__sinit_lock_acquire>:
 8007a9c:	4801      	ldr	r0, [pc, #4]	; (8007aa4 <__sinit_lock_acquire+0x8>)
 8007a9e:	f000 b8de 	b.w	8007c5e <__retarget_lock_acquire_recursive>
 8007aa2:	bf00      	nop
 8007aa4:	20004cce 	.word	0x20004cce

08007aa8 <__sinit_lock_release>:
 8007aa8:	4801      	ldr	r0, [pc, #4]	; (8007ab0 <__sinit_lock_release+0x8>)
 8007aaa:	f000 b8d9 	b.w	8007c60 <__retarget_lock_release_recursive>
 8007aae:	bf00      	nop
 8007ab0:	20004cce 	.word	0x20004cce

08007ab4 <__sinit>:
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	f7ff fff0 	bl	8007a9c <__sinit_lock_acquire>
 8007abc:	69a3      	ldr	r3, [r4, #24]
 8007abe:	b11b      	cbz	r3, 8007ac8 <__sinit+0x14>
 8007ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac4:	f7ff bff0 	b.w	8007aa8 <__sinit_lock_release>
 8007ac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007acc:	6523      	str	r3, [r4, #80]	; 0x50
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <__sinit+0x68>)
 8007ad0:	4a13      	ldr	r2, [pc, #76]	; (8007b20 <__sinit+0x6c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ad6:	42a3      	cmp	r3, r4
 8007ad8:	bf04      	itt	eq
 8007ada:	2301      	moveq	r3, #1
 8007adc:	61a3      	streq	r3, [r4, #24]
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 f820 	bl	8007b24 <__sfp>
 8007ae4:	6060      	str	r0, [r4, #4]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 f81c 	bl	8007b24 <__sfp>
 8007aec:	60a0      	str	r0, [r4, #8]
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 f818 	bl	8007b24 <__sfp>
 8007af4:	2200      	movs	r2, #0
 8007af6:	60e0      	str	r0, [r4, #12]
 8007af8:	2104      	movs	r1, #4
 8007afa:	6860      	ldr	r0, [r4, #4]
 8007afc:	f7ff ff82 	bl	8007a04 <std>
 8007b00:	68a0      	ldr	r0, [r4, #8]
 8007b02:	2201      	movs	r2, #1
 8007b04:	2109      	movs	r1, #9
 8007b06:	f7ff ff7d 	bl	8007a04 <std>
 8007b0a:	68e0      	ldr	r0, [r4, #12]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	2112      	movs	r1, #18
 8007b10:	f7ff ff78 	bl	8007a04 <std>
 8007b14:	2301      	movs	r3, #1
 8007b16:	61a3      	str	r3, [r4, #24]
 8007b18:	e7d2      	b.n	8007ac0 <__sinit+0xc>
 8007b1a:	bf00      	nop
 8007b1c:	08008cc4 	.word	0x08008cc4
 8007b20:	08007a4d 	.word	0x08007a4d

08007b24 <__sfp>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	4607      	mov	r7, r0
 8007b28:	f7ff ffac 	bl	8007a84 <__sfp_lock_acquire>
 8007b2c:	4b1e      	ldr	r3, [pc, #120]	; (8007ba8 <__sfp+0x84>)
 8007b2e:	681e      	ldr	r6, [r3, #0]
 8007b30:	69b3      	ldr	r3, [r6, #24]
 8007b32:	b913      	cbnz	r3, 8007b3a <__sfp+0x16>
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7ff ffbd 	bl	8007ab4 <__sinit>
 8007b3a:	3648      	adds	r6, #72	; 0x48
 8007b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	d503      	bpl.n	8007b4c <__sfp+0x28>
 8007b44:	6833      	ldr	r3, [r6, #0]
 8007b46:	b30b      	cbz	r3, 8007b8c <__sfp+0x68>
 8007b48:	6836      	ldr	r6, [r6, #0]
 8007b4a:	e7f7      	b.n	8007b3c <__sfp+0x18>
 8007b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b50:	b9d5      	cbnz	r5, 8007b88 <__sfp+0x64>
 8007b52:	4b16      	ldr	r3, [pc, #88]	; (8007bac <__sfp+0x88>)
 8007b54:	60e3      	str	r3, [r4, #12]
 8007b56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b5a:	6665      	str	r5, [r4, #100]	; 0x64
 8007b5c:	f000 f87e 	bl	8007c5c <__retarget_lock_init_recursive>
 8007b60:	f7ff ff96 	bl	8007a90 <__sfp_lock_release>
 8007b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b6c:	6025      	str	r5, [r4, #0]
 8007b6e:	61a5      	str	r5, [r4, #24]
 8007b70:	2208      	movs	r2, #8
 8007b72:	4629      	mov	r1, r5
 8007b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b78:	f000 f881 	bl	8007c7e <memset>
 8007b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b84:	4620      	mov	r0, r4
 8007b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b88:	3468      	adds	r4, #104	; 0x68
 8007b8a:	e7d9      	b.n	8007b40 <__sfp+0x1c>
 8007b8c:	2104      	movs	r1, #4
 8007b8e:	4638      	mov	r0, r7
 8007b90:	f7ff ff62 	bl	8007a58 <__sfmoreglue>
 8007b94:	4604      	mov	r4, r0
 8007b96:	6030      	str	r0, [r6, #0]
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d1d5      	bne.n	8007b48 <__sfp+0x24>
 8007b9c:	f7ff ff78 	bl	8007a90 <__sfp_lock_release>
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	e7ee      	b.n	8007b84 <__sfp+0x60>
 8007ba6:	bf00      	nop
 8007ba8:	08008cc4 	.word	0x08008cc4
 8007bac:	ffff0001 	.word	0xffff0001

08007bb0 <fiprintf>:
 8007bb0:	b40e      	push	{r1, r2, r3}
 8007bb2:	b503      	push	{r0, r1, lr}
 8007bb4:	4601      	mov	r1, r0
 8007bb6:	ab03      	add	r3, sp, #12
 8007bb8:	4805      	ldr	r0, [pc, #20]	; (8007bd0 <fiprintf+0x20>)
 8007bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bbe:	6800      	ldr	r0, [r0, #0]
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	f000 f96f 	bl	8007ea4 <_vfiprintf_r>
 8007bc6:	b002      	add	sp, #8
 8007bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bcc:	b003      	add	sp, #12
 8007bce:	4770      	bx	lr
 8007bd0:	20000084 	.word	0x20000084

08007bd4 <_fwalk_reent>:
 8007bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd8:	4606      	mov	r6, r0
 8007bda:	4688      	mov	r8, r1
 8007bdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007be0:	2700      	movs	r7, #0
 8007be2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007be6:	f1b9 0901 	subs.w	r9, r9, #1
 8007bea:	d505      	bpl.n	8007bf8 <_fwalk_reent+0x24>
 8007bec:	6824      	ldr	r4, [r4, #0]
 8007bee:	2c00      	cmp	r4, #0
 8007bf0:	d1f7      	bne.n	8007be2 <_fwalk_reent+0xe>
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf8:	89ab      	ldrh	r3, [r5, #12]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d907      	bls.n	8007c0e <_fwalk_reent+0x3a>
 8007bfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c02:	3301      	adds	r3, #1
 8007c04:	d003      	beq.n	8007c0e <_fwalk_reent+0x3a>
 8007c06:	4629      	mov	r1, r5
 8007c08:	4630      	mov	r0, r6
 8007c0a:	47c0      	blx	r8
 8007c0c:	4307      	orrs	r7, r0
 8007c0e:	3568      	adds	r5, #104	; 0x68
 8007c10:	e7e9      	b.n	8007be6 <_fwalk_reent+0x12>
	...

08007c14 <__libc_init_array>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	4d0d      	ldr	r5, [pc, #52]	; (8007c4c <__libc_init_array+0x38>)
 8007c18:	4c0d      	ldr	r4, [pc, #52]	; (8007c50 <__libc_init_array+0x3c>)
 8007c1a:	1b64      	subs	r4, r4, r5
 8007c1c:	10a4      	asrs	r4, r4, #2
 8007c1e:	2600      	movs	r6, #0
 8007c20:	42a6      	cmp	r6, r4
 8007c22:	d109      	bne.n	8007c38 <__libc_init_array+0x24>
 8007c24:	4d0b      	ldr	r5, [pc, #44]	; (8007c54 <__libc_init_array+0x40>)
 8007c26:	4c0c      	ldr	r4, [pc, #48]	; (8007c58 <__libc_init_array+0x44>)
 8007c28:	f000 febc 	bl	80089a4 <_init>
 8007c2c:	1b64      	subs	r4, r4, r5
 8007c2e:	10a4      	asrs	r4, r4, #2
 8007c30:	2600      	movs	r6, #0
 8007c32:	42a6      	cmp	r6, r4
 8007c34:	d105      	bne.n	8007c42 <__libc_init_array+0x2e>
 8007c36:	bd70      	pop	{r4, r5, r6, pc}
 8007c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c3c:	4798      	blx	r3
 8007c3e:	3601      	adds	r6, #1
 8007c40:	e7ee      	b.n	8007c20 <__libc_init_array+0xc>
 8007c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c46:	4798      	blx	r3
 8007c48:	3601      	adds	r6, #1
 8007c4a:	e7f2      	b.n	8007c32 <__libc_init_array+0x1e>
 8007c4c:	08008d04 	.word	0x08008d04
 8007c50:	08008d04 	.word	0x08008d04
 8007c54:	08008d04 	.word	0x08008d04
 8007c58:	08008d08 	.word	0x08008d08

08007c5c <__retarget_lock_init_recursive>:
 8007c5c:	4770      	bx	lr

08007c5e <__retarget_lock_acquire_recursive>:
 8007c5e:	4770      	bx	lr

08007c60 <__retarget_lock_release_recursive>:
 8007c60:	4770      	bx	lr

08007c62 <memcpy>:
 8007c62:	440a      	add	r2, r1
 8007c64:	4291      	cmp	r1, r2
 8007c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c6a:	d100      	bne.n	8007c6e <memcpy+0xc>
 8007c6c:	4770      	bx	lr
 8007c6e:	b510      	push	{r4, lr}
 8007c70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c78:	4291      	cmp	r1, r2
 8007c7a:	d1f9      	bne.n	8007c70 <memcpy+0xe>
 8007c7c:	bd10      	pop	{r4, pc}

08007c7e <memset>:
 8007c7e:	4402      	add	r2, r0
 8007c80:	4603      	mov	r3, r0
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d100      	bne.n	8007c88 <memset+0xa>
 8007c86:	4770      	bx	lr
 8007c88:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8c:	e7f9      	b.n	8007c82 <memset+0x4>
	...

08007c90 <_free_r>:
 8007c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c92:	2900      	cmp	r1, #0
 8007c94:	d044      	beq.n	8007d20 <_free_r+0x90>
 8007c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c9a:	9001      	str	r0, [sp, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f1a1 0404 	sub.w	r4, r1, #4
 8007ca2:	bfb8      	it	lt
 8007ca4:	18e4      	addlt	r4, r4, r3
 8007ca6:	f000 fdf9 	bl	800889c <__malloc_lock>
 8007caa:	4a1e      	ldr	r2, [pc, #120]	; (8007d24 <_free_r+0x94>)
 8007cac:	9801      	ldr	r0, [sp, #4]
 8007cae:	6813      	ldr	r3, [r2, #0]
 8007cb0:	b933      	cbnz	r3, 8007cc0 <_free_r+0x30>
 8007cb2:	6063      	str	r3, [r4, #4]
 8007cb4:	6014      	str	r4, [r2, #0]
 8007cb6:	b003      	add	sp, #12
 8007cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cbc:	f000 bdf4 	b.w	80088a8 <__malloc_unlock>
 8007cc0:	42a3      	cmp	r3, r4
 8007cc2:	d908      	bls.n	8007cd6 <_free_r+0x46>
 8007cc4:	6825      	ldr	r5, [r4, #0]
 8007cc6:	1961      	adds	r1, r4, r5
 8007cc8:	428b      	cmp	r3, r1
 8007cca:	bf01      	itttt	eq
 8007ccc:	6819      	ldreq	r1, [r3, #0]
 8007cce:	685b      	ldreq	r3, [r3, #4]
 8007cd0:	1949      	addeq	r1, r1, r5
 8007cd2:	6021      	streq	r1, [r4, #0]
 8007cd4:	e7ed      	b.n	8007cb2 <_free_r+0x22>
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	b10b      	cbz	r3, 8007ce0 <_free_r+0x50>
 8007cdc:	42a3      	cmp	r3, r4
 8007cde:	d9fa      	bls.n	8007cd6 <_free_r+0x46>
 8007ce0:	6811      	ldr	r1, [r2, #0]
 8007ce2:	1855      	adds	r5, r2, r1
 8007ce4:	42a5      	cmp	r5, r4
 8007ce6:	d10b      	bne.n	8007d00 <_free_r+0x70>
 8007ce8:	6824      	ldr	r4, [r4, #0]
 8007cea:	4421      	add	r1, r4
 8007cec:	1854      	adds	r4, r2, r1
 8007cee:	42a3      	cmp	r3, r4
 8007cf0:	6011      	str	r1, [r2, #0]
 8007cf2:	d1e0      	bne.n	8007cb6 <_free_r+0x26>
 8007cf4:	681c      	ldr	r4, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	6053      	str	r3, [r2, #4]
 8007cfa:	4421      	add	r1, r4
 8007cfc:	6011      	str	r1, [r2, #0]
 8007cfe:	e7da      	b.n	8007cb6 <_free_r+0x26>
 8007d00:	d902      	bls.n	8007d08 <_free_r+0x78>
 8007d02:	230c      	movs	r3, #12
 8007d04:	6003      	str	r3, [r0, #0]
 8007d06:	e7d6      	b.n	8007cb6 <_free_r+0x26>
 8007d08:	6825      	ldr	r5, [r4, #0]
 8007d0a:	1961      	adds	r1, r4, r5
 8007d0c:	428b      	cmp	r3, r1
 8007d0e:	bf04      	itt	eq
 8007d10:	6819      	ldreq	r1, [r3, #0]
 8007d12:	685b      	ldreq	r3, [r3, #4]
 8007d14:	6063      	str	r3, [r4, #4]
 8007d16:	bf04      	itt	eq
 8007d18:	1949      	addeq	r1, r1, r5
 8007d1a:	6021      	streq	r1, [r4, #0]
 8007d1c:	6054      	str	r4, [r2, #4]
 8007d1e:	e7ca      	b.n	8007cb6 <_free_r+0x26>
 8007d20:	b003      	add	sp, #12
 8007d22:	bd30      	pop	{r4, r5, pc}
 8007d24:	20004cd0 	.word	0x20004cd0

08007d28 <sbrk_aligned>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	4e0e      	ldr	r6, [pc, #56]	; (8007d64 <sbrk_aligned+0x3c>)
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	6831      	ldr	r1, [r6, #0]
 8007d30:	4605      	mov	r5, r0
 8007d32:	b911      	cbnz	r1, 8007d3a <sbrk_aligned+0x12>
 8007d34:	f000 fbfc 	bl	8008530 <_sbrk_r>
 8007d38:	6030      	str	r0, [r6, #0]
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f000 fbf7 	bl	8008530 <_sbrk_r>
 8007d42:	1c43      	adds	r3, r0, #1
 8007d44:	d00a      	beq.n	8007d5c <sbrk_aligned+0x34>
 8007d46:	1cc4      	adds	r4, r0, #3
 8007d48:	f024 0403 	bic.w	r4, r4, #3
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d007      	beq.n	8007d60 <sbrk_aligned+0x38>
 8007d50:	1a21      	subs	r1, r4, r0
 8007d52:	4628      	mov	r0, r5
 8007d54:	f000 fbec 	bl	8008530 <_sbrk_r>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d101      	bne.n	8007d60 <sbrk_aligned+0x38>
 8007d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8007d60:	4620      	mov	r0, r4
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	20004cd4 	.word	0x20004cd4

08007d68 <_malloc_r>:
 8007d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6c:	1ccd      	adds	r5, r1, #3
 8007d6e:	f025 0503 	bic.w	r5, r5, #3
 8007d72:	3508      	adds	r5, #8
 8007d74:	2d0c      	cmp	r5, #12
 8007d76:	bf38      	it	cc
 8007d78:	250c      	movcc	r5, #12
 8007d7a:	2d00      	cmp	r5, #0
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	db01      	blt.n	8007d84 <_malloc_r+0x1c>
 8007d80:	42a9      	cmp	r1, r5
 8007d82:	d905      	bls.n	8007d90 <_malloc_r+0x28>
 8007d84:	230c      	movs	r3, #12
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	2600      	movs	r6, #0
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d90:	4e2e      	ldr	r6, [pc, #184]	; (8007e4c <_malloc_r+0xe4>)
 8007d92:	f000 fd83 	bl	800889c <__malloc_lock>
 8007d96:	6833      	ldr	r3, [r6, #0]
 8007d98:	461c      	mov	r4, r3
 8007d9a:	bb34      	cbnz	r4, 8007dea <_malloc_r+0x82>
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	4638      	mov	r0, r7
 8007da0:	f7ff ffc2 	bl	8007d28 <sbrk_aligned>
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	4604      	mov	r4, r0
 8007da8:	d14d      	bne.n	8007e46 <_malloc_r+0xde>
 8007daa:	6834      	ldr	r4, [r6, #0]
 8007dac:	4626      	mov	r6, r4
 8007dae:	2e00      	cmp	r6, #0
 8007db0:	d140      	bne.n	8007e34 <_malloc_r+0xcc>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	4631      	mov	r1, r6
 8007db6:	4638      	mov	r0, r7
 8007db8:	eb04 0803 	add.w	r8, r4, r3
 8007dbc:	f000 fbb8 	bl	8008530 <_sbrk_r>
 8007dc0:	4580      	cmp	r8, r0
 8007dc2:	d13a      	bne.n	8007e3a <_malloc_r+0xd2>
 8007dc4:	6821      	ldr	r1, [r4, #0]
 8007dc6:	3503      	adds	r5, #3
 8007dc8:	1a6d      	subs	r5, r5, r1
 8007dca:	f025 0503 	bic.w	r5, r5, #3
 8007dce:	3508      	adds	r5, #8
 8007dd0:	2d0c      	cmp	r5, #12
 8007dd2:	bf38      	it	cc
 8007dd4:	250c      	movcc	r5, #12
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7ff ffa5 	bl	8007d28 <sbrk_aligned>
 8007dde:	3001      	adds	r0, #1
 8007de0:	d02b      	beq.n	8007e3a <_malloc_r+0xd2>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	442b      	add	r3, r5
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	e00e      	b.n	8007e08 <_malloc_r+0xa0>
 8007dea:	6822      	ldr	r2, [r4, #0]
 8007dec:	1b52      	subs	r2, r2, r5
 8007dee:	d41e      	bmi.n	8007e2e <_malloc_r+0xc6>
 8007df0:	2a0b      	cmp	r2, #11
 8007df2:	d916      	bls.n	8007e22 <_malloc_r+0xba>
 8007df4:	1961      	adds	r1, r4, r5
 8007df6:	42a3      	cmp	r3, r4
 8007df8:	6025      	str	r5, [r4, #0]
 8007dfa:	bf18      	it	ne
 8007dfc:	6059      	strne	r1, [r3, #4]
 8007dfe:	6863      	ldr	r3, [r4, #4]
 8007e00:	bf08      	it	eq
 8007e02:	6031      	streq	r1, [r6, #0]
 8007e04:	5162      	str	r2, [r4, r5]
 8007e06:	604b      	str	r3, [r1, #4]
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f104 060b 	add.w	r6, r4, #11
 8007e0e:	f000 fd4b 	bl	80088a8 <__malloc_unlock>
 8007e12:	f026 0607 	bic.w	r6, r6, #7
 8007e16:	1d23      	adds	r3, r4, #4
 8007e18:	1af2      	subs	r2, r6, r3
 8007e1a:	d0b6      	beq.n	8007d8a <_malloc_r+0x22>
 8007e1c:	1b9b      	subs	r3, r3, r6
 8007e1e:	50a3      	str	r3, [r4, r2]
 8007e20:	e7b3      	b.n	8007d8a <_malloc_r+0x22>
 8007e22:	6862      	ldr	r2, [r4, #4]
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	bf0c      	ite	eq
 8007e28:	6032      	streq	r2, [r6, #0]
 8007e2a:	605a      	strne	r2, [r3, #4]
 8007e2c:	e7ec      	b.n	8007e08 <_malloc_r+0xa0>
 8007e2e:	4623      	mov	r3, r4
 8007e30:	6864      	ldr	r4, [r4, #4]
 8007e32:	e7b2      	b.n	8007d9a <_malloc_r+0x32>
 8007e34:	4634      	mov	r4, r6
 8007e36:	6876      	ldr	r6, [r6, #4]
 8007e38:	e7b9      	b.n	8007dae <_malloc_r+0x46>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	603b      	str	r3, [r7, #0]
 8007e3e:	4638      	mov	r0, r7
 8007e40:	f000 fd32 	bl	80088a8 <__malloc_unlock>
 8007e44:	e7a1      	b.n	8007d8a <_malloc_r+0x22>
 8007e46:	6025      	str	r5, [r4, #0]
 8007e48:	e7de      	b.n	8007e08 <_malloc_r+0xa0>
 8007e4a:	bf00      	nop
 8007e4c:	20004cd0 	.word	0x20004cd0

08007e50 <__sfputc_r>:
 8007e50:	6893      	ldr	r3, [r2, #8]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	b410      	push	{r4}
 8007e58:	6093      	str	r3, [r2, #8]
 8007e5a:	da08      	bge.n	8007e6e <__sfputc_r+0x1e>
 8007e5c:	6994      	ldr	r4, [r2, #24]
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	db01      	blt.n	8007e66 <__sfputc_r+0x16>
 8007e62:	290a      	cmp	r1, #10
 8007e64:	d103      	bne.n	8007e6e <__sfputc_r+0x1e>
 8007e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e6a:	f000 bbb5 	b.w	80085d8 <__swbuf_r>
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	1c58      	adds	r0, r3, #1
 8007e72:	6010      	str	r0, [r2, #0]
 8007e74:	7019      	strb	r1, [r3, #0]
 8007e76:	4608      	mov	r0, r1
 8007e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <__sfputs_r>:
 8007e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e80:	4606      	mov	r6, r0
 8007e82:	460f      	mov	r7, r1
 8007e84:	4614      	mov	r4, r2
 8007e86:	18d5      	adds	r5, r2, r3
 8007e88:	42ac      	cmp	r4, r5
 8007e8a:	d101      	bne.n	8007e90 <__sfputs_r+0x12>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	e007      	b.n	8007ea0 <__sfputs_r+0x22>
 8007e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e94:	463a      	mov	r2, r7
 8007e96:	4630      	mov	r0, r6
 8007e98:	f7ff ffda 	bl	8007e50 <__sfputc_r>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d1f3      	bne.n	8007e88 <__sfputs_r+0xa>
 8007ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ea4 <_vfiprintf_r>:
 8007ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea8:	460d      	mov	r5, r1
 8007eaa:	b09d      	sub	sp, #116	; 0x74
 8007eac:	4614      	mov	r4, r2
 8007eae:	4698      	mov	r8, r3
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	b118      	cbz	r0, 8007ebc <_vfiprintf_r+0x18>
 8007eb4:	6983      	ldr	r3, [r0, #24]
 8007eb6:	b90b      	cbnz	r3, 8007ebc <_vfiprintf_r+0x18>
 8007eb8:	f7ff fdfc 	bl	8007ab4 <__sinit>
 8007ebc:	4b89      	ldr	r3, [pc, #548]	; (80080e4 <_vfiprintf_r+0x240>)
 8007ebe:	429d      	cmp	r5, r3
 8007ec0:	d11b      	bne.n	8007efa <_vfiprintf_r+0x56>
 8007ec2:	6875      	ldr	r5, [r6, #4]
 8007ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ec6:	07d9      	lsls	r1, r3, #31
 8007ec8:	d405      	bmi.n	8007ed6 <_vfiprintf_r+0x32>
 8007eca:	89ab      	ldrh	r3, [r5, #12]
 8007ecc:	059a      	lsls	r2, r3, #22
 8007ece:	d402      	bmi.n	8007ed6 <_vfiprintf_r+0x32>
 8007ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed2:	f7ff fec4 	bl	8007c5e <__retarget_lock_acquire_recursive>
 8007ed6:	89ab      	ldrh	r3, [r5, #12]
 8007ed8:	071b      	lsls	r3, r3, #28
 8007eda:	d501      	bpl.n	8007ee0 <_vfiprintf_r+0x3c>
 8007edc:	692b      	ldr	r3, [r5, #16]
 8007ede:	b9eb      	cbnz	r3, 8007f1c <_vfiprintf_r+0x78>
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 fbdc 	bl	80086a0 <__swsetup_r>
 8007ee8:	b1c0      	cbz	r0, 8007f1c <_vfiprintf_r+0x78>
 8007eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eec:	07dc      	lsls	r4, r3, #31
 8007eee:	d50e      	bpl.n	8007f0e <_vfiprintf_r+0x6a>
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	b01d      	add	sp, #116	; 0x74
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	4b7b      	ldr	r3, [pc, #492]	; (80080e8 <_vfiprintf_r+0x244>)
 8007efc:	429d      	cmp	r5, r3
 8007efe:	d101      	bne.n	8007f04 <_vfiprintf_r+0x60>
 8007f00:	68b5      	ldr	r5, [r6, #8]
 8007f02:	e7df      	b.n	8007ec4 <_vfiprintf_r+0x20>
 8007f04:	4b79      	ldr	r3, [pc, #484]	; (80080ec <_vfiprintf_r+0x248>)
 8007f06:	429d      	cmp	r5, r3
 8007f08:	bf08      	it	eq
 8007f0a:	68f5      	ldreq	r5, [r6, #12]
 8007f0c:	e7da      	b.n	8007ec4 <_vfiprintf_r+0x20>
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	0598      	lsls	r0, r3, #22
 8007f12:	d4ed      	bmi.n	8007ef0 <_vfiprintf_r+0x4c>
 8007f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f16:	f7ff fea3 	bl	8007c60 <__retarget_lock_release_recursive>
 8007f1a:	e7e9      	b.n	8007ef0 <_vfiprintf_r+0x4c>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f20:	2320      	movs	r3, #32
 8007f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f2a:	2330      	movs	r3, #48	; 0x30
 8007f2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80080f0 <_vfiprintf_r+0x24c>
 8007f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f34:	f04f 0901 	mov.w	r9, #1
 8007f38:	4623      	mov	r3, r4
 8007f3a:	469a      	mov	sl, r3
 8007f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f40:	b10a      	cbz	r2, 8007f46 <_vfiprintf_r+0xa2>
 8007f42:	2a25      	cmp	r2, #37	; 0x25
 8007f44:	d1f9      	bne.n	8007f3a <_vfiprintf_r+0x96>
 8007f46:	ebba 0b04 	subs.w	fp, sl, r4
 8007f4a:	d00b      	beq.n	8007f64 <_vfiprintf_r+0xc0>
 8007f4c:	465b      	mov	r3, fp
 8007f4e:	4622      	mov	r2, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff ff93 	bl	8007e7e <__sfputs_r>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f000 80aa 	beq.w	80080b2 <_vfiprintf_r+0x20e>
 8007f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f60:	445a      	add	r2, fp
 8007f62:	9209      	str	r2, [sp, #36]	; 0x24
 8007f64:	f89a 3000 	ldrb.w	r3, [sl]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 80a2 	beq.w	80080b2 <_vfiprintf_r+0x20e>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295
 8007f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f78:	f10a 0a01 	add.w	sl, sl, #1
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	9307      	str	r3, [sp, #28]
 8007f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f84:	931a      	str	r3, [sp, #104]	; 0x68
 8007f86:	4654      	mov	r4, sl
 8007f88:	2205      	movs	r2, #5
 8007f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8e:	4858      	ldr	r0, [pc, #352]	; (80080f0 <_vfiprintf_r+0x24c>)
 8007f90:	f7f8 f93e 	bl	8000210 <memchr>
 8007f94:	9a04      	ldr	r2, [sp, #16]
 8007f96:	b9d8      	cbnz	r0, 8007fd0 <_vfiprintf_r+0x12c>
 8007f98:	06d1      	lsls	r1, r2, #27
 8007f9a:	bf44      	itt	mi
 8007f9c:	2320      	movmi	r3, #32
 8007f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fa2:	0713      	lsls	r3, r2, #28
 8007fa4:	bf44      	itt	mi
 8007fa6:	232b      	movmi	r3, #43	; 0x2b
 8007fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fac:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fb2:	d015      	beq.n	8007fe0 <_vfiprintf_r+0x13c>
 8007fb4:	9a07      	ldr	r2, [sp, #28]
 8007fb6:	4654      	mov	r4, sl
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f04f 0c0a 	mov.w	ip, #10
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc4:	3b30      	subs	r3, #48	; 0x30
 8007fc6:	2b09      	cmp	r3, #9
 8007fc8:	d94e      	bls.n	8008068 <_vfiprintf_r+0x1c4>
 8007fca:	b1b0      	cbz	r0, 8007ffa <_vfiprintf_r+0x156>
 8007fcc:	9207      	str	r2, [sp, #28]
 8007fce:	e014      	b.n	8007ffa <_vfiprintf_r+0x156>
 8007fd0:	eba0 0308 	sub.w	r3, r0, r8
 8007fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	46a2      	mov	sl, r4
 8007fde:	e7d2      	b.n	8007f86 <_vfiprintf_r+0xe2>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	1d19      	adds	r1, r3, #4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	9103      	str	r1, [sp, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bfbb      	ittet	lt
 8007fec:	425b      	neglt	r3, r3
 8007fee:	f042 0202 	orrlt.w	r2, r2, #2
 8007ff2:	9307      	strge	r3, [sp, #28]
 8007ff4:	9307      	strlt	r3, [sp, #28]
 8007ff6:	bfb8      	it	lt
 8007ff8:	9204      	strlt	r2, [sp, #16]
 8007ffa:	7823      	ldrb	r3, [r4, #0]
 8007ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ffe:	d10c      	bne.n	800801a <_vfiprintf_r+0x176>
 8008000:	7863      	ldrb	r3, [r4, #1]
 8008002:	2b2a      	cmp	r3, #42	; 0x2a
 8008004:	d135      	bne.n	8008072 <_vfiprintf_r+0x1ce>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	1d1a      	adds	r2, r3, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	9203      	str	r2, [sp, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfb8      	it	lt
 8008012:	f04f 33ff 	movlt.w	r3, #4294967295
 8008016:	3402      	adds	r4, #2
 8008018:	9305      	str	r3, [sp, #20]
 800801a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008100 <_vfiprintf_r+0x25c>
 800801e:	7821      	ldrb	r1, [r4, #0]
 8008020:	2203      	movs	r2, #3
 8008022:	4650      	mov	r0, sl
 8008024:	f7f8 f8f4 	bl	8000210 <memchr>
 8008028:	b140      	cbz	r0, 800803c <_vfiprintf_r+0x198>
 800802a:	2340      	movs	r3, #64	; 0x40
 800802c:	eba0 000a 	sub.w	r0, r0, sl
 8008030:	fa03 f000 	lsl.w	r0, r3, r0
 8008034:	9b04      	ldr	r3, [sp, #16]
 8008036:	4303      	orrs	r3, r0
 8008038:	3401      	adds	r4, #1
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008040:	482c      	ldr	r0, [pc, #176]	; (80080f4 <_vfiprintf_r+0x250>)
 8008042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008046:	2206      	movs	r2, #6
 8008048:	f7f8 f8e2 	bl	8000210 <memchr>
 800804c:	2800      	cmp	r0, #0
 800804e:	d03f      	beq.n	80080d0 <_vfiprintf_r+0x22c>
 8008050:	4b29      	ldr	r3, [pc, #164]	; (80080f8 <_vfiprintf_r+0x254>)
 8008052:	bb1b      	cbnz	r3, 800809c <_vfiprintf_r+0x1f8>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	3307      	adds	r3, #7
 8008058:	f023 0307 	bic.w	r3, r3, #7
 800805c:	3308      	adds	r3, #8
 800805e:	9303      	str	r3, [sp, #12]
 8008060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008062:	443b      	add	r3, r7
 8008064:	9309      	str	r3, [sp, #36]	; 0x24
 8008066:	e767      	b.n	8007f38 <_vfiprintf_r+0x94>
 8008068:	fb0c 3202 	mla	r2, ip, r2, r3
 800806c:	460c      	mov	r4, r1
 800806e:	2001      	movs	r0, #1
 8008070:	e7a5      	b.n	8007fbe <_vfiprintf_r+0x11a>
 8008072:	2300      	movs	r3, #0
 8008074:	3401      	adds	r4, #1
 8008076:	9305      	str	r3, [sp, #20]
 8008078:	4619      	mov	r1, r3
 800807a:	f04f 0c0a 	mov.w	ip, #10
 800807e:	4620      	mov	r0, r4
 8008080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008084:	3a30      	subs	r2, #48	; 0x30
 8008086:	2a09      	cmp	r2, #9
 8008088:	d903      	bls.n	8008092 <_vfiprintf_r+0x1ee>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0c5      	beq.n	800801a <_vfiprintf_r+0x176>
 800808e:	9105      	str	r1, [sp, #20]
 8008090:	e7c3      	b.n	800801a <_vfiprintf_r+0x176>
 8008092:	fb0c 2101 	mla	r1, ip, r1, r2
 8008096:	4604      	mov	r4, r0
 8008098:	2301      	movs	r3, #1
 800809a:	e7f0      	b.n	800807e <_vfiprintf_r+0x1da>
 800809c:	ab03      	add	r3, sp, #12
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	462a      	mov	r2, r5
 80080a2:	4b16      	ldr	r3, [pc, #88]	; (80080fc <_vfiprintf_r+0x258>)
 80080a4:	a904      	add	r1, sp, #16
 80080a6:	4630      	mov	r0, r6
 80080a8:	f3af 8000 	nop.w
 80080ac:	4607      	mov	r7, r0
 80080ae:	1c78      	adds	r0, r7, #1
 80080b0:	d1d6      	bne.n	8008060 <_vfiprintf_r+0x1bc>
 80080b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080b4:	07d9      	lsls	r1, r3, #31
 80080b6:	d405      	bmi.n	80080c4 <_vfiprintf_r+0x220>
 80080b8:	89ab      	ldrh	r3, [r5, #12]
 80080ba:	059a      	lsls	r2, r3, #22
 80080bc:	d402      	bmi.n	80080c4 <_vfiprintf_r+0x220>
 80080be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080c0:	f7ff fdce 	bl	8007c60 <__retarget_lock_release_recursive>
 80080c4:	89ab      	ldrh	r3, [r5, #12]
 80080c6:	065b      	lsls	r3, r3, #25
 80080c8:	f53f af12 	bmi.w	8007ef0 <_vfiprintf_r+0x4c>
 80080cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080ce:	e711      	b.n	8007ef4 <_vfiprintf_r+0x50>
 80080d0:	ab03      	add	r3, sp, #12
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	462a      	mov	r2, r5
 80080d6:	4b09      	ldr	r3, [pc, #36]	; (80080fc <_vfiprintf_r+0x258>)
 80080d8:	a904      	add	r1, sp, #16
 80080da:	4630      	mov	r0, r6
 80080dc:	f000 f880 	bl	80081e0 <_printf_i>
 80080e0:	e7e4      	b.n	80080ac <_vfiprintf_r+0x208>
 80080e2:	bf00      	nop
 80080e4:	08008c84 	.word	0x08008c84
 80080e8:	08008ca4 	.word	0x08008ca4
 80080ec:	08008c64 	.word	0x08008c64
 80080f0:	08008cc8 	.word	0x08008cc8
 80080f4:	08008cd2 	.word	0x08008cd2
 80080f8:	00000000 	.word	0x00000000
 80080fc:	08007e7f 	.word	0x08007e7f
 8008100:	08008cce 	.word	0x08008cce

08008104 <_printf_common>:
 8008104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008108:	4616      	mov	r6, r2
 800810a:	4699      	mov	r9, r3
 800810c:	688a      	ldr	r2, [r1, #8]
 800810e:	690b      	ldr	r3, [r1, #16]
 8008110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008114:	4293      	cmp	r3, r2
 8008116:	bfb8      	it	lt
 8008118:	4613      	movlt	r3, r2
 800811a:	6033      	str	r3, [r6, #0]
 800811c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008120:	4607      	mov	r7, r0
 8008122:	460c      	mov	r4, r1
 8008124:	b10a      	cbz	r2, 800812a <_printf_common+0x26>
 8008126:	3301      	adds	r3, #1
 8008128:	6033      	str	r3, [r6, #0]
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	0699      	lsls	r1, r3, #26
 800812e:	bf42      	ittt	mi
 8008130:	6833      	ldrmi	r3, [r6, #0]
 8008132:	3302      	addmi	r3, #2
 8008134:	6033      	strmi	r3, [r6, #0]
 8008136:	6825      	ldr	r5, [r4, #0]
 8008138:	f015 0506 	ands.w	r5, r5, #6
 800813c:	d106      	bne.n	800814c <_printf_common+0x48>
 800813e:	f104 0a19 	add.w	sl, r4, #25
 8008142:	68e3      	ldr	r3, [r4, #12]
 8008144:	6832      	ldr	r2, [r6, #0]
 8008146:	1a9b      	subs	r3, r3, r2
 8008148:	42ab      	cmp	r3, r5
 800814a:	dc26      	bgt.n	800819a <_printf_common+0x96>
 800814c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008150:	1e13      	subs	r3, r2, #0
 8008152:	6822      	ldr	r2, [r4, #0]
 8008154:	bf18      	it	ne
 8008156:	2301      	movne	r3, #1
 8008158:	0692      	lsls	r2, r2, #26
 800815a:	d42b      	bmi.n	80081b4 <_printf_common+0xb0>
 800815c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008160:	4649      	mov	r1, r9
 8008162:	4638      	mov	r0, r7
 8008164:	47c0      	blx	r8
 8008166:	3001      	adds	r0, #1
 8008168:	d01e      	beq.n	80081a8 <_printf_common+0xa4>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	68e5      	ldr	r5, [r4, #12]
 800816e:	6832      	ldr	r2, [r6, #0]
 8008170:	f003 0306 	and.w	r3, r3, #6
 8008174:	2b04      	cmp	r3, #4
 8008176:	bf08      	it	eq
 8008178:	1aad      	subeq	r5, r5, r2
 800817a:	68a3      	ldr	r3, [r4, #8]
 800817c:	6922      	ldr	r2, [r4, #16]
 800817e:	bf0c      	ite	eq
 8008180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008184:	2500      	movne	r5, #0
 8008186:	4293      	cmp	r3, r2
 8008188:	bfc4      	itt	gt
 800818a:	1a9b      	subgt	r3, r3, r2
 800818c:	18ed      	addgt	r5, r5, r3
 800818e:	2600      	movs	r6, #0
 8008190:	341a      	adds	r4, #26
 8008192:	42b5      	cmp	r5, r6
 8008194:	d11a      	bne.n	80081cc <_printf_common+0xc8>
 8008196:	2000      	movs	r0, #0
 8008198:	e008      	b.n	80081ac <_printf_common+0xa8>
 800819a:	2301      	movs	r3, #1
 800819c:	4652      	mov	r2, sl
 800819e:	4649      	mov	r1, r9
 80081a0:	4638      	mov	r0, r7
 80081a2:	47c0      	blx	r8
 80081a4:	3001      	adds	r0, #1
 80081a6:	d103      	bne.n	80081b0 <_printf_common+0xac>
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b0:	3501      	adds	r5, #1
 80081b2:	e7c6      	b.n	8008142 <_printf_common+0x3e>
 80081b4:	18e1      	adds	r1, r4, r3
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	2030      	movs	r0, #48	; 0x30
 80081ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081be:	4422      	add	r2, r4
 80081c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081c8:	3302      	adds	r3, #2
 80081ca:	e7c7      	b.n	800815c <_printf_common+0x58>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4622      	mov	r2, r4
 80081d0:	4649      	mov	r1, r9
 80081d2:	4638      	mov	r0, r7
 80081d4:	47c0      	blx	r8
 80081d6:	3001      	adds	r0, #1
 80081d8:	d0e6      	beq.n	80081a8 <_printf_common+0xa4>
 80081da:	3601      	adds	r6, #1
 80081dc:	e7d9      	b.n	8008192 <_printf_common+0x8e>
	...

080081e0 <_printf_i>:
 80081e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	7e0f      	ldrb	r7, [r1, #24]
 80081e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081e8:	2f78      	cmp	r7, #120	; 0x78
 80081ea:	4691      	mov	r9, r2
 80081ec:	4680      	mov	r8, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	469a      	mov	sl, r3
 80081f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081f6:	d807      	bhi.n	8008208 <_printf_i+0x28>
 80081f8:	2f62      	cmp	r7, #98	; 0x62
 80081fa:	d80a      	bhi.n	8008212 <_printf_i+0x32>
 80081fc:	2f00      	cmp	r7, #0
 80081fe:	f000 80d8 	beq.w	80083b2 <_printf_i+0x1d2>
 8008202:	2f58      	cmp	r7, #88	; 0x58
 8008204:	f000 80a3 	beq.w	800834e <_printf_i+0x16e>
 8008208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800820c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008210:	e03a      	b.n	8008288 <_printf_i+0xa8>
 8008212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008216:	2b15      	cmp	r3, #21
 8008218:	d8f6      	bhi.n	8008208 <_printf_i+0x28>
 800821a:	a101      	add	r1, pc, #4	; (adr r1, 8008220 <_printf_i+0x40>)
 800821c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008220:	08008279 	.word	0x08008279
 8008224:	0800828d 	.word	0x0800828d
 8008228:	08008209 	.word	0x08008209
 800822c:	08008209 	.word	0x08008209
 8008230:	08008209 	.word	0x08008209
 8008234:	08008209 	.word	0x08008209
 8008238:	0800828d 	.word	0x0800828d
 800823c:	08008209 	.word	0x08008209
 8008240:	08008209 	.word	0x08008209
 8008244:	08008209 	.word	0x08008209
 8008248:	08008209 	.word	0x08008209
 800824c:	08008399 	.word	0x08008399
 8008250:	080082bd 	.word	0x080082bd
 8008254:	0800837b 	.word	0x0800837b
 8008258:	08008209 	.word	0x08008209
 800825c:	08008209 	.word	0x08008209
 8008260:	080083bb 	.word	0x080083bb
 8008264:	08008209 	.word	0x08008209
 8008268:	080082bd 	.word	0x080082bd
 800826c:	08008209 	.word	0x08008209
 8008270:	08008209 	.word	0x08008209
 8008274:	08008383 	.word	0x08008383
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	1d1a      	adds	r2, r3, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	602a      	str	r2, [r5, #0]
 8008280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008288:	2301      	movs	r3, #1
 800828a:	e0a3      	b.n	80083d4 <_printf_i+0x1f4>
 800828c:	6820      	ldr	r0, [r4, #0]
 800828e:	6829      	ldr	r1, [r5, #0]
 8008290:	0606      	lsls	r6, r0, #24
 8008292:	f101 0304 	add.w	r3, r1, #4
 8008296:	d50a      	bpl.n	80082ae <_printf_i+0xce>
 8008298:	680e      	ldr	r6, [r1, #0]
 800829a:	602b      	str	r3, [r5, #0]
 800829c:	2e00      	cmp	r6, #0
 800829e:	da03      	bge.n	80082a8 <_printf_i+0xc8>
 80082a0:	232d      	movs	r3, #45	; 0x2d
 80082a2:	4276      	negs	r6, r6
 80082a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a8:	485e      	ldr	r0, [pc, #376]	; (8008424 <_printf_i+0x244>)
 80082aa:	230a      	movs	r3, #10
 80082ac:	e019      	b.n	80082e2 <_printf_i+0x102>
 80082ae:	680e      	ldr	r6, [r1, #0]
 80082b0:	602b      	str	r3, [r5, #0]
 80082b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082b6:	bf18      	it	ne
 80082b8:	b236      	sxthne	r6, r6
 80082ba:	e7ef      	b.n	800829c <_printf_i+0xbc>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	6820      	ldr	r0, [r4, #0]
 80082c0:	1d19      	adds	r1, r3, #4
 80082c2:	6029      	str	r1, [r5, #0]
 80082c4:	0601      	lsls	r1, r0, #24
 80082c6:	d501      	bpl.n	80082cc <_printf_i+0xec>
 80082c8:	681e      	ldr	r6, [r3, #0]
 80082ca:	e002      	b.n	80082d2 <_printf_i+0xf2>
 80082cc:	0646      	lsls	r6, r0, #25
 80082ce:	d5fb      	bpl.n	80082c8 <_printf_i+0xe8>
 80082d0:	881e      	ldrh	r6, [r3, #0]
 80082d2:	4854      	ldr	r0, [pc, #336]	; (8008424 <_printf_i+0x244>)
 80082d4:	2f6f      	cmp	r7, #111	; 0x6f
 80082d6:	bf0c      	ite	eq
 80082d8:	2308      	moveq	r3, #8
 80082da:	230a      	movne	r3, #10
 80082dc:	2100      	movs	r1, #0
 80082de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082e2:	6865      	ldr	r5, [r4, #4]
 80082e4:	60a5      	str	r5, [r4, #8]
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	bfa2      	ittt	ge
 80082ea:	6821      	ldrge	r1, [r4, #0]
 80082ec:	f021 0104 	bicge.w	r1, r1, #4
 80082f0:	6021      	strge	r1, [r4, #0]
 80082f2:	b90e      	cbnz	r6, 80082f8 <_printf_i+0x118>
 80082f4:	2d00      	cmp	r5, #0
 80082f6:	d04d      	beq.n	8008394 <_printf_i+0x1b4>
 80082f8:	4615      	mov	r5, r2
 80082fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80082fe:	fb03 6711 	mls	r7, r3, r1, r6
 8008302:	5dc7      	ldrb	r7, [r0, r7]
 8008304:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008308:	4637      	mov	r7, r6
 800830a:	42bb      	cmp	r3, r7
 800830c:	460e      	mov	r6, r1
 800830e:	d9f4      	bls.n	80082fa <_printf_i+0x11a>
 8008310:	2b08      	cmp	r3, #8
 8008312:	d10b      	bne.n	800832c <_printf_i+0x14c>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	07de      	lsls	r6, r3, #31
 8008318:	d508      	bpl.n	800832c <_printf_i+0x14c>
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	6861      	ldr	r1, [r4, #4]
 800831e:	4299      	cmp	r1, r3
 8008320:	bfde      	ittt	le
 8008322:	2330      	movle	r3, #48	; 0x30
 8008324:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008328:	f105 35ff 	addle.w	r5, r5, #4294967295
 800832c:	1b52      	subs	r2, r2, r5
 800832e:	6122      	str	r2, [r4, #16]
 8008330:	f8cd a000 	str.w	sl, [sp]
 8008334:	464b      	mov	r3, r9
 8008336:	aa03      	add	r2, sp, #12
 8008338:	4621      	mov	r1, r4
 800833a:	4640      	mov	r0, r8
 800833c:	f7ff fee2 	bl	8008104 <_printf_common>
 8008340:	3001      	adds	r0, #1
 8008342:	d14c      	bne.n	80083de <_printf_i+0x1fe>
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	b004      	add	sp, #16
 800834a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834e:	4835      	ldr	r0, [pc, #212]	; (8008424 <_printf_i+0x244>)
 8008350:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008354:	6829      	ldr	r1, [r5, #0]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	f851 6b04 	ldr.w	r6, [r1], #4
 800835c:	6029      	str	r1, [r5, #0]
 800835e:	061d      	lsls	r5, r3, #24
 8008360:	d514      	bpl.n	800838c <_printf_i+0x1ac>
 8008362:	07df      	lsls	r7, r3, #31
 8008364:	bf44      	itt	mi
 8008366:	f043 0320 	orrmi.w	r3, r3, #32
 800836a:	6023      	strmi	r3, [r4, #0]
 800836c:	b91e      	cbnz	r6, 8008376 <_printf_i+0x196>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	f023 0320 	bic.w	r3, r3, #32
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	2310      	movs	r3, #16
 8008378:	e7b0      	b.n	80082dc <_printf_i+0xfc>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	f043 0320 	orr.w	r3, r3, #32
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	2378      	movs	r3, #120	; 0x78
 8008384:	4828      	ldr	r0, [pc, #160]	; (8008428 <_printf_i+0x248>)
 8008386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800838a:	e7e3      	b.n	8008354 <_printf_i+0x174>
 800838c:	0659      	lsls	r1, r3, #25
 800838e:	bf48      	it	mi
 8008390:	b2b6      	uxthmi	r6, r6
 8008392:	e7e6      	b.n	8008362 <_printf_i+0x182>
 8008394:	4615      	mov	r5, r2
 8008396:	e7bb      	b.n	8008310 <_printf_i+0x130>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	6826      	ldr	r6, [r4, #0]
 800839c:	6961      	ldr	r1, [r4, #20]
 800839e:	1d18      	adds	r0, r3, #4
 80083a0:	6028      	str	r0, [r5, #0]
 80083a2:	0635      	lsls	r5, r6, #24
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	d501      	bpl.n	80083ac <_printf_i+0x1cc>
 80083a8:	6019      	str	r1, [r3, #0]
 80083aa:	e002      	b.n	80083b2 <_printf_i+0x1d2>
 80083ac:	0670      	lsls	r0, r6, #25
 80083ae:	d5fb      	bpl.n	80083a8 <_printf_i+0x1c8>
 80083b0:	8019      	strh	r1, [r3, #0]
 80083b2:	2300      	movs	r3, #0
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	4615      	mov	r5, r2
 80083b8:	e7ba      	b.n	8008330 <_printf_i+0x150>
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	1d1a      	adds	r2, r3, #4
 80083be:	602a      	str	r2, [r5, #0]
 80083c0:	681d      	ldr	r5, [r3, #0]
 80083c2:	6862      	ldr	r2, [r4, #4]
 80083c4:	2100      	movs	r1, #0
 80083c6:	4628      	mov	r0, r5
 80083c8:	f7f7 ff22 	bl	8000210 <memchr>
 80083cc:	b108      	cbz	r0, 80083d2 <_printf_i+0x1f2>
 80083ce:	1b40      	subs	r0, r0, r5
 80083d0:	6060      	str	r0, [r4, #4]
 80083d2:	6863      	ldr	r3, [r4, #4]
 80083d4:	6123      	str	r3, [r4, #16]
 80083d6:	2300      	movs	r3, #0
 80083d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083dc:	e7a8      	b.n	8008330 <_printf_i+0x150>
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	462a      	mov	r2, r5
 80083e2:	4649      	mov	r1, r9
 80083e4:	4640      	mov	r0, r8
 80083e6:	47d0      	blx	sl
 80083e8:	3001      	adds	r0, #1
 80083ea:	d0ab      	beq.n	8008344 <_printf_i+0x164>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	079b      	lsls	r3, r3, #30
 80083f0:	d413      	bmi.n	800841a <_printf_i+0x23a>
 80083f2:	68e0      	ldr	r0, [r4, #12]
 80083f4:	9b03      	ldr	r3, [sp, #12]
 80083f6:	4298      	cmp	r0, r3
 80083f8:	bfb8      	it	lt
 80083fa:	4618      	movlt	r0, r3
 80083fc:	e7a4      	b.n	8008348 <_printf_i+0x168>
 80083fe:	2301      	movs	r3, #1
 8008400:	4632      	mov	r2, r6
 8008402:	4649      	mov	r1, r9
 8008404:	4640      	mov	r0, r8
 8008406:	47d0      	blx	sl
 8008408:	3001      	adds	r0, #1
 800840a:	d09b      	beq.n	8008344 <_printf_i+0x164>
 800840c:	3501      	adds	r5, #1
 800840e:	68e3      	ldr	r3, [r4, #12]
 8008410:	9903      	ldr	r1, [sp, #12]
 8008412:	1a5b      	subs	r3, r3, r1
 8008414:	42ab      	cmp	r3, r5
 8008416:	dcf2      	bgt.n	80083fe <_printf_i+0x21e>
 8008418:	e7eb      	b.n	80083f2 <_printf_i+0x212>
 800841a:	2500      	movs	r5, #0
 800841c:	f104 0619 	add.w	r6, r4, #25
 8008420:	e7f5      	b.n	800840e <_printf_i+0x22e>
 8008422:	bf00      	nop
 8008424:	08008cd9 	.word	0x08008cd9
 8008428:	08008cea 	.word	0x08008cea

0800842c <iprintf>:
 800842c:	b40f      	push	{r0, r1, r2, r3}
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <iprintf+0x2c>)
 8008430:	b513      	push	{r0, r1, r4, lr}
 8008432:	681c      	ldr	r4, [r3, #0]
 8008434:	b124      	cbz	r4, 8008440 <iprintf+0x14>
 8008436:	69a3      	ldr	r3, [r4, #24]
 8008438:	b913      	cbnz	r3, 8008440 <iprintf+0x14>
 800843a:	4620      	mov	r0, r4
 800843c:	f7ff fb3a 	bl	8007ab4 <__sinit>
 8008440:	ab05      	add	r3, sp, #20
 8008442:	9a04      	ldr	r2, [sp, #16]
 8008444:	68a1      	ldr	r1, [r4, #8]
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	4620      	mov	r0, r4
 800844a:	f7ff fd2b 	bl	8007ea4 <_vfiprintf_r>
 800844e:	b002      	add	sp, #8
 8008450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008454:	b004      	add	sp, #16
 8008456:	4770      	bx	lr
 8008458:	20000084 	.word	0x20000084

0800845c <cleanup_glue>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	460c      	mov	r4, r1
 8008460:	6809      	ldr	r1, [r1, #0]
 8008462:	4605      	mov	r5, r0
 8008464:	b109      	cbz	r1, 800846a <cleanup_glue+0xe>
 8008466:	f7ff fff9 	bl	800845c <cleanup_glue>
 800846a:	4621      	mov	r1, r4
 800846c:	4628      	mov	r0, r5
 800846e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008472:	f7ff bc0d 	b.w	8007c90 <_free_r>
	...

08008478 <_reclaim_reent>:
 8008478:	4b2c      	ldr	r3, [pc, #176]	; (800852c <_reclaim_reent+0xb4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4283      	cmp	r3, r0
 800847e:	b570      	push	{r4, r5, r6, lr}
 8008480:	4604      	mov	r4, r0
 8008482:	d051      	beq.n	8008528 <_reclaim_reent+0xb0>
 8008484:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008486:	b143      	cbz	r3, 800849a <_reclaim_reent+0x22>
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d14a      	bne.n	8008524 <_reclaim_reent+0xac>
 800848e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008490:	6819      	ldr	r1, [r3, #0]
 8008492:	b111      	cbz	r1, 800849a <_reclaim_reent+0x22>
 8008494:	4620      	mov	r0, r4
 8008496:	f7ff fbfb 	bl	8007c90 <_free_r>
 800849a:	6961      	ldr	r1, [r4, #20]
 800849c:	b111      	cbz	r1, 80084a4 <_reclaim_reent+0x2c>
 800849e:	4620      	mov	r0, r4
 80084a0:	f7ff fbf6 	bl	8007c90 <_free_r>
 80084a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80084a6:	b111      	cbz	r1, 80084ae <_reclaim_reent+0x36>
 80084a8:	4620      	mov	r0, r4
 80084aa:	f7ff fbf1 	bl	8007c90 <_free_r>
 80084ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084b0:	b111      	cbz	r1, 80084b8 <_reclaim_reent+0x40>
 80084b2:	4620      	mov	r0, r4
 80084b4:	f7ff fbec 	bl	8007c90 <_free_r>
 80084b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80084ba:	b111      	cbz	r1, 80084c2 <_reclaim_reent+0x4a>
 80084bc:	4620      	mov	r0, r4
 80084be:	f7ff fbe7 	bl	8007c90 <_free_r>
 80084c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80084c4:	b111      	cbz	r1, 80084cc <_reclaim_reent+0x54>
 80084c6:	4620      	mov	r0, r4
 80084c8:	f7ff fbe2 	bl	8007c90 <_free_r>
 80084cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80084ce:	b111      	cbz	r1, 80084d6 <_reclaim_reent+0x5e>
 80084d0:	4620      	mov	r0, r4
 80084d2:	f7ff fbdd 	bl	8007c90 <_free_r>
 80084d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80084d8:	b111      	cbz	r1, 80084e0 <_reclaim_reent+0x68>
 80084da:	4620      	mov	r0, r4
 80084dc:	f7ff fbd8 	bl	8007c90 <_free_r>
 80084e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084e2:	b111      	cbz	r1, 80084ea <_reclaim_reent+0x72>
 80084e4:	4620      	mov	r0, r4
 80084e6:	f7ff fbd3 	bl	8007c90 <_free_r>
 80084ea:	69a3      	ldr	r3, [r4, #24]
 80084ec:	b1e3      	cbz	r3, 8008528 <_reclaim_reent+0xb0>
 80084ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80084f0:	4620      	mov	r0, r4
 80084f2:	4798      	blx	r3
 80084f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80084f6:	b1b9      	cbz	r1, 8008528 <_reclaim_reent+0xb0>
 80084f8:	4620      	mov	r0, r4
 80084fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084fe:	f7ff bfad 	b.w	800845c <cleanup_glue>
 8008502:	5949      	ldr	r1, [r1, r5]
 8008504:	b941      	cbnz	r1, 8008518 <_reclaim_reent+0xa0>
 8008506:	3504      	adds	r5, #4
 8008508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800850a:	2d80      	cmp	r5, #128	; 0x80
 800850c:	68d9      	ldr	r1, [r3, #12]
 800850e:	d1f8      	bne.n	8008502 <_reclaim_reent+0x8a>
 8008510:	4620      	mov	r0, r4
 8008512:	f7ff fbbd 	bl	8007c90 <_free_r>
 8008516:	e7ba      	b.n	800848e <_reclaim_reent+0x16>
 8008518:	680e      	ldr	r6, [r1, #0]
 800851a:	4620      	mov	r0, r4
 800851c:	f7ff fbb8 	bl	8007c90 <_free_r>
 8008520:	4631      	mov	r1, r6
 8008522:	e7ef      	b.n	8008504 <_reclaim_reent+0x8c>
 8008524:	2500      	movs	r5, #0
 8008526:	e7ef      	b.n	8008508 <_reclaim_reent+0x90>
 8008528:	bd70      	pop	{r4, r5, r6, pc}
 800852a:	bf00      	nop
 800852c:	20000084 	.word	0x20000084

08008530 <_sbrk_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d06      	ldr	r5, [pc, #24]	; (800854c <_sbrk_r+0x1c>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	f7f8 fce0 	bl	8000f00 <_sbrk>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_sbrk_r+0x1a>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_sbrk_r+0x1a>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	20004cd8 	.word	0x20004cd8

08008550 <__sread>:
 8008550:	b510      	push	{r4, lr}
 8008552:	460c      	mov	r4, r1
 8008554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008558:	f000 f9ac 	bl	80088b4 <_read_r>
 800855c:	2800      	cmp	r0, #0
 800855e:	bfab      	itete	ge
 8008560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008562:	89a3      	ldrhlt	r3, [r4, #12]
 8008564:	181b      	addge	r3, r3, r0
 8008566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800856a:	bfac      	ite	ge
 800856c:	6563      	strge	r3, [r4, #84]	; 0x54
 800856e:	81a3      	strhlt	r3, [r4, #12]
 8008570:	bd10      	pop	{r4, pc}

08008572 <__swrite>:
 8008572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008576:	461f      	mov	r7, r3
 8008578:	898b      	ldrh	r3, [r1, #12]
 800857a:	05db      	lsls	r3, r3, #23
 800857c:	4605      	mov	r5, r0
 800857e:	460c      	mov	r4, r1
 8008580:	4616      	mov	r6, r2
 8008582:	d505      	bpl.n	8008590 <__swrite+0x1e>
 8008584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008588:	2302      	movs	r3, #2
 800858a:	2200      	movs	r2, #0
 800858c:	f000 f90e 	bl	80087ac <_lseek_r>
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	4632      	mov	r2, r6
 800859e:	463b      	mov	r3, r7
 80085a0:	4628      	mov	r0, r5
 80085a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085a6:	f000 b869 	b.w	800867c <_write_r>

080085aa <__sseek>:
 80085aa:	b510      	push	{r4, lr}
 80085ac:	460c      	mov	r4, r1
 80085ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b2:	f000 f8fb 	bl	80087ac <_lseek_r>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	bf15      	itete	ne
 80085bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80085be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085c6:	81a3      	strheq	r3, [r4, #12]
 80085c8:	bf18      	it	ne
 80085ca:	81a3      	strhne	r3, [r4, #12]
 80085cc:	bd10      	pop	{r4, pc}

080085ce <__sclose>:
 80085ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d2:	f000 b8db 	b.w	800878c <_close_r>
	...

080085d8 <__swbuf_r>:
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085da:	460e      	mov	r6, r1
 80085dc:	4614      	mov	r4, r2
 80085de:	4605      	mov	r5, r0
 80085e0:	b118      	cbz	r0, 80085ea <__swbuf_r+0x12>
 80085e2:	6983      	ldr	r3, [r0, #24]
 80085e4:	b90b      	cbnz	r3, 80085ea <__swbuf_r+0x12>
 80085e6:	f7ff fa65 	bl	8007ab4 <__sinit>
 80085ea:	4b21      	ldr	r3, [pc, #132]	; (8008670 <__swbuf_r+0x98>)
 80085ec:	429c      	cmp	r4, r3
 80085ee:	d12b      	bne.n	8008648 <__swbuf_r+0x70>
 80085f0:	686c      	ldr	r4, [r5, #4]
 80085f2:	69a3      	ldr	r3, [r4, #24]
 80085f4:	60a3      	str	r3, [r4, #8]
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	071a      	lsls	r2, r3, #28
 80085fa:	d52f      	bpl.n	800865c <__swbuf_r+0x84>
 80085fc:	6923      	ldr	r3, [r4, #16]
 80085fe:	b36b      	cbz	r3, 800865c <__swbuf_r+0x84>
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	6820      	ldr	r0, [r4, #0]
 8008604:	1ac0      	subs	r0, r0, r3
 8008606:	6963      	ldr	r3, [r4, #20]
 8008608:	b2f6      	uxtb	r6, r6
 800860a:	4283      	cmp	r3, r0
 800860c:	4637      	mov	r7, r6
 800860e:	dc04      	bgt.n	800861a <__swbuf_r+0x42>
 8008610:	4621      	mov	r1, r4
 8008612:	4628      	mov	r0, r5
 8008614:	f7ff f9a8 	bl	8007968 <_fflush_r>
 8008618:	bb30      	cbnz	r0, 8008668 <__swbuf_r+0x90>
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	3b01      	subs	r3, #1
 800861e:	60a3      	str	r3, [r4, #8]
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	6022      	str	r2, [r4, #0]
 8008626:	701e      	strb	r6, [r3, #0]
 8008628:	6963      	ldr	r3, [r4, #20]
 800862a:	3001      	adds	r0, #1
 800862c:	4283      	cmp	r3, r0
 800862e:	d004      	beq.n	800863a <__swbuf_r+0x62>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	07db      	lsls	r3, r3, #31
 8008634:	d506      	bpl.n	8008644 <__swbuf_r+0x6c>
 8008636:	2e0a      	cmp	r6, #10
 8008638:	d104      	bne.n	8008644 <__swbuf_r+0x6c>
 800863a:	4621      	mov	r1, r4
 800863c:	4628      	mov	r0, r5
 800863e:	f7ff f993 	bl	8007968 <_fflush_r>
 8008642:	b988      	cbnz	r0, 8008668 <__swbuf_r+0x90>
 8008644:	4638      	mov	r0, r7
 8008646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008648:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <__swbuf_r+0x9c>)
 800864a:	429c      	cmp	r4, r3
 800864c:	d101      	bne.n	8008652 <__swbuf_r+0x7a>
 800864e:	68ac      	ldr	r4, [r5, #8]
 8008650:	e7cf      	b.n	80085f2 <__swbuf_r+0x1a>
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <__swbuf_r+0xa0>)
 8008654:	429c      	cmp	r4, r3
 8008656:	bf08      	it	eq
 8008658:	68ec      	ldreq	r4, [r5, #12]
 800865a:	e7ca      	b.n	80085f2 <__swbuf_r+0x1a>
 800865c:	4621      	mov	r1, r4
 800865e:	4628      	mov	r0, r5
 8008660:	f000 f81e 	bl	80086a0 <__swsetup_r>
 8008664:	2800      	cmp	r0, #0
 8008666:	d0cb      	beq.n	8008600 <__swbuf_r+0x28>
 8008668:	f04f 37ff 	mov.w	r7, #4294967295
 800866c:	e7ea      	b.n	8008644 <__swbuf_r+0x6c>
 800866e:	bf00      	nop
 8008670:	08008c84 	.word	0x08008c84
 8008674:	08008ca4 	.word	0x08008ca4
 8008678:	08008c64 	.word	0x08008c64

0800867c <_write_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d07      	ldr	r5, [pc, #28]	; (800869c <_write_r+0x20>)
 8008680:	4604      	mov	r4, r0
 8008682:	4608      	mov	r0, r1
 8008684:	4611      	mov	r1, r2
 8008686:	2200      	movs	r2, #0
 8008688:	602a      	str	r2, [r5, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	f7f8 fbe7 	bl	8000e5e <_write>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_write_r+0x1e>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_write_r+0x1e>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	20004cd8 	.word	0x20004cd8

080086a0 <__swsetup_r>:
 80086a0:	4b32      	ldr	r3, [pc, #200]	; (800876c <__swsetup_r+0xcc>)
 80086a2:	b570      	push	{r4, r5, r6, lr}
 80086a4:	681d      	ldr	r5, [r3, #0]
 80086a6:	4606      	mov	r6, r0
 80086a8:	460c      	mov	r4, r1
 80086aa:	b125      	cbz	r5, 80086b6 <__swsetup_r+0x16>
 80086ac:	69ab      	ldr	r3, [r5, #24]
 80086ae:	b913      	cbnz	r3, 80086b6 <__swsetup_r+0x16>
 80086b0:	4628      	mov	r0, r5
 80086b2:	f7ff f9ff 	bl	8007ab4 <__sinit>
 80086b6:	4b2e      	ldr	r3, [pc, #184]	; (8008770 <__swsetup_r+0xd0>)
 80086b8:	429c      	cmp	r4, r3
 80086ba:	d10f      	bne.n	80086dc <__swsetup_r+0x3c>
 80086bc:	686c      	ldr	r4, [r5, #4]
 80086be:	89a3      	ldrh	r3, [r4, #12]
 80086c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086c4:	0719      	lsls	r1, r3, #28
 80086c6:	d42c      	bmi.n	8008722 <__swsetup_r+0x82>
 80086c8:	06dd      	lsls	r5, r3, #27
 80086ca:	d411      	bmi.n	80086f0 <__swsetup_r+0x50>
 80086cc:	2309      	movs	r3, #9
 80086ce:	6033      	str	r3, [r6, #0]
 80086d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086d4:	81a3      	strh	r3, [r4, #12]
 80086d6:	f04f 30ff 	mov.w	r0, #4294967295
 80086da:	e03e      	b.n	800875a <__swsetup_r+0xba>
 80086dc:	4b25      	ldr	r3, [pc, #148]	; (8008774 <__swsetup_r+0xd4>)
 80086de:	429c      	cmp	r4, r3
 80086e0:	d101      	bne.n	80086e6 <__swsetup_r+0x46>
 80086e2:	68ac      	ldr	r4, [r5, #8]
 80086e4:	e7eb      	b.n	80086be <__swsetup_r+0x1e>
 80086e6:	4b24      	ldr	r3, [pc, #144]	; (8008778 <__swsetup_r+0xd8>)
 80086e8:	429c      	cmp	r4, r3
 80086ea:	bf08      	it	eq
 80086ec:	68ec      	ldreq	r4, [r5, #12]
 80086ee:	e7e6      	b.n	80086be <__swsetup_r+0x1e>
 80086f0:	0758      	lsls	r0, r3, #29
 80086f2:	d512      	bpl.n	800871a <__swsetup_r+0x7a>
 80086f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086f6:	b141      	cbz	r1, 800870a <__swsetup_r+0x6a>
 80086f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086fc:	4299      	cmp	r1, r3
 80086fe:	d002      	beq.n	8008706 <__swsetup_r+0x66>
 8008700:	4630      	mov	r0, r6
 8008702:	f7ff fac5 	bl	8007c90 <_free_r>
 8008706:	2300      	movs	r3, #0
 8008708:	6363      	str	r3, [r4, #52]	; 0x34
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008710:	81a3      	strh	r3, [r4, #12]
 8008712:	2300      	movs	r3, #0
 8008714:	6063      	str	r3, [r4, #4]
 8008716:	6923      	ldr	r3, [r4, #16]
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	f043 0308 	orr.w	r3, r3, #8
 8008720:	81a3      	strh	r3, [r4, #12]
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	b94b      	cbnz	r3, 800873a <__swsetup_r+0x9a>
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800872c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008730:	d003      	beq.n	800873a <__swsetup_r+0x9a>
 8008732:	4621      	mov	r1, r4
 8008734:	4630      	mov	r0, r6
 8008736:	f000 f871 	bl	800881c <__smakebuf_r>
 800873a:	89a0      	ldrh	r0, [r4, #12]
 800873c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008740:	f010 0301 	ands.w	r3, r0, #1
 8008744:	d00a      	beq.n	800875c <__swsetup_r+0xbc>
 8008746:	2300      	movs	r3, #0
 8008748:	60a3      	str	r3, [r4, #8]
 800874a:	6963      	ldr	r3, [r4, #20]
 800874c:	425b      	negs	r3, r3
 800874e:	61a3      	str	r3, [r4, #24]
 8008750:	6923      	ldr	r3, [r4, #16]
 8008752:	b943      	cbnz	r3, 8008766 <__swsetup_r+0xc6>
 8008754:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008758:	d1ba      	bne.n	80086d0 <__swsetup_r+0x30>
 800875a:	bd70      	pop	{r4, r5, r6, pc}
 800875c:	0781      	lsls	r1, r0, #30
 800875e:	bf58      	it	pl
 8008760:	6963      	ldrpl	r3, [r4, #20]
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	e7f4      	b.n	8008750 <__swsetup_r+0xb0>
 8008766:	2000      	movs	r0, #0
 8008768:	e7f7      	b.n	800875a <__swsetup_r+0xba>
 800876a:	bf00      	nop
 800876c:	20000084 	.word	0x20000084
 8008770:	08008c84 	.word	0x08008c84
 8008774:	08008ca4 	.word	0x08008ca4
 8008778:	08008c64 	.word	0x08008c64

0800877c <abort>:
 800877c:	b508      	push	{r3, lr}
 800877e:	2006      	movs	r0, #6
 8008780:	f000 f8d2 	bl	8008928 <raise>
 8008784:	2001      	movs	r0, #1
 8008786:	f7f8 fb43 	bl	8000e10 <_exit>
	...

0800878c <_close_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d06      	ldr	r5, [pc, #24]	; (80087a8 <_close_r+0x1c>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	602b      	str	r3, [r5, #0]
 8008798:	f7f8 fb7d 	bl	8000e96 <_close>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_close_r+0x1a>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_close_r+0x1a>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	20004cd8 	.word	0x20004cd8

080087ac <_lseek_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d07      	ldr	r5, [pc, #28]	; (80087cc <_lseek_r+0x20>)
 80087b0:	4604      	mov	r4, r0
 80087b2:	4608      	mov	r0, r1
 80087b4:	4611      	mov	r1, r2
 80087b6:	2200      	movs	r2, #0
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	f7f8 fb92 	bl	8000ee4 <_lseek>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d102      	bne.n	80087ca <_lseek_r+0x1e>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	b103      	cbz	r3, 80087ca <_lseek_r+0x1e>
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	20004cd8 	.word	0x20004cd8

080087d0 <__swhatbuf_r>:
 80087d0:	b570      	push	{r4, r5, r6, lr}
 80087d2:	460e      	mov	r6, r1
 80087d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d8:	2900      	cmp	r1, #0
 80087da:	b096      	sub	sp, #88	; 0x58
 80087dc:	4614      	mov	r4, r2
 80087de:	461d      	mov	r5, r3
 80087e0:	da08      	bge.n	80087f4 <__swhatbuf_r+0x24>
 80087e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	602a      	str	r2, [r5, #0]
 80087ea:	061a      	lsls	r2, r3, #24
 80087ec:	d410      	bmi.n	8008810 <__swhatbuf_r+0x40>
 80087ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f2:	e00e      	b.n	8008812 <__swhatbuf_r+0x42>
 80087f4:	466a      	mov	r2, sp
 80087f6:	f000 f8b3 	bl	8008960 <_fstat_r>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	dbf1      	blt.n	80087e2 <__swhatbuf_r+0x12>
 80087fe:	9a01      	ldr	r2, [sp, #4]
 8008800:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008804:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008808:	425a      	negs	r2, r3
 800880a:	415a      	adcs	r2, r3
 800880c:	602a      	str	r2, [r5, #0]
 800880e:	e7ee      	b.n	80087ee <__swhatbuf_r+0x1e>
 8008810:	2340      	movs	r3, #64	; 0x40
 8008812:	2000      	movs	r0, #0
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	b016      	add	sp, #88	; 0x58
 8008818:	bd70      	pop	{r4, r5, r6, pc}
	...

0800881c <__smakebuf_r>:
 800881c:	898b      	ldrh	r3, [r1, #12]
 800881e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008820:	079d      	lsls	r5, r3, #30
 8008822:	4606      	mov	r6, r0
 8008824:	460c      	mov	r4, r1
 8008826:	d507      	bpl.n	8008838 <__smakebuf_r+0x1c>
 8008828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	6123      	str	r3, [r4, #16]
 8008830:	2301      	movs	r3, #1
 8008832:	6163      	str	r3, [r4, #20]
 8008834:	b002      	add	sp, #8
 8008836:	bd70      	pop	{r4, r5, r6, pc}
 8008838:	ab01      	add	r3, sp, #4
 800883a:	466a      	mov	r2, sp
 800883c:	f7ff ffc8 	bl	80087d0 <__swhatbuf_r>
 8008840:	9900      	ldr	r1, [sp, #0]
 8008842:	4605      	mov	r5, r0
 8008844:	4630      	mov	r0, r6
 8008846:	f7ff fa8f 	bl	8007d68 <_malloc_r>
 800884a:	b948      	cbnz	r0, 8008860 <__smakebuf_r+0x44>
 800884c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008850:	059a      	lsls	r2, r3, #22
 8008852:	d4ef      	bmi.n	8008834 <__smakebuf_r+0x18>
 8008854:	f023 0303 	bic.w	r3, r3, #3
 8008858:	f043 0302 	orr.w	r3, r3, #2
 800885c:	81a3      	strh	r3, [r4, #12]
 800885e:	e7e3      	b.n	8008828 <__smakebuf_r+0xc>
 8008860:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <__smakebuf_r+0x7c>)
 8008862:	62b3      	str	r3, [r6, #40]	; 0x28
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	6020      	str	r0, [r4, #0]
 8008868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	9b00      	ldr	r3, [sp, #0]
 8008870:	6163      	str	r3, [r4, #20]
 8008872:	9b01      	ldr	r3, [sp, #4]
 8008874:	6120      	str	r0, [r4, #16]
 8008876:	b15b      	cbz	r3, 8008890 <__smakebuf_r+0x74>
 8008878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800887c:	4630      	mov	r0, r6
 800887e:	f000 f881 	bl	8008984 <_isatty_r>
 8008882:	b128      	cbz	r0, 8008890 <__smakebuf_r+0x74>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f023 0303 	bic.w	r3, r3, #3
 800888a:	f043 0301 	orr.w	r3, r3, #1
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	89a0      	ldrh	r0, [r4, #12]
 8008892:	4305      	orrs	r5, r0
 8008894:	81a5      	strh	r5, [r4, #12]
 8008896:	e7cd      	b.n	8008834 <__smakebuf_r+0x18>
 8008898:	08007a4d 	.word	0x08007a4d

0800889c <__malloc_lock>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__malloc_lock+0x8>)
 800889e:	f7ff b9de 	b.w	8007c5e <__retarget_lock_acquire_recursive>
 80088a2:	bf00      	nop
 80088a4:	20004ccc 	.word	0x20004ccc

080088a8 <__malloc_unlock>:
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <__malloc_unlock+0x8>)
 80088aa:	f7ff b9d9 	b.w	8007c60 <__retarget_lock_release_recursive>
 80088ae:	bf00      	nop
 80088b0:	20004ccc 	.word	0x20004ccc

080088b4 <_read_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4d07      	ldr	r5, [pc, #28]	; (80088d4 <_read_r+0x20>)
 80088b8:	4604      	mov	r4, r0
 80088ba:	4608      	mov	r0, r1
 80088bc:	4611      	mov	r1, r2
 80088be:	2200      	movs	r2, #0
 80088c0:	602a      	str	r2, [r5, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	f7f8 faae 	bl	8000e24 <_read>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_read_r+0x1e>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_read_r+0x1e>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20004cd8 	.word	0x20004cd8

080088d8 <_raise_r>:
 80088d8:	291f      	cmp	r1, #31
 80088da:	b538      	push	{r3, r4, r5, lr}
 80088dc:	4604      	mov	r4, r0
 80088de:	460d      	mov	r5, r1
 80088e0:	d904      	bls.n	80088ec <_raise_r+0x14>
 80088e2:	2316      	movs	r3, #22
 80088e4:	6003      	str	r3, [r0, #0]
 80088e6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088ee:	b112      	cbz	r2, 80088f6 <_raise_r+0x1e>
 80088f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088f4:	b94b      	cbnz	r3, 800890a <_raise_r+0x32>
 80088f6:	4620      	mov	r0, r4
 80088f8:	f000 f830 	bl	800895c <_getpid_r>
 80088fc:	462a      	mov	r2, r5
 80088fe:	4601      	mov	r1, r0
 8008900:	4620      	mov	r0, r4
 8008902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008906:	f000 b817 	b.w	8008938 <_kill_r>
 800890a:	2b01      	cmp	r3, #1
 800890c:	d00a      	beq.n	8008924 <_raise_r+0x4c>
 800890e:	1c59      	adds	r1, r3, #1
 8008910:	d103      	bne.n	800891a <_raise_r+0x42>
 8008912:	2316      	movs	r3, #22
 8008914:	6003      	str	r3, [r0, #0]
 8008916:	2001      	movs	r0, #1
 8008918:	e7e7      	b.n	80088ea <_raise_r+0x12>
 800891a:	2400      	movs	r4, #0
 800891c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008920:	4628      	mov	r0, r5
 8008922:	4798      	blx	r3
 8008924:	2000      	movs	r0, #0
 8008926:	e7e0      	b.n	80088ea <_raise_r+0x12>

08008928 <raise>:
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <raise+0xc>)
 800892a:	4601      	mov	r1, r0
 800892c:	6818      	ldr	r0, [r3, #0]
 800892e:	f7ff bfd3 	b.w	80088d8 <_raise_r>
 8008932:	bf00      	nop
 8008934:	20000084 	.word	0x20000084

08008938 <_kill_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	; (8008958 <_kill_r+0x20>)
 800893c:	2300      	movs	r3, #0
 800893e:	4604      	mov	r4, r0
 8008940:	4608      	mov	r0, r1
 8008942:	4611      	mov	r1, r2
 8008944:	602b      	str	r3, [r5, #0]
 8008946:	f7f8 fa53 	bl	8000df0 <_kill>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	d102      	bne.n	8008954 <_kill_r+0x1c>
 800894e:	682b      	ldr	r3, [r5, #0]
 8008950:	b103      	cbz	r3, 8008954 <_kill_r+0x1c>
 8008952:	6023      	str	r3, [r4, #0]
 8008954:	bd38      	pop	{r3, r4, r5, pc}
 8008956:	bf00      	nop
 8008958:	20004cd8 	.word	0x20004cd8

0800895c <_getpid_r>:
 800895c:	f7f8 ba40 	b.w	8000de0 <_getpid>

08008960 <_fstat_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d07      	ldr	r5, [pc, #28]	; (8008980 <_fstat_r+0x20>)
 8008964:	2300      	movs	r3, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	4611      	mov	r1, r2
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	f7f8 fa9e 	bl	8000eae <_fstat>
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	d102      	bne.n	800897c <_fstat_r+0x1c>
 8008976:	682b      	ldr	r3, [r5, #0]
 8008978:	b103      	cbz	r3, 800897c <_fstat_r+0x1c>
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	bd38      	pop	{r3, r4, r5, pc}
 800897e:	bf00      	nop
 8008980:	20004cd8 	.word	0x20004cd8

08008984 <_isatty_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d06      	ldr	r5, [pc, #24]	; (80089a0 <_isatty_r+0x1c>)
 8008988:	2300      	movs	r3, #0
 800898a:	4604      	mov	r4, r0
 800898c:	4608      	mov	r0, r1
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	f7f8 fa9d 	bl	8000ece <_isatty>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_isatty_r+0x1a>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_isatty_r+0x1a>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	20004cd8 	.word	0x20004cd8

080089a4 <_init>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	bf00      	nop
 80089a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089aa:	bc08      	pop	{r3}
 80089ac:	469e      	mov	lr, r3
 80089ae:	4770      	bx	lr

080089b0 <_fini>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	bf00      	nop
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr
