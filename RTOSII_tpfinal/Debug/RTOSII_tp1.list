
RTOSII_tp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006518  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080066e8  080066e8  000166e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f8  080067f8  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  080067f8  080067f8  000167f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006800  08006800  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08006808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b80  200000c8  080068d0  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c48  080068d0  00024c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c157  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d18  00000000  00000000  0003c24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  000416b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254c0  00000000  00000000  00042c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad12  00000000  00000000  00068140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc939  00000000  00000000  00082e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f78b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006494  00000000  00000000  0015f7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080066d0 	.word	0x080066d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	080066d0 	.word	0x080066d0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200000e4 	.word	0x200000e4
 8000544:	200001a8 	.word	0x200001a8

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fc23 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f827 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f935 	bl	80007c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800055a:	f000 f8db 	bl	8000714 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055e:	f000 f903 	bl	8000768 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000562:	f000 f88b 	bl	800067c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 8000566:	480c      	ldr	r0, [pc, #48]	; (8000598 <main+0x50>)
 8000568:	f002 fa92 	bl	8002a90 <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 800056c:	f005 fc82 	bl	8005e74 <app_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <main+0x54>)
 8000572:	1d3c      	adds	r4, r7, #4
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 f9ab 	bl	80048e2 <osThreadCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <main+0x58>)
 8000590:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000592:	f004 f99f 	bl	80048d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	e7fe      	b.n	8000596 <main+0x4e>
 8000598:	200003a8 	.word	0x200003a8
 800059c:	080066f4 	.word	0x080066f4
 80005a0:	20000940 	.word	0x20000940

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 ffc2 	bl	800653c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <SystemClock_Config+0xd0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a28      	ldr	r2, [pc, #160]	; (8000674 <SystemClock_Config+0xd0>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <SystemClock_Config+0xd0>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <SystemClock_Config+0xd4>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000604:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000618:	23a8      	movs	r3, #168	; 0xa8
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000620:	2307      	movs	r3, #7
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f001 ff41 	bl	80024b4 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000638:	f000 f9b2 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f884 	bl	8001768 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000666:	f000 f99b 	bl	80009a0 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_TIM2_Init+0x94>)
 800069a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_TIM2_Init+0x94>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_TIM2_Init+0x94>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42-1;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_TIM2_Init+0x94>)
 80006ae:	2229      	movs	r2, #41	; 0x29
 80006b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_TIM2_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_TIM2_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <MX_TIM2_Init+0x94>)
 80006c0:	f002 f996 	bl	80029f0 <HAL_TIM_Base_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f969 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_TIM2_Init+0x94>)
 80006dc:	f002 fb50 	bl	8002d80 <HAL_TIM_ConfigClockSource>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f95b 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_TIM2_Init+0x94>)
 80006f8:	f002 fd6c 	bl	80031d4 <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000702:	f000 f94d 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200003a8 	.word	0x200003a8

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART3_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800074c:	f002 fdd2 	bl	80032f4 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f923 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200003f0 	.word	0x200003f0
 8000764:	40004800 	.word	0x40004800

08000768 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000772:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2206      	movs	r2, #6
 8000778:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2202      	movs	r2, #2
 800077e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2202      	movs	r2, #2
 800078a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2201      	movs	r2, #1
 8000790:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	f000 fe93 	bl	80014d6 <HAL_PCD_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f8f3 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000434 	.word	0x20000434

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b4c      	ldr	r3, [pc, #304]	; (8000910 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a4b      	ldr	r2, [pc, #300]	; (8000910 <MX_GPIO_Init+0x14c>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b49      	ldr	r3, [pc, #292]	; (8000910 <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b45      	ldr	r3, [pc, #276]	; (8000910 <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a44      	ldr	r2, [pc, #272]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b42      	ldr	r3, [pc, #264]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b3e      	ldr	r3, [pc, #248]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a3d      	ldr	r2, [pc, #244]	; (8000910 <MX_GPIO_Init+0x14c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a36      	ldr	r2, [pc, #216]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b30      	ldr	r3, [pc, #192]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a2f      	ldr	r2, [pc, #188]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a28      	ldr	r2, [pc, #160]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f244 0181 	movw	r1, #16513	; 0x4081
 8000888:	4822      	ldr	r0, [pc, #136]	; (8000914 <MX_GPIO_Init+0x150>)
 800088a:	f000 fe0b 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	4821      	ldr	r0, [pc, #132]	; (8000918 <MX_GPIO_Init+0x154>)
 8000894:	f000 fe06 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	481b      	ldr	r0, [pc, #108]	; (800091c <MX_GPIO_Init+0x158>)
 80008b0:	f000 fc4c 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_GPIO_Init+0x150>)
 80008ce:	f000 fc3d 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d2:	2340      	movs	r3, #64	; 0x40
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <MX_GPIO_Init+0x154>)
 80008ea:	f000 fc2f 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_GPIO_Init+0x154>)
 8000902:	f000 fc23 	bl	800114c <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	; 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40020400 	.word	0x40020400
 8000918:	40021800 	.word	0x40021800
 800091c:	40020800 	.word	0x40020800

08000920 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <configureTimerForRunTimeStats+0x14>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	20000944 	.word	0x20000944

08000938 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <getRunTimeCounterValue+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000944 	.word	0x20000944

08000950 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(0xFFFFFFFF);		/* Miximum delay = (2**32-1) tick */
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f004 f80d 	bl	800497a <osDelay>
 8000960:	e7fa      	b.n	8000958 <StartDefaultTask+0x8>
	...

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a09      	ldr	r2, [pc, #36]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000976:	f000 fa31 	bl	8000ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000982:	d104      	bne.n	800098e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800098c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40010000 	.word	0x40010000
 800099c:	20000944 	.word	0x20000944

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_MspInit+0x54>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <HAL_MspInit+0x54>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_MspInit+0x54>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_MspInit+0x54>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	210f      	movs	r1, #15
 80009ee:	f06f 0001 	mvn.w	r0, #1
 80009f2:	f000 faef 	bl	8000fd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a14:	d115      	bne.n	8000a42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_TIM_Base_MspInit+0x48>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <HAL_TIM_Base_MspInit+0x48>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_TIM_Base_MspInit+0x48>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	201c      	movs	r0, #28
 8000a38:	f000 facc 	bl	8000fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a3c:	201c      	movs	r0, #28
 8000a3e:	f000 fae5 	bl	800100c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_UART_MspInit+0x94>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d134      	bne.n	8000adc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000abc:	2307      	movs	r3, #7
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <HAL_UART_MspInit+0x9c>)
 8000ac8:	f000 fb40 	bl	800114c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2105      	movs	r1, #5
 8000ad0:	2027      	movs	r0, #39	; 0x27
 8000ad2:	f000 fa7f 	bl	8000fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ad6:	2027      	movs	r0, #39	; 0x27
 8000ad8:	f000 fa98 	bl	800100c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40004800 	.word	0x40004800
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020c00 	.word	0x40020c00

08000af0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0a0      	sub	sp, #128	; 0x80
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	225c      	movs	r2, #92	; 0x5c
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f005 fd13 	bl	800653c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b1e:	d14e      	bne.n	8000bbe <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b26:	2300      	movs	r3, #0
 8000b28:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 ff66 	bl	8001a00 <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000b3a:	f7ff ff31 	bl	80009a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <HAL_PCD_MspInit+0xd8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <HAL_PCD_MspInit+0xd8>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <HAL_PCD_MspInit+0xd8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b5a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b6c:	230a      	movs	r3, #10
 8000b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b74:	4619      	mov	r1, r3
 8000b76:	4815      	ldr	r0, [pc, #84]	; (8000bcc <HAL_PCD_MspInit+0xdc>)
 8000b78:	f000 fae8 	bl	800114c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480e      	ldr	r0, [pc, #56]	; (8000bcc <HAL_PCD_MspInit+0xdc>)
 8000b92:	f000 fadb 	bl	800114c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_PCD_MspInit+0xd8>)
 8000b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <HAL_PCD_MspInit+0xd8>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_PCD_MspInit+0xd8>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_PCD_MspInit+0xd8>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_PCD_MspInit+0xd8>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3780      	adds	r7, #128	; 0x80
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <HAL_InitTick+0xd4>)
 8000be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be8:	4a2e      	ldr	r2, [pc, #184]	; (8000ca4 <HAL_InitTick+0xd4>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf0:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <HAL_InitTick+0xd4>)
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfc:	f107 020c 	add.w	r2, r7, #12
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fec8 	bl	800199c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c0c:	f000 feb2 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 8000c10:	4603      	mov	r3, r0
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <HAL_InitTick+0xd8>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	0c9b      	lsrs	r3, r3, #18
 8000c20:	3b01      	subs	r3, #1
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <HAL_InitTick+0xdc>)
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <HAL_InitTick+0xe0>)
 8000c28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <HAL_InitTick+0xdc>)
 8000c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c32:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <HAL_InitTick+0xdc>)
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <HAL_InitTick+0xdc>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_InitTick+0xdc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_InitTick+0xdc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c4a:	4818      	ldr	r0, [pc, #96]	; (8000cac <HAL_InitTick+0xdc>)
 8000c4c:	f001 fed0 	bl	80029f0 <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d11b      	bne.n	8000c96 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c5e:	4813      	ldr	r0, [pc, #76]	; (8000cac <HAL_InitTick+0xdc>)
 8000c60:	f001 ff16 	bl	8002a90 <HAL_TIM_Base_Start_IT>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d111      	bne.n	8000c96 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c72:	2019      	movs	r0, #25
 8000c74:	f000 f9ca 	bl	800100c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	d808      	bhi.n	8000c90 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	2019      	movs	r0, #25
 8000c84:	f000 f9a6 	bl	8000fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_InitTick+0xe4>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e002      	b.n	8000c96 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3730      	adds	r7, #48	; 0x30
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	431bde83 	.word	0x431bde83
 8000cac:	20000948 	.word	0x20000948
 8000cb0:	40010000 	.word	0x40010000
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cea:	f001 ff41 	bl	8002b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000948 	.word	0x20000948

08000cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TIM2_IRQHandler+0x10>)
 8000cfe:	f001 ff37 	bl	8002b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200003a8 	.word	0x200003a8

08000d0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <USART3_IRQHandler+0x10>)
 8000d12:	f002 fbe7 	bl	80034e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200003f0 	.word	0x200003f0

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6e:	f7ff ffd7 	bl	8000d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f005 fbbd 	bl	80064f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fbe7 	bl	8000548 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8000d88:	08006808 	.word	0x08006808
  ldr r2, =_sbss
 8000d8c:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8000d90:	20004c48 	.word	0x20004c48

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f8fc 	bl	8000fbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f7ff ff02 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fdee 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000990 	.word	0x20000990

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000990 	.word	0x20000990

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff4c 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe6:	f7ff ff61 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8000fea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	68b9      	ldr	r1, [r7, #8]
 8000ff0:	6978      	ldr	r0, [r7, #20]
 8000ff2:	f7ff ffb1 	bl	8000f58 <NVIC_EncodePriority>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff80 	bl	8000f04 <__NVIC_SetPriority>
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff54 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001034:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001036:	f7ff fee5 	bl	8000e04 <HAL_GetTick>
 800103a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d008      	beq.n	800105a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e052      	b.n	8001100 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0216 	bic.w	r2, r2, #22
 8001068:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001078:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2b00      	cmp	r3, #0
 8001080:	d103      	bne.n	800108a <HAL_DMA_Abort+0x62>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0208 	bic.w	r2, r2, #8
 8001098:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0201 	bic.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010aa:	e013      	b.n	80010d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ac:	f7ff feaa 	bl	8000e04 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d90c      	bls.n	80010d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2220      	movs	r2, #32
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2203      	movs	r2, #3
 80010c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e015      	b.n	8001100 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1e4      	bne.n	80010ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e6:	223f      	movs	r2, #63	; 0x3f
 80010e8:	409a      	lsls	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d004      	beq.n	8001126 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00c      	b.n	8001140 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2205      	movs	r2, #5
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0201 	bic.w	r2, r2, #1
 800113c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e165      	b.n	8001434 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 8154 	bne.w	800142e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d005      	beq.n	800119e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119a:	2b02      	cmp	r3, #2
 800119c:	d130      	bne.n	8001200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 0201 	and.w	r2, r3, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b03      	cmp	r3, #3
 800120a:	d017      	beq.n	800123c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d123      	bne.n	8001290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	69b9      	ldr	r1, [r7, #24]
 800128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0203 	and.w	r2, r3, #3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80ae 	beq.w	800142e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b5d      	ldr	r3, [pc, #372]	; (800144c <HAL_GPIO_Init+0x300>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a5c      	ldr	r2, [pc, #368]	; (800144c <HAL_GPIO_Init+0x300>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b5a      	ldr	r3, [pc, #360]	; (800144c <HAL_GPIO_Init+0x300>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ee:	4a58      	ldr	r2, [pc, #352]	; (8001450 <HAL_GPIO_Init+0x304>)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <HAL_GPIO_Init+0x308>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x21a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4e      	ldr	r2, [pc, #312]	; (8001458 <HAL_GPIO_Init+0x30c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x216>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4d      	ldr	r2, [pc, #308]	; (800145c <HAL_GPIO_Init+0x310>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x212>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4c      	ldr	r2, [pc, #304]	; (8001460 <HAL_GPIO_Init+0x314>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x20e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <HAL_GPIO_Init+0x318>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x20a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <HAL_GPIO_Init+0x31c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x206>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a49      	ldr	r2, [pc, #292]	; (800146c <HAL_GPIO_Init+0x320>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x202>
 800134a:	2306      	movs	r3, #6
 800134c:	e00c      	b.n	8001368 <HAL_GPIO_Init+0x21c>
 800134e:	2307      	movs	r3, #7
 8001350:	e00a      	b.n	8001368 <HAL_GPIO_Init+0x21c>
 8001352:	2305      	movs	r3, #5
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x21c>
 8001356:	2304      	movs	r3, #4
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x21c>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x21c>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x21c>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x21c>
 8001366:	2300      	movs	r3, #0
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001378:	4935      	ldr	r1, [pc, #212]	; (8001450 <HAL_GPIO_Init+0x304>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001386:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <HAL_GPIO_Init+0x324>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013aa:	4a31      	ldr	r2, [pc, #196]	; (8001470 <HAL_GPIO_Init+0x324>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b0:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <HAL_GPIO_Init+0x324>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d4:	4a26      	ldr	r2, [pc, #152]	; (8001470 <HAL_GPIO_Init+0x324>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_GPIO_Init+0x324>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fe:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <HAL_GPIO_Init+0x324>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_GPIO_Init+0x324>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001428:	4a11      	ldr	r2, [pc, #68]	; (8001470 <HAL_GPIO_Init+0x324>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	f67f ae96 	bls.w	8001168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40013800 	.word	0x40013800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40021400 	.word	0x40021400
 800146c:	40021800 	.word	0x40021800
 8001470:	40013c00 	.word	0x40013c00

08001474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e001      	b.n	8001496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d8:	b08f      	sub	sp, #60	; 0x3c
 80014da:	af0a      	add	r7, sp, #40	; 0x28
 80014dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e116      	b.n	8001716 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d106      	bne.n	8001508 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff faf4 	bl	8000af0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2203      	movs	r2, #3
 800150c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f002 ff21 	bl	800436e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	687e      	ldr	r6, [r7, #4]
 8001534:	466d      	mov	r5, sp
 8001536:	f106 0410 	add.w	r4, r6, #16
 800153a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001542:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001546:	e885 0003 	stmia.w	r5, {r0, r1}
 800154a:	1d33      	adds	r3, r6, #4
 800154c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154e:	6838      	ldr	r0, [r7, #0]
 8001550:	f002 feac 	bl	80042ac <USB_CoreInit>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0d7      	b.n	8001716 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f002 ff0f 	bl	8004390 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e04a      	b.n	800160e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	333d      	adds	r3, #61	; 0x3d
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	333c      	adds	r3, #60	; 0x3c
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	b298      	uxth	r0, r3
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3344      	adds	r3, #68	; 0x44
 80015b4:	4602      	mov	r2, r0
 80015b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3340      	adds	r3, #64	; 0x40
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3348      	adds	r3, #72	; 0x48
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	334c      	adds	r3, #76	; 0x4c
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	3354      	adds	r3, #84	; 0x54
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3301      	adds	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3af      	bcc.n	8001578 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e044      	b.n	80016a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	3301      	adds	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3b5      	bcc.n	800161e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	687e      	ldr	r6, [r7, #4]
 80016ba:	466d      	mov	r5, sp
 80016bc:	f106 0410 	add.w	r4, r6, #16
 80016c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80016d0:	1d33      	adds	r3, r6, #4
 80016d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f002 fea7 	bl	8004428 <USB_DevInit>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2202      	movs	r2, #2
 80016e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e014      	b.n	8001716 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	2b01      	cmp	r3, #1
 8001702:	d102      	bne.n	800170a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f80a 	bl	800171e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f003 f865 	bl	80047de <USB_DevDisconnect>

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800171e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	f043 0303 	orr.w	r3, r3, #3
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cc      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d90c      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d044      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d119      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d003      	beq.n	8001826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	2b03      	cmp	r3, #3
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e067      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4934      	ldr	r1, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff fad4 	bl	8000e04 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff fad0 	bl	8000e04 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d20c      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 fbb1 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f95e 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	08006780 	.word	0x08006780
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_RCC_GetHCLKFreq+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001950:	f7ff fff0 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0a9b      	lsrs	r3, r3, #10
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	08006790 	.word	0x08006790

08001974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001978:	f7ff ffdc 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0b5b      	lsrs	r3, r3, #13
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	08006790 	.word	0x08006790

0800199c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	220f      	movs	r2, #15
 80019aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCC_GetClockConfig+0x60>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 020f 	and.w	r2, r3, #15
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	601a      	str	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d010      	beq.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a38:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a3e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a46:	496c      	ldr	r1, [pc, #432]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001a56:	2301      	movs	r3, #1
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d010      	beq.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a66:	4b64      	ldr	r3, [pc, #400]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a6c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a74:	4960      	ldr	r1, [pc, #384]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001a84:	2301      	movs	r3, #1
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d017      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a94:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4955      	ldr	r1, [pc, #340]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d017      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ade:	4946      	ldr	r1, [pc, #280]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aee:	d101      	bne.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001af0:	2301      	movs	r3, #1
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001afc:	2301      	movs	r3, #1
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 808a 	beq.w	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a38      	ldr	r2, [pc, #224]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b36:	f7ff f965 	bl	8000e04 <HAL_GetTick>
 8001b3a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7ff f961 	bl	8000e04 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e278      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b5c:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b64:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d02f      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b74:	6a3a      	ldr	r2, [r7, #32]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d028      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b82:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b90:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d114      	bne.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f92f 	bl	8000e04 <HAL_GetTick>
 8001ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f92b 	bl	8000e04 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e240      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ee      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bd8:	d114      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bee:	4902      	ldr	r1, [pc, #8]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
 8001bf4:	e00c      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	42470e40 	.word	0x42470e40
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a49      	ldr	r2, [pc, #292]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c0e:	6093      	str	r3, [r2, #8]
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	4944      	ldr	r1, [pc, #272]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d004      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001c34:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001c36:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00a      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c44:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4937      	ldr	r1, [pc, #220]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c66:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c74:	492e      	ldr	r1, [pc, #184]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d011      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	4926      	ldr	r1, [pc, #152]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ca6:	d101      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00a      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	491a      	ldr	r1, [pc, #104]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d011      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce8:	4911      	ldr	r1, [pc, #68]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d005      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d0c:	f040 80ff 	bne.w	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d16:	f7ff f875 	bl	8000e04 <HAL_GetTick>
 8001d1a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d1c:	e00e      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d1e:	f7ff f871 	bl	8000e04 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d907      	bls.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e188      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001d30:	40023800 	.word	0x40023800
 8001d34:	424711e0 	.word	0x424711e0
 8001d38:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d3c:	4b7e      	ldr	r3, [pc, #504]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ea      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d028      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d124      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d70:	4b71      	ldr	r3, [pc, #452]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d82:	4b6d      	ldr	r3, [pc, #436]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d88:	0e1b      	lsrs	r3, r3, #24
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	019b      	lsls	r3, r3, #6
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	041b      	lsls	r3, r3, #16
 8001da4:	431a      	orrs	r2, r3
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	071b      	lsls	r3, r3, #28
 8001db2:	4961      	ldr	r1, [pc, #388]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d004      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dce:	d00a      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d035      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de4:	d130      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001de6:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	3301      	adds	r3, #1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dfe:	0f1b      	lsrs	r3, r3, #28
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	019b      	lsls	r3, r3, #6
 8001e10:	431a      	orrs	r2, r3
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	085b      	lsrs	r3, r3, #1
 8001e16:	3b01      	subs	r3, #1
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	431a      	orrs	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	071b      	lsls	r3, r3, #28
 8001e28:	4943      	ldr	r1, [pc, #268]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001e30:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e36:	f023 021f 	bic.w	r2, r3, #31
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	493d      	ldr	r1, [pc, #244]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d029      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e5c:	d124      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e70:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e76:	0f1b      	lsrs	r3, r3, #28
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	019b      	lsls	r3, r3, #6
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	3b01      	subs	r3, #1
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	431a      	orrs	r2, r3
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	071b      	lsls	r3, r3, #28
 8001ea0:	4925      	ldr	r1, [pc, #148]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d016      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	019b      	lsls	r3, r3, #6
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	061b      	lsls	r3, r3, #24
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	071b      	lsls	r3, r3, #28
 8001eda:	4917      	ldr	r1, [pc, #92]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7fe ff8c 	bl	8000e04 <HAL_GetTick>
 8001eec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ef0:	f7fe ff88 	bl	8000e04 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e09f      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	f040 8095 	bne.w	8002040 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f1c:	f7fe ff72 	bl	8000e04 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f22:	e00f      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f24:	f7fe ff6e 	bl	8000e04 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d908      	bls.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e085      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	42470068 	.word	0x42470068
 8001f40:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f44:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f50:	d0e8      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d02b      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d127      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f7a:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	3301      	adds	r3, #1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	019b      	lsls	r3, r3, #6
 8001f96:	431a      	orrs	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	061b      	lsls	r3, r3, #24
 8001fa8:	4928      	ldr	r1, [pc, #160]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	4922      	ldr	r1, [pc, #136]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01d      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fde:	d118      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	0e1b      	lsrs	r3, r3, #24
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	019b      	lsls	r3, r3, #6
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	3b01      	subs	r3, #1
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	431a      	orrs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	4910      	ldr	r1, [pc, #64]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002018:	f7fe fef4 	bl	8000e04 <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002020:	f7fe fef0 	bl	8000e04 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e007      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800203a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800203e:	d1ef      	bne.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3730      	adds	r7, #48	; 0x30
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	42470070 	.word	0x42470070

08002054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002058:	b0ae      	sub	sp, #184	; 0xb8
 800205a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800207a:	4bcb      	ldr	r3, [pc, #812]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b0c      	cmp	r3, #12
 8002084:	f200 8206 	bhi.w	8002494 <HAL_RCC_GetSysClockFreq+0x440>
 8002088:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <HAL_RCC_GetSysClockFreq+0x3c>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020c5 	.word	0x080020c5
 8002094:	08002495 	.word	0x08002495
 8002098:	08002495 	.word	0x08002495
 800209c:	08002495 	.word	0x08002495
 80020a0:	080020cd 	.word	0x080020cd
 80020a4:	08002495 	.word	0x08002495
 80020a8:	08002495 	.word	0x08002495
 80020ac:	08002495 	.word	0x08002495
 80020b0:	080020d5 	.word	0x080020d5
 80020b4:	08002495 	.word	0x08002495
 80020b8:	08002495 	.word	0x08002495
 80020bc:	08002495 	.word	0x08002495
 80020c0:	080022c5 	.word	0x080022c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020c4:	4bb9      	ldr	r3, [pc, #740]	; (80023ac <HAL_RCC_GetSysClockFreq+0x358>)
 80020c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80020ca:	e1e7      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020cc:	4bb8      	ldr	r3, [pc, #736]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80020ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020d2:	e1e3      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d4:	4bb4      	ldr	r3, [pc, #720]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e0:	4bb1      	ldr	r3, [pc, #708]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d071      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ec:	4bae      	ldr	r3, [pc, #696]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	2200      	movs	r2, #0
 80020f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80020fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800210e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002112:	4622      	mov	r2, r4
 8002114:	462b      	mov	r3, r5
 8002116:	f04f 0000 	mov.w	r0, #0
 800211a:	f04f 0100 	mov.w	r1, #0
 800211e:	0159      	lsls	r1, r3, #5
 8002120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002124:	0150      	lsls	r0, r2, #5
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4621      	mov	r1, r4
 800212c:	1a51      	subs	r1, r2, r1
 800212e:	6439      	str	r1, [r7, #64]	; 0x40
 8002130:	4629      	mov	r1, r5
 8002132:	eb63 0301 	sbc.w	r3, r3, r1
 8002136:	647b      	str	r3, [r7, #68]	; 0x44
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002144:	4649      	mov	r1, r9
 8002146:	018b      	lsls	r3, r1, #6
 8002148:	4641      	mov	r1, r8
 800214a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800214e:	4641      	mov	r1, r8
 8002150:	018a      	lsls	r2, r1, #6
 8002152:	4641      	mov	r1, r8
 8002154:	1a51      	subs	r1, r2, r1
 8002156:	63b9      	str	r1, [r7, #56]	; 0x38
 8002158:	4649      	mov	r1, r9
 800215a:	eb63 0301 	sbc.w	r3, r3, r1
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800216c:	4649      	mov	r1, r9
 800216e:	00cb      	lsls	r3, r1, #3
 8002170:	4641      	mov	r1, r8
 8002172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002176:	4641      	mov	r1, r8
 8002178:	00ca      	lsls	r2, r1, #3
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	4603      	mov	r3, r0
 8002180:	4622      	mov	r2, r4
 8002182:	189b      	adds	r3, r3, r2
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
 8002186:	462b      	mov	r3, r5
 8002188:	460a      	mov	r2, r1
 800218a:	eb42 0303 	adc.w	r3, r2, r3
 800218e:	637b      	str	r3, [r7, #52]	; 0x34
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800219c:	4629      	mov	r1, r5
 800219e:	024b      	lsls	r3, r1, #9
 80021a0:	4621      	mov	r1, r4
 80021a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021a6:	4621      	mov	r1, r4
 80021a8:	024a      	lsls	r2, r1, #9
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80021c0:	f7fe f826 	bl	8000210 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4613      	mov	r3, r2
 80021ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021ce:	e067      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d0:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	2200      	movs	r2, #0
 80021d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80021ea:	2300      	movs	r3, #0
 80021ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80021f2:	4622      	mov	r2, r4
 80021f4:	462b      	mov	r3, r5
 80021f6:	f04f 0000 	mov.w	r0, #0
 80021fa:	f04f 0100 	mov.w	r1, #0
 80021fe:	0159      	lsls	r1, r3, #5
 8002200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002204:	0150      	lsls	r0, r2, #5
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4621      	mov	r1, r4
 800220c:	1a51      	subs	r1, r2, r1
 800220e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002210:	4629      	mov	r1, r5
 8002212:	eb63 0301 	sbc.w	r3, r3, r1
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002224:	4649      	mov	r1, r9
 8002226:	018b      	lsls	r3, r1, #6
 8002228:	4641      	mov	r1, r8
 800222a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800222e:	4641      	mov	r1, r8
 8002230:	018a      	lsls	r2, r1, #6
 8002232:	4641      	mov	r1, r8
 8002234:	ebb2 0a01 	subs.w	sl, r2, r1
 8002238:	4649      	mov	r1, r9
 800223a:	eb63 0b01 	sbc.w	fp, r3, r1
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800224a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800224e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002252:	4692      	mov	sl, r2
 8002254:	469b      	mov	fp, r3
 8002256:	4623      	mov	r3, r4
 8002258:	eb1a 0303 	adds.w	r3, sl, r3
 800225c:	623b      	str	r3, [r7, #32]
 800225e:	462b      	mov	r3, r5
 8002260:	eb4b 0303 	adc.w	r3, fp, r3
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002272:	4629      	mov	r1, r5
 8002274:	028b      	lsls	r3, r1, #10
 8002276:	4621      	mov	r1, r4
 8002278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800227c:	4621      	mov	r1, r4
 800227e:	028a      	lsls	r2, r1, #10
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002288:	2200      	movs	r2, #0
 800228a:	673b      	str	r3, [r7, #112]	; 0x70
 800228c:	677a      	str	r2, [r7, #116]	; 0x74
 800228e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002292:	f7fd ffbd 	bl	8000210 <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4613      	mov	r3, r2
 800229c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022a0:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	3301      	adds	r3, #1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80022b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022c2:	e0eb      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d06b      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022dc:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	2200      	movs	r2, #0
 80022e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80022e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ee:	663b      	str	r3, [r7, #96]	; 0x60
 80022f0:	2300      	movs	r3, #0
 80022f2:	667b      	str	r3, [r7, #100]	; 0x64
 80022f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80022f8:	4622      	mov	r2, r4
 80022fa:	462b      	mov	r3, r5
 80022fc:	f04f 0000 	mov.w	r0, #0
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	0159      	lsls	r1, r3, #5
 8002306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800230a:	0150      	lsls	r0, r2, #5
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4621      	mov	r1, r4
 8002312:	1a51      	subs	r1, r2, r1
 8002314:	61b9      	str	r1, [r7, #24]
 8002316:	4629      	mov	r1, r5
 8002318:	eb63 0301 	sbc.w	r3, r3, r1
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800232a:	4659      	mov	r1, fp
 800232c:	018b      	lsls	r3, r1, #6
 800232e:	4651      	mov	r1, sl
 8002330:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002334:	4651      	mov	r1, sl
 8002336:	018a      	lsls	r2, r1, #6
 8002338:	4651      	mov	r1, sl
 800233a:	ebb2 0801 	subs.w	r8, r2, r1
 800233e:	4659      	mov	r1, fp
 8002340:	eb63 0901 	sbc.w	r9, r3, r1
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002350:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002354:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002358:	4690      	mov	r8, r2
 800235a:	4699      	mov	r9, r3
 800235c:	4623      	mov	r3, r4
 800235e:	eb18 0303 	adds.w	r3, r8, r3
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	462b      	mov	r3, r5
 8002366:	eb49 0303 	adc.w	r3, r9, r3
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002378:	4629      	mov	r1, r5
 800237a:	024b      	lsls	r3, r1, #9
 800237c:	4621      	mov	r1, r4
 800237e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002382:	4621      	mov	r1, r4
 8002384:	024a      	lsls	r2, r1, #9
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800238e:	2200      	movs	r2, #0
 8002390:	65bb      	str	r3, [r7, #88]	; 0x58
 8002392:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002394:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002398:	f7fd ff3a 	bl	8000210 <__aeabi_uldivmod>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4613      	mov	r3, r2
 80023a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023a6:	e065      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x420>
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b4:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_RCC_GetSysClockFreq+0x458>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	2200      	movs	r2, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	4611      	mov	r1, r2
 80023c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023c4:	653b      	str	r3, [r7, #80]	; 0x50
 80023c6:	2300      	movs	r3, #0
 80023c8:	657b      	str	r3, [r7, #84]	; 0x54
 80023ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80023ce:	4642      	mov	r2, r8
 80023d0:	464b      	mov	r3, r9
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	0159      	lsls	r1, r3, #5
 80023dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e0:	0150      	lsls	r0, r2, #5
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4641      	mov	r1, r8
 80023e8:	1a51      	subs	r1, r2, r1
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	4649      	mov	r1, r9
 80023ee:	eb63 0301 	sbc.w	r3, r3, r1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002400:	4659      	mov	r1, fp
 8002402:	018b      	lsls	r3, r1, #6
 8002404:	4651      	mov	r1, sl
 8002406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800240a:	4651      	mov	r1, sl
 800240c:	018a      	lsls	r2, r1, #6
 800240e:	4651      	mov	r1, sl
 8002410:	1a54      	subs	r4, r2, r1
 8002412:	4659      	mov	r1, fp
 8002414:	eb63 0501 	sbc.w	r5, r3, r1
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	00eb      	lsls	r3, r5, #3
 8002422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002426:	00e2      	lsls	r2, r4, #3
 8002428:	4614      	mov	r4, r2
 800242a:	461d      	mov	r5, r3
 800242c:	4643      	mov	r3, r8
 800242e:	18e3      	adds	r3, r4, r3
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	464b      	mov	r3, r9
 8002434:	eb45 0303 	adc.w	r3, r5, r3
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002446:	4629      	mov	r1, r5
 8002448:	028b      	lsls	r3, r1, #10
 800244a:	4621      	mov	r1, r4
 800244c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002450:	4621      	mov	r1, r4
 8002452:	028a      	lsls	r2, r1, #10
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800245c:	2200      	movs	r2, #0
 800245e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002460:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002462:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002466:	f7fd fed3 	bl	8000210 <__aeabi_uldivmod>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4613      	mov	r3, r2
 8002470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_RCC_GetSysClockFreq+0x458>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	0f1b      	lsrs	r3, r3, #28
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002492:	e003      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800249a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	37b8      	adds	r7, #184	; 0xb8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	00f42400 	.word	0x00f42400

080024b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e28d      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8083 	beq.w	80025da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024d4:	4b94      	ldr	r3, [pc, #592]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d019      	beq.n	8002514 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024e0:	4b91      	ldr	r3, [pc, #580]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ec:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f8:	d00c      	beq.n	8002514 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fa:	4b8b      	ldr	r3, [pc, #556]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d112      	bne.n	800252c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002512:	d10b      	bne.n	800252c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	4b84      	ldr	r3, [pc, #528]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d05b      	beq.n	80025d8 <HAL_RCC_OscConfig+0x124>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d157      	bne.n	80025d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e25a      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x90>
 8002536:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7b      	ldr	r2, [pc, #492]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xcc>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0xb4>
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a75      	ldr	r2, [pc, #468]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b73      	ldr	r3, [pc, #460]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a72      	ldr	r2, [pc, #456]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xcc>
 8002568:	4b6f      	ldr	r3, [pc, #444]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6e      	ldr	r2, [pc, #440]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6b      	ldr	r2, [pc, #428]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fc3c 	bl	8000e04 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fc38 	bl	8000e04 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e21f      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xdc>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fc28 	bl	8000e04 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fc24 	bl	8000e04 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e20b      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x104>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d06f      	beq.n	80026c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025e6:	4b50      	ldr	r3, [pc, #320]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d017      	beq.n	8002622 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025f2:	4b4d      	ldr	r3, [pc, #308]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d105      	bne.n	800260a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025fe:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260a:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d11c      	bne.n	8002650 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002616:	4b44      	ldr	r3, [pc, #272]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d116      	bne.n	8002650 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x186>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e1d3      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4937      	ldr	r1, [pc, #220]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	e03a      	b.n	80026c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002658:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_OscConfig+0x278>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fe fbd1 	bl	8000e04 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe fbcd 	bl	8000e04 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e1b4      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b28      	ldr	r3, [pc, #160]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4925      	ldr	r1, [pc, #148]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 8002694:	4313      	orrs	r3, r2
 8002696:	600b      	str	r3, [r1, #0]
 8002698:	e015      	b.n	80026c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_OscConfig+0x278>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fbb0 	bl	8000e04 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a8:	f7fe fbac 	bl	8000e04 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e193      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d036      	beq.n	8002740 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_RCC_OscConfig+0x27c>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e0:	f7fe fb90 	bl	8000e04 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e8:	f7fe fb8c 	bl	8000e04 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e173      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_OscConfig+0x274>)
 80026fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x234>
 8002706:	e01b      	b.n	8002740 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_OscConfig+0x27c>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fb79 	bl	8000e04 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	e00e      	b.n	8002734 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002716:	f7fe fb75 	bl	8000e04 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d907      	bls.n	8002734 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e15c      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
 8002728:	40023800 	.word	0x40023800
 800272c:	42470000 	.word	0x42470000
 8002730:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	4b8a      	ldr	r3, [pc, #552]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1ea      	bne.n	8002716 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8097 	beq.w	800287c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002752:	4b83      	ldr	r3, [pc, #524]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a7e      	ldr	r2, [pc, #504]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	4b79      	ldr	r3, [pc, #484]	; (8002964 <HAL_RCC_OscConfig+0x4b0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d118      	bne.n	80027bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278a:	4b76      	ldr	r3, [pc, #472]	; (8002964 <HAL_RCC_OscConfig+0x4b0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a75      	ldr	r2, [pc, #468]	; (8002964 <HAL_RCC_OscConfig+0x4b0>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002796:	f7fe fb35 	bl	8000e04 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279e:	f7fe fb31 	bl	8000e04 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e118      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	4b6c      	ldr	r3, [pc, #432]	; (8002964 <HAL_RCC_OscConfig+0x4b0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x31e>
 80027c4:	4b66      	ldr	r3, [pc, #408]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a65      	ldr	r2, [pc, #404]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	e01c      	b.n	800280c <HAL_RCC_OscConfig+0x358>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x340>
 80027da:	4b61      	ldr	r3, [pc, #388]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
 80027e6:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a5d      	ldr	r2, [pc, #372]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0x358>
 80027f4:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	4a59      	ldr	r2, [pc, #356]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002800:	4b57      	ldr	r3, [pc, #348]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4a56      	ldr	r2, [pc, #344]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002806:	f023 0304 	bic.w	r3, r3, #4
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d015      	beq.n	8002840 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe faf6 	bl	8000e04 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe faf2 	bl	8000e04 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e0d7      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002832:	4b4b      	ldr	r3, [pc, #300]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0ee      	beq.n	800281c <HAL_RCC_OscConfig+0x368>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe fae0 	bl	8000e04 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002846:	e00a      	b.n	800285e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002848:	f7fe fadc 	bl	8000e04 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e0c1      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285e:	4b40      	ldr	r3, [pc, #256]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1ee      	bne.n	8002848 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002870:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	4a3a      	ldr	r2, [pc, #232]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80ad 	beq.w	80029e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b08      	cmp	r3, #8
 8002890:	d060      	beq.n	8002954 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d145      	bne.n	8002926 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b33      	ldr	r3, [pc, #204]	; (8002968 <HAL_RCC_OscConfig+0x4b4>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fab0 	bl	8000e04 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe faac 	bl	8000e04 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e093      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	3b01      	subs	r3, #1
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	071b      	lsls	r3, r3, #28
 80028f2:	491b      	ldr	r1, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_RCC_OscConfig+0x4b4>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fa81 	bl	8000e04 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002906:	f7fe fa7d 	bl	8000e04 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e064      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x452>
 8002924:	e05c      	b.n	80029e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_OscConfig+0x4b4>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fa6a 	bl	8000e04 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fa66 	bl	8000e04 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e04d      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x480>
 8002952:	e045      	b.n	80029e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e040      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
 8002960:	40023800 	.word	0x40023800
 8002964:	40007000 	.word	0x40007000
 8002968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800296c:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <HAL_RCC_OscConfig+0x538>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d030      	beq.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d129      	bne.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d122      	bne.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d119      	bne.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	3b01      	subs	r3, #1
 80029b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d10f      	bne.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e041      	b.n	8002a86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fd fff4 	bl	8000a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	f000 fa96 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d001      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e04e      	b.n	8002b46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a23      	ldr	r2, [pc, #140]	; (8002b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d022      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad2:	d01d      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d018      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00e      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d009      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d004      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d111      	bne.n	8002b34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d010      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b32:	e007      	b.n	8002b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	40000c00 	.word	0x40000c00
 8002b64:	40010400 	.word	0x40010400
 8002b68:	40014000 	.word	0x40014000
 8002b6c:	40001800 	.word	0x40001800

08002b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d122      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d11b      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0202 	mvn.w	r2, #2
 8002b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f9b5 	bl	8002f22 <HAL_TIM_IC_CaptureCallback>
 8002bb8:	e005      	b.n	8002bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9a7 	bl	8002f0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f9b8 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d122      	bne.n	8002c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d11b      	bne.n	8002c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0204 	mvn.w	r2, #4
 8002bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f98b 	bl	8002f22 <HAL_TIM_IC_CaptureCallback>
 8002c0c:	e005      	b.n	8002c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f97d 	bl	8002f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f98e 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d122      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d11b      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0208 	mvn.w	r2, #8
 8002c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f961 	bl	8002f22 <HAL_TIM_IC_CaptureCallback>
 8002c60:	e005      	b.n	8002c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f953 	bl	8002f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f964 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d122      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d11b      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0210 	mvn.w	r2, #16
 8002c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f937 	bl	8002f22 <HAL_TIM_IC_CaptureCallback>
 8002cb4:	e005      	b.n	8002cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f929 	bl	8002f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f93a 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0201 	mvn.w	r2, #1
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd fe38 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	2b80      	cmp	r3, #128	; 0x80
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0c:	2b80      	cmp	r3, #128	; 0x80
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fae0 	bl	80032e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8ff 	bl	8002f4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0220 	mvn.w	r2, #32
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 faaa 	bl	80032cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_TIM_ConfigClockSource+0x1c>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e0b4      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0x186>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd4:	d03e      	beq.n	8002e54 <HAL_TIM_ConfigClockSource+0xd4>
 8002dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dda:	f200 8087 	bhi.w	8002eec <HAL_TIM_ConfigClockSource+0x16c>
 8002dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de2:	f000 8086 	beq.w	8002ef2 <HAL_TIM_ConfigClockSource+0x172>
 8002de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dea:	d87f      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x16c>
 8002dec:	2b70      	cmp	r3, #112	; 0x70
 8002dee:	d01a      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0xa6>
 8002df0:	2b70      	cmp	r3, #112	; 0x70
 8002df2:	d87b      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x16c>
 8002df4:	2b60      	cmp	r3, #96	; 0x60
 8002df6:	d050      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x11a>
 8002df8:	2b60      	cmp	r3, #96	; 0x60
 8002dfa:	d877      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x16c>
 8002dfc:	2b50      	cmp	r3, #80	; 0x50
 8002dfe:	d03c      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0xfa>
 8002e00:	2b50      	cmp	r3, #80	; 0x50
 8002e02:	d873      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x16c>
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d058      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x13a>
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d86f      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x16c>
 8002e0c:	2b30      	cmp	r3, #48	; 0x30
 8002e0e:	d064      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x15a>
 8002e10:	2b30      	cmp	r3, #48	; 0x30
 8002e12:	d86b      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x16c>
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d060      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x15a>
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d867      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x16c>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d05c      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x15a>
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d05a      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x15a>
 8002e24:	e062      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6899      	ldr	r1, [r3, #8]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f000 f9ad 	bl	8003194 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	609a      	str	r2, [r3, #8]
      break;
 8002e52:	e04f      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6899      	ldr	r1, [r3, #8]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f000 f996 	bl	8003194 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e76:	609a      	str	r2, [r3, #8]
      break;
 8002e78:	e03c      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f000 f90a 	bl	80030a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2150      	movs	r1, #80	; 0x50
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f963 	bl	800315e <TIM_ITRx_SetConfig>
      break;
 8002e98:	e02c      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f000 f929 	bl	80030fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2160      	movs	r1, #96	; 0x60
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f953 	bl	800315e <TIM_ITRx_SetConfig>
      break;
 8002eb8:	e01c      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f000 f8ea 	bl	80030a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2140      	movs	r1, #64	; 0x40
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f943 	bl	800315e <TIM_ITRx_SetConfig>
      break;
 8002ed8:	e00c      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f000 f93a 	bl	800315e <TIM_ITRx_SetConfig>
      break;
 8002eea:	e003      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a40      	ldr	r2, [pc, #256]	; (8003074 <TIM_Base_SetConfig+0x114>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <TIM_Base_SetConfig+0x40>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d00f      	beq.n	8002fa0 <TIM_Base_SetConfig+0x40>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a3d      	ldr	r2, [pc, #244]	; (8003078 <TIM_Base_SetConfig+0x118>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00b      	beq.n	8002fa0 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3c      	ldr	r2, [pc, #240]	; (800307c <TIM_Base_SetConfig+0x11c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d007      	beq.n	8002fa0 <TIM_Base_SetConfig+0x40>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3b      	ldr	r2, [pc, #236]	; (8003080 <TIM_Base_SetConfig+0x120>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_Base_SetConfig+0x40>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3a      	ldr	r2, [pc, #232]	; (8003084 <TIM_Base_SetConfig+0x124>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2f      	ldr	r2, [pc, #188]	; (8003074 <TIM_Base_SetConfig+0x114>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d02b      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d027      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2c      	ldr	r2, [pc, #176]	; (8003078 <TIM_Base_SetConfig+0x118>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d023      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2b      	ldr	r2, [pc, #172]	; (800307c <TIM_Base_SetConfig+0x11c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01f      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <TIM_Base_SetConfig+0x120>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01b      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a29      	ldr	r2, [pc, #164]	; (8003084 <TIM_Base_SetConfig+0x124>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d017      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a28      	ldr	r2, [pc, #160]	; (8003088 <TIM_Base_SetConfig+0x128>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a27      	ldr	r2, [pc, #156]	; (800308c <TIM_Base_SetConfig+0x12c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00f      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a26      	ldr	r2, [pc, #152]	; (8003090 <TIM_Base_SetConfig+0x130>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <TIM_Base_SetConfig+0x134>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <TIM_Base_SetConfig+0x138>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d003      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a23      	ldr	r2, [pc, #140]	; (800309c <TIM_Base_SetConfig+0x13c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d108      	bne.n	8003024 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <TIM_Base_SetConfig+0x114>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0xf8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <TIM_Base_SetConfig+0x124>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d103      	bne.n	8003060 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	615a      	str	r2, [r3, #20]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40010000 	.word	0x40010000
 8003078:	40000400 	.word	0x40000400
 800307c:	40000800 	.word	0x40000800
 8003080:	40000c00 	.word	0x40000c00
 8003084:	40010400 	.word	0x40010400
 8003088:	40014000 	.word	0x40014000
 800308c:	40014400 	.word	0x40014400
 8003090:	40014800 	.word	0x40014800
 8003094:	40001800 	.word	0x40001800
 8003098:	40001c00 	.word	0x40001c00
 800309c:	40002000 	.word	0x40002000

080030a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0201 	bic.w	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 030a 	bic.w	r3, r3, #10
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	621a      	str	r2, [r3, #32]
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0210 	bic.w	r2, r3, #16
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	031b      	lsls	r3, r3, #12
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800313a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	f043 0307 	orr.w	r3, r3, #7
 8003180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	609a      	str	r2, [r3, #8]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	021a      	lsls	r2, r3, #8
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	bf00      	nop
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e05a      	b.n	80032a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003238:	d01d      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d018      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10c      	bne.n	8003290 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800327c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	4313      	orrs	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40010000 	.word	0x40010000
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800
 80032bc:	40000c00 	.word	0x40000c00
 80032c0:	40010400 	.word	0x40010400
 80032c4:	40014000 	.word	0x40014000
 80032c8:	40001800 	.word	0x40001800

080032cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e03f      	b.n	8003386 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd fb98 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2224      	movs	r2, #36	; 0x24
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fd43 	bl	8003dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800334c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800335c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800336c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	4613      	mov	r3, r2
 800339a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d130      	bne.n	800340a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_UART_Transmit_IT+0x26>
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e029      	b.n	800340c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_UART_Transmit_IT+0x38>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e022      	b.n	800340c <HAL_UART_Transmit_IT+0x7e>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	88fa      	ldrh	r2, [r7, #6]
 80033d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	88fa      	ldrh	r2, [r7, #6]
 80033de:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2221      	movs	r2, #33	; 0x21
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003404:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	; 0x30
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b20      	cmp	r3, #32
 8003430:	d152      	bne.n	80034d8 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e04b      	b.n	80034da <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800344c:	2302      	movs	r3, #2
 800344e:	e044      	b.n	80034da <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	461a      	mov	r2, r3
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fad5 	bl	8003a14 <UART_Start_Receive_IT>
 800346a:	4603      	mov	r3, r0
 800346c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003474:	2b00      	cmp	r3, #0
 8003476:	d12c      	bne.n	80034d2 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	2b01      	cmp	r3, #1
 800347e:	d125      	bne.n	80034cc <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	617b      	str	r3, [r7, #20]
   return(result);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f043 0310 	orr.w	r3, r3, #16
 80034ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034b6:	627a      	str	r2, [r7, #36]	; 0x24
 80034b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6a39      	ldr	r1, [r7, #32]
 80034bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e5      	bne.n	8003496 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80034ca:	e002      	b.n	80034d2 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80034d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034d6:	e000      	b.n	80034da <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
  }
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3730      	adds	r7, #48	; 0x30
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b0ba      	sub	sp, #232	; 0xe8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800352a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_UART_IRQHandler+0x66>
 8003536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fb83 	bl	8003c4e <UART_Receive_IT>
      return;
 8003548:	e256      	b.n	80039f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800354a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80de 	beq.w	8003710 <HAL_UART_IRQHandler+0x22c>
 8003554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003564:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80d1 	beq.w	8003710 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <HAL_UART_IRQHandler+0xae>
 800357a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f043 0201 	orr.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_UART_IRQHandler+0xd2>
 800359e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0202 	orr.w	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_UART_IRQHandler+0xf6>
 80035c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f043 0204 	orr.w	r2, r3, #4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d011      	beq.n	800360a <HAL_UART_IRQHandler+0x126>
 80035e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d105      	bne.n	80035fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f043 0208 	orr.w	r2, r3, #8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 81ed 	beq.w	80039ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_UART_IRQHandler+0x14e>
 8003620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fb0e 	bl	8003c4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <HAL_UART_IRQHandler+0x17a>
 8003656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d04f      	beq.n	80036fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fa16 	bl	8003a90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d141      	bne.n	80036f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3314      	adds	r3, #20
 8003678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800368c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3314      	adds	r3, #20
 800369a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800369e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1d9      	bne.n	8003672 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d013      	beq.n	80036ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	4a7d      	ldr	r2, [pc, #500]	; (80038c0 <HAL_UART_IRQHandler+0x3dc>)
 80036cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fd18 	bl	8001108 <HAL_DMA_Abort_IT>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036e8:	4610      	mov	r0, r2
 80036ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e00e      	b.n	800370c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f002 fbfe 	bl	8005ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	e00a      	b.n	800370c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f002 fbfa 	bl	8005ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	e006      	b.n	800370c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f002 fbf6 	bl	8005ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800370a:	e170      	b.n	80039ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	bf00      	nop
    return;
 800370e:	e16e      	b.n	80039ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	2b01      	cmp	r3, #1
 8003716:	f040 814a 	bne.w	80039ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8143 	beq.w	80039ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 813c 	beq.w	80039ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	f040 80b4 	bne.w	80038c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8140 	beq.w	80039f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800377a:	429a      	cmp	r2, r3
 800377c:	f080 8139 	bcs.w	80039f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003786:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003792:	f000 8088 	beq.w	80038a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1d9      	bne.n	8003796 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3314      	adds	r3, #20
 8003802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003806:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800380a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800380e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e1      	bne.n	80037e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3314      	adds	r3, #20
 8003824:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800382e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3314      	adds	r3, #20
 800383e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003842:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003844:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e3      	bne.n	800381e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003876:	f023 0310 	bic.w	r3, r3, #16
 800387a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003888:	65ba      	str	r2, [r7, #88]	; 0x58
 800388a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800388e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e3      	bne.n	8003864 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fd fbc1 	bl	8001028 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f002 fb25 	bl	8005f06 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038bc:	e099      	b.n	80039f2 <HAL_UART_IRQHandler+0x50e>
 80038be:	bf00      	nop
 80038c0:	08003b57 	.word	0x08003b57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 808b 	beq.w	80039f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80038e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8086 	beq.w	80039f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800390e:	647a      	str	r2, [r7, #68]	; 0x44
 8003910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800391c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e3      	bne.n	80038ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3314      	adds	r3, #20
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	623b      	str	r3, [r7, #32]
   return(result);
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3314      	adds	r3, #20
 8003942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003946:	633a      	str	r2, [r7, #48]	; 0x30
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800394c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e3      	bne.n	8003922 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	60fb      	str	r3, [r7, #12]
   return(result);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0310 	bic.w	r3, r3, #16
 800397e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800398c:	61fa      	str	r2, [r7, #28]
 800398e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	69b9      	ldr	r1, [r7, #24]
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	617b      	str	r3, [r7, #20]
   return(result);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e3      	bne.n	8003968 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039a4:	4619      	mov	r1, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f002 faad 	bl	8005f06 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039ac:	e023      	b.n	80039f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_UART_IRQHandler+0x4ea>
 80039ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8d9 	bl	8003b7e <UART_Transmit_IT>
    return;
 80039cc:	e014      	b.n	80039f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <HAL_UART_IRQHandler+0x514>
 80039da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f919 	bl	8003c1e <UART_EndTransmit_IT>
    return;
 80039ec:	e004      	b.n	80039f8 <HAL_UART_IRQHandler+0x514>
    return;
 80039ee:	bf00      	nop
 80039f0:	e002      	b.n	80039f8 <HAL_UART_IRQHandler+0x514>
      return;
 80039f2:	bf00      	nop
 80039f4:	e000      	b.n	80039f8 <HAL_UART_IRQHandler+0x514>
      return;
 80039f6:	bf00      	nop
  }
}
 80039f8:	37e8      	adds	r7, #232	; 0xe8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop

08003a00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2222      	movs	r2, #34	; 0x22
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a60:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0220 	orr.w	r2, r2, #32
 8003a80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b095      	sub	sp, #84	; 0x54
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ab8:	643a      	str	r2, [r7, #64]	; 0x40
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003abe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e5      	bne.n	8003a98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3314      	adds	r3, #20
 8003ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3314      	adds	r3, #20
 8003aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e5      	bne.n	8003acc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d119      	bne.n	8003b3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f023 0310 	bic.w	r3, r3, #16
 8003b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b28:	61ba      	str	r2, [r7, #24]
 8003b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6979      	ldr	r1, [r7, #20]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	613b      	str	r3, [r7, #16]
   return(result);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e5      	bne.n	8003b08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b4a:	bf00      	nop
 8003b4c:	3754      	adds	r7, #84	; 0x54
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f002 f9bd 	bl	8005ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b21      	cmp	r3, #33	; 0x21
 8003b90:	d13e      	bne.n	8003c10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9a:	d114      	bne.n	8003bc6 <UART_Transmit_IT+0x48>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d110      	bne.n	8003bc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	1c9a      	adds	r2, r3, #2
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	621a      	str	r2, [r3, #32]
 8003bc4:	e008      	b.n	8003bd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	1c59      	adds	r1, r3, #1
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6211      	str	r1, [r2, #32]
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	4619      	mov	r1, r3
 8003be6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10f      	bne.n	8003c0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bfa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e000      	b.n	8003c12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f002 f970 	bl	8005f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b08c      	sub	sp, #48	; 0x30
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b22      	cmp	r3, #34	; 0x22
 8003c60:	f040 80ab 	bne.w	8003dba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d117      	bne.n	8003c9e <UART_Receive_IT+0x50>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d113      	bne.n	8003c9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	1c9a      	adds	r2, r3, #2
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c9c:	e026      	b.n	8003cec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d007      	beq.n	8003cc2 <UART_Receive_IT+0x74>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <UART_Receive_IT+0x82>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	e008      	b.n	8003ce2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d15a      	bne.n	8003db6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0220 	bic.w	r2, r2, #32
 8003d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d135      	bne.n	8003dac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	613b      	str	r3, [r7, #16]
   return(result);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f023 0310 	bic.w	r3, r3, #16
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	623a      	str	r2, [r7, #32]
 8003d68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	69f9      	ldr	r1, [r7, #28]
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e5      	bne.n	8003d46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d10a      	bne.n	8003d9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f002 f8ae 	bl	8005f06 <HAL_UARTEx_RxEventCallback>
 8003daa:	e002      	b.n	8003db2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff fe27 	bl	8003a00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e002      	b.n	8003dbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	e000      	b.n	8003dbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003dba:	2302      	movs	r3, #2
  }
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3730      	adds	r7, #48	; 0x30
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc8:	b0c0      	sub	sp, #256	; 0x100
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	68d9      	ldr	r1, [r3, #12]
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	ea40 0301 	orr.w	r3, r0, r1
 8003dec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e1c:	f021 010c 	bic.w	r1, r1, #12
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3e:	6999      	ldr	r1, [r3, #24]
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	ea40 0301 	orr.w	r3, r0, r1
 8003e4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b8f      	ldr	r3, [pc, #572]	; (8004090 <UART_SetConfig+0x2cc>)
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d005      	beq.n	8003e64 <UART_SetConfig+0xa0>
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b8d      	ldr	r3, [pc, #564]	; (8004094 <UART_SetConfig+0x2d0>)
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d104      	bne.n	8003e6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7fd fd86 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 8003e68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e6c:	e003      	b.n	8003e76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e6e:	f7fd fd6d 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8003e72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e80:	f040 810c 	bne.w	800409c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e96:	4622      	mov	r2, r4
 8003e98:	462b      	mov	r3, r5
 8003e9a:	1891      	adds	r1, r2, r2
 8003e9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e9e:	415b      	adcs	r3, r3
 8003ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	eb12 0801 	adds.w	r8, r2, r1
 8003eac:	4629      	mov	r1, r5
 8003eae:	eb43 0901 	adc.w	r9, r3, r1
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ec6:	4690      	mov	r8, r2
 8003ec8:	4699      	mov	r9, r3
 8003eca:	4623      	mov	r3, r4
 8003ecc:	eb18 0303 	adds.w	r3, r8, r3
 8003ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	eb49 0303 	adc.w	r3, r9, r3
 8003eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003eea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	18db      	adds	r3, r3, r3
 8003ef6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ef8:	4613      	mov	r3, r2
 8003efa:	eb42 0303 	adc.w	r3, r2, r3
 8003efe:	657b      	str	r3, [r7, #84]	; 0x54
 8003f00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f08:	f7fc f982 	bl	8000210 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4b61      	ldr	r3, [pc, #388]	; (8004098 <UART_SetConfig+0x2d4>)
 8003f12:	fba3 2302 	umull	r2, r3, r3, r2
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	011c      	lsls	r4, r3, #4
 8003f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	1891      	adds	r1, r2, r2
 8003f32:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f34:	415b      	adcs	r3, r3
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f42:	4649      	mov	r1, r9
 8003f44:	eb43 0b01 	adc.w	fp, r3, r1
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f5c:	4692      	mov	sl, r2
 8003f5e:	469b      	mov	fp, r3
 8003f60:	4643      	mov	r3, r8
 8003f62:	eb1a 0303 	adds.w	r3, sl, r3
 8003f66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	18db      	adds	r3, r3, r3
 8003f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f8e:	4613      	mov	r3, r2
 8003f90:	eb42 0303 	adc.w	r3, r2, r3
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
 8003f96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f9e:	f7fc f937 	bl	8000210 <__aeabi_uldivmod>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <UART_SetConfig+0x2d4>)
 8003faa:	fba3 2301 	umull	r2, r3, r3, r1
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2264      	movs	r2, #100	; 0x64
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	1acb      	subs	r3, r1, r3
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fbe:	4b36      	ldr	r3, [pc, #216]	; (8004098 <UART_SetConfig+0x2d4>)
 8003fc0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fcc:	441c      	add	r4, r3
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	1891      	adds	r1, r2, r2
 8003fe6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fe8:	415b      	adcs	r3, r3
 8003fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	1851      	adds	r1, r2, r1
 8003ff4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	414b      	adcs	r3, r1
 8003ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004008:	4659      	mov	r1, fp
 800400a:	00cb      	lsls	r3, r1, #3
 800400c:	4651      	mov	r1, sl
 800400e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004012:	4651      	mov	r1, sl
 8004014:	00ca      	lsls	r2, r1, #3
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	4603      	mov	r3, r0
 800401c:	4642      	mov	r2, r8
 800401e:	189b      	adds	r3, r3, r2
 8004020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004024:	464b      	mov	r3, r9
 8004026:	460a      	mov	r2, r1
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800403c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004040:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004044:	460b      	mov	r3, r1
 8004046:	18db      	adds	r3, r3, r3
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
 800404a:	4613      	mov	r3, r2
 800404c:	eb42 0303 	adc.w	r3, r2, r3
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004056:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800405a:	f7fc f8d9 	bl	8000210 <__aeabi_uldivmod>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <UART_SetConfig+0x2d4>)
 8004064:	fba3 1302 	umull	r1, r3, r3, r2
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	2164      	movs	r1, #100	; 0x64
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	3332      	adds	r3, #50	; 0x32
 8004076:	4a08      	ldr	r2, [pc, #32]	; (8004098 <UART_SetConfig+0x2d4>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	f003 0207 	and.w	r2, r3, #7
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4422      	add	r2, r4
 800408a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800408c:	e105      	b.n	800429a <UART_SetConfig+0x4d6>
 800408e:	bf00      	nop
 8004090:	40011000 	.word	0x40011000
 8004094:	40011400 	.word	0x40011400
 8004098:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800409c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040ae:	4642      	mov	r2, r8
 80040b0:	464b      	mov	r3, r9
 80040b2:	1891      	adds	r1, r2, r2
 80040b4:	6239      	str	r1, [r7, #32]
 80040b6:	415b      	adcs	r3, r3
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040be:	4641      	mov	r1, r8
 80040c0:	1854      	adds	r4, r2, r1
 80040c2:	4649      	mov	r1, r9
 80040c4:	eb43 0501 	adc.w	r5, r3, r1
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	00eb      	lsls	r3, r5, #3
 80040d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d6:	00e2      	lsls	r2, r4, #3
 80040d8:	4614      	mov	r4, r2
 80040da:	461d      	mov	r5, r3
 80040dc:	4643      	mov	r3, r8
 80040de:	18e3      	adds	r3, r4, r3
 80040e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040e4:	464b      	mov	r3, r9
 80040e6:	eb45 0303 	adc.w	r3, r5, r3
 80040ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800410a:	4629      	mov	r1, r5
 800410c:	008b      	lsls	r3, r1, #2
 800410e:	4621      	mov	r1, r4
 8004110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004114:	4621      	mov	r1, r4
 8004116:	008a      	lsls	r2, r1, #2
 8004118:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800411c:	f7fc f878 	bl	8000210 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4b60      	ldr	r3, [pc, #384]	; (80042a8 <UART_SetConfig+0x4e4>)
 8004126:	fba3 2302 	umull	r2, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	011c      	lsls	r4, r3, #4
 800412e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004132:	2200      	movs	r2, #0
 8004134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004138:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800413c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004140:	4642      	mov	r2, r8
 8004142:	464b      	mov	r3, r9
 8004144:	1891      	adds	r1, r2, r2
 8004146:	61b9      	str	r1, [r7, #24]
 8004148:	415b      	adcs	r3, r3
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004150:	4641      	mov	r1, r8
 8004152:	1851      	adds	r1, r2, r1
 8004154:	6139      	str	r1, [r7, #16]
 8004156:	4649      	mov	r1, r9
 8004158:	414b      	adcs	r3, r1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004168:	4659      	mov	r1, fp
 800416a:	00cb      	lsls	r3, r1, #3
 800416c:	4651      	mov	r1, sl
 800416e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004172:	4651      	mov	r1, sl
 8004174:	00ca      	lsls	r2, r1, #3
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	4603      	mov	r3, r0
 800417c:	4642      	mov	r2, r8
 800417e:	189b      	adds	r3, r3, r2
 8004180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004184:	464b      	mov	r3, r9
 8004186:	460a      	mov	r2, r1
 8004188:	eb42 0303 	adc.w	r3, r2, r3
 800418c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	67bb      	str	r3, [r7, #120]	; 0x78
 800419a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041a8:	4649      	mov	r1, r9
 80041aa:	008b      	lsls	r3, r1, #2
 80041ac:	4641      	mov	r1, r8
 80041ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b2:	4641      	mov	r1, r8
 80041b4:	008a      	lsls	r2, r1, #2
 80041b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041ba:	f7fc f829 	bl	8000210 <__aeabi_uldivmod>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <UART_SetConfig+0x4e4>)
 80041c4:	fba3 1302 	umull	r1, r3, r3, r2
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	2164      	movs	r1, #100	; 0x64
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	3332      	adds	r3, #50	; 0x32
 80041d6:	4a34      	ldr	r2, [pc, #208]	; (80042a8 <UART_SetConfig+0x4e4>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e2:	441c      	add	r4, r3
 80041e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e8:	2200      	movs	r2, #0
 80041ea:	673b      	str	r3, [r7, #112]	; 0x70
 80041ec:	677a      	str	r2, [r7, #116]	; 0x74
 80041ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041f2:	4642      	mov	r2, r8
 80041f4:	464b      	mov	r3, r9
 80041f6:	1891      	adds	r1, r2, r2
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	415b      	adcs	r3, r3
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004202:	4641      	mov	r1, r8
 8004204:	1851      	adds	r1, r2, r1
 8004206:	6039      	str	r1, [r7, #0]
 8004208:	4649      	mov	r1, r9
 800420a:	414b      	adcs	r3, r1
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800421a:	4659      	mov	r1, fp
 800421c:	00cb      	lsls	r3, r1, #3
 800421e:	4651      	mov	r1, sl
 8004220:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004224:	4651      	mov	r1, sl
 8004226:	00ca      	lsls	r2, r1, #3
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	4603      	mov	r3, r0
 800422e:	4642      	mov	r2, r8
 8004230:	189b      	adds	r3, r3, r2
 8004232:	66bb      	str	r3, [r7, #104]	; 0x68
 8004234:	464b      	mov	r3, r9
 8004236:	460a      	mov	r2, r1
 8004238:	eb42 0303 	adc.w	r3, r2, r3
 800423c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	663b      	str	r3, [r7, #96]	; 0x60
 8004248:	667a      	str	r2, [r7, #100]	; 0x64
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004256:	4649      	mov	r1, r9
 8004258:	008b      	lsls	r3, r1, #2
 800425a:	4641      	mov	r1, r8
 800425c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004260:	4641      	mov	r1, r8
 8004262:	008a      	lsls	r2, r1, #2
 8004264:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004268:	f7fb ffd2 	bl	8000210 <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <UART_SetConfig+0x4e4>)
 8004272:	fba3 1302 	umull	r1, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	2164      	movs	r1, #100	; 0x64
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	3332      	adds	r3, #50	; 0x32
 8004284:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <UART_SetConfig+0x4e4>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	f003 020f 	and.w	r2, r3, #15
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4422      	add	r2, r4
 8004298:	609a      	str	r2, [r3, #8]
}
 800429a:	bf00      	nop
 800429c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a6:	bf00      	nop
 80042a8:	51eb851f 	.word	0x51eb851f

080042ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042ac:	b084      	sub	sp, #16
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	f107 001c 	add.w	r0, r7, #28
 80042ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d122      	bne.n	800430a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80042d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d105      	bne.n	80042fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa9c 	bl	800483c <USB_CoreReset>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]
 8004308:	e01a      	b.n	8004340 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fa90 	bl	800483c <USB_CoreReset>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	639a      	str	r2, [r3, #56]	; 0x38
 8004332:	e005      	b.n	8004340 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10b      	bne.n	800435e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f043 0206 	orr.w	r2, r3, #6
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800436a:	b004      	add	sp, #16
 800436c:	4770      	bx	lr

0800436e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f023 0201 	bic.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d115      	bne.n	80043de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043be:	2001      	movs	r0, #1
 80043c0:	f7fc fd2c 	bl	8000e1c <HAL_Delay>
      ms++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fa28 	bl	8004820 <USB_GetMode>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d01e      	beq.n	8004414 <USB_SetCurrentMode+0x84>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b31      	cmp	r3, #49	; 0x31
 80043da:	d9f0      	bls.n	80043be <USB_SetCurrentMode+0x2e>
 80043dc:	e01a      	b.n	8004414 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d115      	bne.n	8004410 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043f0:	2001      	movs	r0, #1
 80043f2:	f7fc fd13 	bl	8000e1c <HAL_Delay>
      ms++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3301      	adds	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fa0f 	bl	8004820 <USB_GetMode>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <USB_SetCurrentMode+0x84>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b31      	cmp	r3, #49	; 0x31
 800440c:	d9f0      	bls.n	80043f0 <USB_SetCurrentMode+0x60>
 800440e:	e001      	b.n	8004414 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e005      	b.n	8004420 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b32      	cmp	r3, #50	; 0x32
 8004418:	d101      	bne.n	800441e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004428:	b084      	sub	sp, #16
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e009      	b.n	800445c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	3340      	adds	r3, #64	; 0x40
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	2200      	movs	r2, #0
 8004454:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	3301      	adds	r3, #1
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b0e      	cmp	r3, #14
 8004460:	d9f2      	bls.n	8004448 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d11c      	bne.n	80044a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004476:	f043 0302 	orr.w	r3, r3, #2
 800447a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e005      	b.n	80044ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044b4:	461a      	mov	r2, r3
 80044b6:	2300      	movs	r3, #0
 80044b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	4619      	mov	r1, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c8:	461a      	mov	r2, r3
 80044ca:	680b      	ldr	r3, [r1, #0]
 80044cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d10c      	bne.n	80044ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d104      	bne.n	80044e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044da:	2100      	movs	r1, #0
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f965 	bl	80047ac <USB_SetDevSpeed>
 80044e2:	e008      	b.n	80044f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044e4:	2101      	movs	r1, #1
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f960 	bl	80047ac <USB_SetDevSpeed>
 80044ec:	e003      	b.n	80044f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044ee:	2103      	movs	r1, #3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f95b 	bl	80047ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044f6:	2110      	movs	r1, #16
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f8f3 	bl	80046e4 <USB_FlushTxFifo>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f91f 	bl	800474c <USB_FlushRxFifo>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	461a      	mov	r2, r3
 8004520:	2300      	movs	r3, #0
 8004522:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452a:	461a      	mov	r2, r3
 800452c:	2300      	movs	r3, #0
 800452e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004536:	461a      	mov	r2, r3
 8004538:	2300      	movs	r3, #0
 800453a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e043      	b.n	80045ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004558:	d118      	bne.n	800458c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	461a      	mov	r2, r3
 800456e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e013      	b.n	800459e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004582:	461a      	mov	r2, r3
 8004584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e008      	b.n	800459e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004598:	461a      	mov	r2, r3
 800459a:	2300      	movs	r3, #0
 800459c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	461a      	mov	r2, r3
 80045ac:	2300      	movs	r3, #0
 80045ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045bc:	461a      	mov	r2, r3
 80045be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	3301      	adds	r3, #1
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d3b7      	bcc.n	8004542 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	e043      	b.n	8004660 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ee:	d118      	bne.n	8004622 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10a      	bne.n	800460c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	461a      	mov	r2, r3
 8004604:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e013      	b.n	8004634 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	461a      	mov	r2, r3
 800461a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e008      	b.n	8004634 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462e:	461a      	mov	r2, r3
 8004630:	2300      	movs	r3, #0
 8004632:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	461a      	mov	r2, r3
 8004654:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004658:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3301      	adds	r3, #1
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	429a      	cmp	r2, r3
 8004666:	d3b7      	bcc.n	80045d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800467a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004688:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f043 0210 	orr.w	r2, r3, #16
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <USB_DevInit+0x2b8>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f043 0208 	orr.w	r2, r3, #8
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d107      	bne.n	80046d0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046c8:	f043 0304 	orr.w	r3, r3, #4
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046dc:	b004      	add	sp, #16
 80046de:	4770      	bx	lr
 80046e0:	803c3800 	.word	0x803c3800

080046e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3301      	adds	r3, #1
 80046f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a13      	ldr	r2, [pc, #76]	; (8004748 <USB_FlushTxFifo+0x64>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e01b      	b.n	800473c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	daf2      	bge.n	80046f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	019b      	lsls	r3, r3, #6
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3301      	adds	r3, #1
 8004720:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a08      	ldr	r2, [pc, #32]	; (8004748 <USB_FlushTxFifo+0x64>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e006      	b.n	800473c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b20      	cmp	r3, #32
 8004738:	d0f0      	beq.n	800471c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	00030d40 	.word	0x00030d40

0800474c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4a11      	ldr	r2, [pc, #68]	; (80047a8 <USB_FlushRxFifo+0x5c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e018      	b.n	800479c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	daf2      	bge.n	8004758 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2210      	movs	r2, #16
 800477a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <USB_FlushRxFifo+0x5c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e006      	b.n	800479c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b10      	cmp	r3, #16
 8004798:	d0f0      	beq.n	800477c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	00030d40 	.word	0x00030d40

080047ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	68f9      	ldr	r1, [r7, #12]
 80047c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047cc:	4313      	orrs	r3, r2
 80047ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047f8:	f023 0303 	bic.w	r3, r3, #3
 80047fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0301 	and.w	r3, r3, #1
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <USB_CoreReset+0x64>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e01b      	b.n	8004892 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	daf2      	bge.n	8004848 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f043 0201 	orr.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3301      	adds	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <USB_CoreReset+0x64>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e006      	b.n	8004892 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d0f0      	beq.n	8004872 <USB_CoreReset+0x36>

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	00030d40 	.word	0x00030d40

080048a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80048b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048b6:	2b84      	cmp	r3, #132	; 0x84
 80048b8:	d005      	beq.n	80048c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80048ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	3303      	adds	r3, #3
 80048c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80048c6:	68fb      	ldr	r3, [r7, #12]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80048d8:	f000 fb08 	bl	8004eec <vTaskStartScheduler>
  
  return osOK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80048e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e4:	b089      	sub	sp, #36	; 0x24
 80048e6:	af04      	add	r7, sp, #16
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d020      	beq.n	8004936 <osThreadCreate+0x54>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01c      	beq.n	8004936 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685c      	ldr	r4, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681d      	ldr	r5, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691e      	ldr	r6, [r3, #16]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff ffc8 	bl	80048a4 <makeFreeRtosPriority>
 8004914:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800491e:	9202      	str	r2, [sp, #8]
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	9100      	str	r1, [sp, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	4632      	mov	r2, r6
 8004928:	4629      	mov	r1, r5
 800492a:	4620      	mov	r0, r4
 800492c:	f000 f8ed 	bl	8004b0a <xTaskCreateStatic>
 8004930:	4603      	mov	r3, r0
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e01c      	b.n	8004970 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685c      	ldr	r4, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004942:	b29e      	uxth	r6, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ffaa 	bl	80048a4 <makeFreeRtosPriority>
 8004950:	4602      	mov	r2, r0
 8004952:	f107 030c 	add.w	r3, r7, #12
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	9200      	str	r2, [sp, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	4632      	mov	r2, r6
 800495e:	4629      	mov	r1, r5
 8004960:	4620      	mov	r0, r4
 8004962:	f000 f92f 	bl	8004bc4 <xTaskCreate>
 8004966:	4603      	mov	r3, r0
 8004968:	2b01      	cmp	r3, #1
 800496a:	d001      	beq.n	8004970 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	e000      	b.n	8004972 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004970:	68fb      	ldr	r3, [r7, #12]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800497a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <osDelay+0x16>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	e000      	b.n	8004992 <osDelay+0x18>
 8004990:	2301      	movs	r3, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fa76 	bl	8004e84 <vTaskDelay>
  
  return osOK;
 8004998:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f103 0208 	add.w	r2, r3, #8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f103 0208 	add.w	r2, r3, #8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f103 0208 	add.w	r2, r3, #8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	d103      	bne.n	8004a64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e00c      	b.n	8004a7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3308      	adds	r3, #8
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e002      	b.n	8004a72 <vListInsert+0x2e>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d2f6      	bcs.n	8004a6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6892      	ldr	r2, [r2, #8]
 8004acc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6852      	ldr	r2, [r2, #4]
 8004ad6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d103      	bne.n	8004aea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	1e5a      	subs	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b08e      	sub	sp, #56	; 0x38
 8004b0e:	af04      	add	r7, sp, #16
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10a      	bne.n	8004b34 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	61fb      	str	r3, [r7, #28]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b50:	23c4      	movs	r3, #196	; 0xc4
 8004b52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2bc4      	cmp	r3, #196	; 0xc4
 8004b58:	d00a      	beq.n	8004b70 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	61bb      	str	r3, [r7, #24]
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01e      	beq.n	8004bb6 <xTaskCreateStatic+0xac>
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01b      	beq.n	8004bb6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b90:	2300      	movs	r3, #0
 8004b92:	9303      	str	r3, [sp, #12]
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	9302      	str	r3, [sp, #8]
 8004b98:	f107 0314 	add.w	r3, r7, #20
 8004b9c:	9301      	str	r3, [sp, #4]
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f851 	bl	8004c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bb0:	f000 f8fa 	bl	8004da8 <prvAddNewTaskToReadyList>
 8004bb4:	e001      	b.n	8004bba <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bba:	697b      	ldr	r3, [r7, #20]
	}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3728      	adds	r7, #40	; 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08c      	sub	sp, #48	; 0x30
 8004bc8:	af04      	add	r7, sp, #16
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bd4:	88fb      	ldrh	r3, [r7, #6]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 ff25 	bl	8005a28 <pvPortMalloc>
 8004bde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00e      	beq.n	8004c04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004be6:	20c4      	movs	r0, #196	; 0xc4
 8004be8:	f000 ff1e 	bl	8005a28 <pvPortMalloc>
 8004bec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8004bfa:	e005      	b.n	8004c08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bfc:	6978      	ldr	r0, [r7, #20]
 8004bfe:	f000 ffdf 	bl	8005bc0 <vPortFree>
 8004c02:	e001      	b.n	8004c08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d017      	beq.n	8004c3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c16:	88fa      	ldrh	r2, [r7, #6]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9303      	str	r3, [sp, #12]
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	9302      	str	r3, [sp, #8]
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f80f 	bl	8004c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c32:	69f8      	ldr	r0, [r7, #28]
 8004c34:	f000 f8b8 	bl	8004da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e002      	b.n	8004c44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c44:	69bb      	ldr	r3, [r7, #24]
	}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	461a      	mov	r2, r3
 8004c68:	21a5      	movs	r1, #165	; 0xa5
 8004c6a:	f001 fc67 	bl	800653c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f023 0307 	bic.w	r3, r3, #7
 8004c86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	617b      	str	r3, [r7, #20]
}
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01f      	beq.n	8004cf4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	e012      	b.n	8004ce0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	7819      	ldrb	r1, [r3, #0]
 8004cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3334      	adds	r3, #52	; 0x34
 8004cca:	460a      	mov	r2, r1
 8004ccc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	61fb      	str	r3, [r7, #28]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2b0f      	cmp	r3, #15
 8004ce4:	d9e9      	bls.n	8004cba <prvInitialiseNewTask+0x6a>
 8004ce6:	e000      	b.n	8004cea <prvInitialiseNewTask+0x9a>
			{
				break;
 8004ce8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf2:	e003      	b.n	8004cfc <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	2b06      	cmp	r3, #6
 8004d00:	d901      	bls.n	8004d06 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d02:	2306      	movs	r3, #6
 8004d04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d10:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2200      	movs	r2, #0
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fe60 	bl	80049e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	3318      	adds	r3, #24
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff fe5b 	bl	80049e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	f1c3 0207 	rsb	r2, r3, #7
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	2200      	movs	r2, #0
 8004d46:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	335c      	adds	r3, #92	; 0x5c
 8004d5c:	2260      	movs	r2, #96	; 0x60
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 fbeb 	bl	800653c <memset>
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <prvInitialiseNewTask+0x14c>)
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	; (8004da0 <prvInitialiseNewTask+0x150>)
 8004d70:	665a      	str	r2, [r3, #100]	; 0x64
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	4a0b      	ldr	r2, [pc, #44]	; (8004da4 <prvInitialiseNewTask+0x154>)
 8004d76:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	68f9      	ldr	r1, [r7, #12]
 8004d7c:	69b8      	ldr	r0, [r7, #24]
 8004d7e:	f000 fc41 	bl	8005604 <pxPortInitialiseStack>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d94:	bf00      	nop
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	080067b8 	.word	0x080067b8
 8004da0:	080067d8 	.word	0x080067d8
 8004da4:	08006798 	.word	0x08006798

08004da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004db0:	f000 fd58 	bl	8005864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004db4:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <prvAddNewTaskToReadyList+0xc0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3301      	adds	r3, #1
 8004dba:	4a2b      	ldr	r2, [pc, #172]	; (8004e68 <prvAddNewTaskToReadyList+0xc0>)
 8004dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dbe:	4b2b      	ldr	r3, [pc, #172]	; (8004e6c <prvAddNewTaskToReadyList+0xc4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dc6:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <prvAddNewTaskToReadyList+0xc4>)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dcc:	4b26      	ldr	r3, [pc, #152]	; (8004e68 <prvAddNewTaskToReadyList+0xc0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d110      	bne.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dd4:	f000 faee 	bl	80053b4 <prvInitialiseTaskLists>
 8004dd8:	e00d      	b.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dda:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <prvAddNewTaskToReadyList+0xc8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004de2:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <prvAddNewTaskToReadyList+0xc4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d802      	bhi.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004df0:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <prvAddNewTaskToReadyList+0xc4>)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004df6:	4b1f      	ldr	r3, [pc, #124]	; (8004e74 <prvAddNewTaskToReadyList+0xcc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <prvAddNewTaskToReadyList+0xcc>)
 8004dfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e00:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <prvAddNewTaskToReadyList+0xcc>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <prvAddNewTaskToReadyList+0xd0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <prvAddNewTaskToReadyList+0xd0>)
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <prvAddNewTaskToReadyList+0xd4>)
 8004e28:	441a      	add	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f7ff fde3 	bl	80049fc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e36:	f000 fd45 	bl	80058c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <prvAddNewTaskToReadyList+0xc8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00e      	beq.n	8004e60 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <prvAddNewTaskToReadyList+0xc4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d207      	bcs.n	8004e60 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <prvAddNewTaskToReadyList+0xd8>)
 8004e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e60:	bf00      	nop
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000a94 	.word	0x20000a94
 8004e6c:	20000994 	.word	0x20000994
 8004e70:	20000aa0 	.word	0x20000aa0
 8004e74:	20000ab0 	.word	0x20000ab0
 8004e78:	20000a9c 	.word	0x20000a9c
 8004e7c:	20000998 	.word	0x20000998
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d017      	beq.n	8004ec6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <vTaskDelay+0x60>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <vTaskDelay+0x30>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60bb      	str	r3, [r7, #8]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004eb4:	f000 f886 	bl	8004fc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004eb8:	2100      	movs	r1, #0
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fb3c 	bl	8005538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ec0:	f000 f88e 	bl	8004fe0 <xTaskResumeAll>
 8004ec4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <vTaskDelay+0x64>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000abc 	.word	0x20000abc
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004efa:	463a      	mov	r2, r7
 8004efc:	1d39      	adds	r1, r7, #4
 8004efe:	f107 0308 	add.w	r3, r7, #8
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fb fb06 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	9202      	str	r2, [sp, #8]
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	2300      	movs	r3, #0
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	2300      	movs	r3, #0
 8004f18:	460a      	mov	r2, r1
 8004f1a:	4922      	ldr	r1, [pc, #136]	; (8004fa4 <vTaskStartScheduler+0xb8>)
 8004f1c:	4822      	ldr	r0, [pc, #136]	; (8004fa8 <vTaskStartScheduler+0xbc>)
 8004f1e:	f7ff fdf4 	bl	8004b0a <xTaskCreateStatic>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4a21      	ldr	r2, [pc, #132]	; (8004fac <vTaskStartScheduler+0xc0>)
 8004f26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f28:	4b20      	ldr	r3, [pc, #128]	; (8004fac <vTaskStartScheduler+0xc0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f30:	2301      	movs	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e001      	b.n	8004f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d11d      	bne.n	8004f7c <vTaskStartScheduler+0x90>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	613b      	str	r3, [r7, #16]
}
 8004f52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f54:	4b16      	ldr	r3, [pc, #88]	; (8004fb0 <vTaskStartScheduler+0xc4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	335c      	adds	r3, #92	; 0x5c
 8004f5a:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <vTaskStartScheduler+0xc8>)
 8004f5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f5e:	4b16      	ldr	r3, [pc, #88]	; (8004fb8 <vTaskStartScheduler+0xcc>)
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f66:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <vTaskStartScheduler+0xd0>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f6c:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <vTaskStartScheduler+0xd4>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004f72:	f7fb fcd5 	bl	8000920 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f76:	f000 fbd3 	bl	8005720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f7a:	e00e      	b.n	8004f9a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f82:	d10a      	bne.n	8004f9a <vTaskStartScheduler+0xae>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	60fb      	str	r3, [r7, #12]
}
 8004f96:	bf00      	nop
 8004f98:	e7fe      	b.n	8004f98 <vTaskStartScheduler+0xac>
}
 8004f9a:	bf00      	nop
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	08006740 	.word	0x08006740
 8004fa8:	08005385 	.word	0x08005385
 8004fac:	20000ab8 	.word	0x20000ab8
 8004fb0:	20000994 	.word	0x20000994
 8004fb4:	20000064 	.word	0x20000064
 8004fb8:	20000ab4 	.word	0x20000ab4
 8004fbc:	20000aa0 	.word	0x20000aa0
 8004fc0:	20000a98 	.word	0x20000a98

08004fc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fc8:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <vTaskSuspendAll+0x18>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	4a03      	ldr	r2, [pc, #12]	; (8004fdc <vTaskSuspendAll+0x18>)
 8004fd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fd2:	bf00      	nop
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	20000abc 	.word	0x20000abc

08004fe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fee:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <xTaskResumeAll+0x114>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <xTaskResumeAll+0x2c>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	603b      	str	r3, [r7, #0]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800500c:	f000 fc2a 	bl	8005864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005010:	4b38      	ldr	r3, [pc, #224]	; (80050f4 <xTaskResumeAll+0x114>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3b01      	subs	r3, #1
 8005016:	4a37      	ldr	r2, [pc, #220]	; (80050f4 <xTaskResumeAll+0x114>)
 8005018:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800501a:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <xTaskResumeAll+0x114>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d161      	bne.n	80050e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005022:	4b35      	ldr	r3, [pc, #212]	; (80050f8 <xTaskResumeAll+0x118>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d05d      	beq.n	80050e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800502a:	e02e      	b.n	800508a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800502c:	4b33      	ldr	r3, [pc, #204]	; (80050fc <xTaskResumeAll+0x11c>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3318      	adds	r3, #24
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fd3c 	bl	8004ab6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3304      	adds	r3, #4
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fd37 	bl	8004ab6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	2201      	movs	r2, #1
 800504e:	409a      	lsls	r2, r3
 8005050:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <xTaskResumeAll+0x120>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4313      	orrs	r3, r2
 8005056:	4a2a      	ldr	r2, [pc, #168]	; (8005100 <xTaskResumeAll+0x120>)
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4a27      	ldr	r2, [pc, #156]	; (8005104 <xTaskResumeAll+0x124>)
 8005068:	441a      	add	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f7ff fcc3 	bl	80049fc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	4b23      	ldr	r3, [pc, #140]	; (8005108 <xTaskResumeAll+0x128>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005084:	4b21      	ldr	r3, [pc, #132]	; (800510c <xTaskResumeAll+0x12c>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800508a:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <xTaskResumeAll+0x11c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1cc      	bne.n	800502c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005098:	f000 fa2e 	bl	80054f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800509c:	4b1c      	ldr	r3, [pc, #112]	; (8005110 <xTaskResumeAll+0x130>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d010      	beq.n	80050ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050a8:	f000 f836 	bl	8005118 <xTaskIncrementTick>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80050b2:	4b16      	ldr	r3, [pc, #88]	; (800510c <xTaskResumeAll+0x12c>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f1      	bne.n	80050a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80050c4:	4b12      	ldr	r3, [pc, #72]	; (8005110 <xTaskResumeAll+0x130>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <xTaskResumeAll+0x12c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050d2:	2301      	movs	r3, #1
 80050d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050d6:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <xTaskResumeAll+0x134>)
 80050d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050e6:	f000 fbed 	bl	80058c4 <vPortExitCritical>

	return xAlreadyYielded;
 80050ea:	68bb      	ldr	r3, [r7, #8]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20000abc 	.word	0x20000abc
 80050f8:	20000a94 	.word	0x20000a94
 80050fc:	20000a54 	.word	0x20000a54
 8005100:	20000a9c 	.word	0x20000a9c
 8005104:	20000998 	.word	0x20000998
 8005108:	20000994 	.word	0x20000994
 800510c:	20000aa8 	.word	0x20000aa8
 8005110:	20000aa4 	.word	0x20000aa4
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005122:	4b4e      	ldr	r3, [pc, #312]	; (800525c <xTaskIncrementTick+0x144>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f040 808e 	bne.w	8005248 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800512c:	4b4c      	ldr	r3, [pc, #304]	; (8005260 <xTaskIncrementTick+0x148>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005134:	4a4a      	ldr	r2, [pc, #296]	; (8005260 <xTaskIncrementTick+0x148>)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d120      	bne.n	8005182 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005140:	4b48      	ldr	r3, [pc, #288]	; (8005264 <xTaskIncrementTick+0x14c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <xTaskIncrementTick+0x48>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	603b      	str	r3, [r7, #0]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <xTaskIncrementTick+0x46>
 8005160:	4b40      	ldr	r3, [pc, #256]	; (8005264 <xTaskIncrementTick+0x14c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	4b40      	ldr	r3, [pc, #256]	; (8005268 <xTaskIncrementTick+0x150>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3e      	ldr	r2, [pc, #248]	; (8005264 <xTaskIncrementTick+0x14c>)
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	4a3e      	ldr	r2, [pc, #248]	; (8005268 <xTaskIncrementTick+0x150>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	4b3d      	ldr	r3, [pc, #244]	; (800526c <xTaskIncrementTick+0x154>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	4a3c      	ldr	r2, [pc, #240]	; (800526c <xTaskIncrementTick+0x154>)
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	f000 f9bb 	bl	80054f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005182:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <xTaskIncrementTick+0x158>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	429a      	cmp	r2, r3
 800518a:	d348      	bcc.n	800521e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800518c:	4b35      	ldr	r3, [pc, #212]	; (8005264 <xTaskIncrementTick+0x14c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005196:	4b36      	ldr	r3, [pc, #216]	; (8005270 <xTaskIncrementTick+0x158>)
 8005198:	f04f 32ff 	mov.w	r2, #4294967295
 800519c:	601a      	str	r2, [r3, #0]
					break;
 800519e:	e03e      	b.n	800521e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a0:	4b30      	ldr	r3, [pc, #192]	; (8005264 <xTaskIncrementTick+0x14c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d203      	bcs.n	80051c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051b8:	4a2d      	ldr	r2, [pc, #180]	; (8005270 <xTaskIncrementTick+0x158>)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051be:	e02e      	b.n	800521e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fc76 	bl	8004ab6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	3318      	adds	r3, #24
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fc6d 	bl	8004ab6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	2201      	movs	r2, #1
 80051e2:	409a      	lsls	r2, r3
 80051e4:	4b23      	ldr	r3, [pc, #140]	; (8005274 <xTaskIncrementTick+0x15c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	4a22      	ldr	r2, [pc, #136]	; (8005274 <xTaskIncrementTick+0x15c>)
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4a1f      	ldr	r2, [pc, #124]	; (8005278 <xTaskIncrementTick+0x160>)
 80051fc:	441a      	add	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7ff fbf9 	bl	80049fc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520e:	4b1b      	ldr	r3, [pc, #108]	; (800527c <xTaskIncrementTick+0x164>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	429a      	cmp	r2, r3
 8005216:	d3b9      	bcc.n	800518c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800521c:	e7b6      	b.n	800518c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <xTaskIncrementTick+0x164>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4914      	ldr	r1, [pc, #80]	; (8005278 <xTaskIncrementTick+0x160>)
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d901      	bls.n	800523a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005236:	2301      	movs	r3, #1
 8005238:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800523a:	4b11      	ldr	r3, [pc, #68]	; (8005280 <xTaskIncrementTick+0x168>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005242:	2301      	movs	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e004      	b.n	8005252 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005248:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <xTaskIncrementTick+0x16c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <xTaskIncrementTick+0x16c>)
 8005250:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005252:	697b      	ldr	r3, [r7, #20]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000abc 	.word	0x20000abc
 8005260:	20000a98 	.word	0x20000a98
 8005264:	20000a4c 	.word	0x20000a4c
 8005268:	20000a50 	.word	0x20000a50
 800526c:	20000aac 	.word	0x20000aac
 8005270:	20000ab4 	.word	0x20000ab4
 8005274:	20000a9c 	.word	0x20000a9c
 8005278:	20000998 	.word	0x20000998
 800527c:	20000994 	.word	0x20000994
 8005280:	20000aa8 	.word	0x20000aa8
 8005284:	20000aa4 	.word	0x20000aa4

08005288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800528e:	4b35      	ldr	r3, [pc, #212]	; (8005364 <vTaskSwitchContext+0xdc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005296:	4b34      	ldr	r3, [pc, #208]	; (8005368 <vTaskSwitchContext+0xe0>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800529c:	e05d      	b.n	800535a <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 800529e:	4b32      	ldr	r3, [pc, #200]	; (8005368 <vTaskSwitchContext+0xe0>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80052a4:	f7fb fb48 	bl	8000938 <getRunTimeCounterValue>
 80052a8:	4603      	mov	r3, r0
 80052aa:	4a30      	ldr	r2, [pc, #192]	; (800536c <vTaskSwitchContext+0xe4>)
 80052ac:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80052ae:	4b2f      	ldr	r3, [pc, #188]	; (800536c <vTaskSwitchContext+0xe4>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <vTaskSwitchContext+0xe8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d909      	bls.n	80052ce <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80052ba:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <vTaskSwitchContext+0xec>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80052c0:	4a2a      	ldr	r2, [pc, #168]	; (800536c <vTaskSwitchContext+0xe4>)
 80052c2:	6810      	ldr	r0, [r2, #0]
 80052c4:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <vTaskSwitchContext+0xe8>)
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	1a82      	subs	r2, r0, r2
 80052ca:	440a      	add	r2, r1
 80052cc:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80052ce:	4b27      	ldr	r3, [pc, #156]	; (800536c <vTaskSwitchContext+0xe4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a27      	ldr	r2, [pc, #156]	; (8005370 <vTaskSwitchContext+0xe8>)
 80052d4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d6:	4b28      	ldr	r3, [pc, #160]	; (8005378 <vTaskSwitchContext+0xf0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	fab3 f383 	clz	r3, r3
 80052e2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052e4:	7afb      	ldrb	r3, [r7, #11]
 80052e6:	f1c3 031f 	rsb	r3, r3, #31
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	4923      	ldr	r1, [pc, #140]	; (800537c <vTaskSwitchContext+0xf4>)
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <vTaskSwitchContext+0x8e>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	607b      	str	r3, [r7, #4]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <vTaskSwitchContext+0x8c>
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4a16      	ldr	r2, [pc, #88]	; (800537c <vTaskSwitchContext+0xf4>)
 8005322:	4413      	add	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	605a      	str	r2, [r3, #4]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	3308      	adds	r3, #8
 8005338:	429a      	cmp	r2, r3
 800533a:	d104      	bne.n	8005346 <vTaskSwitchContext+0xbe>
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4a09      	ldr	r2, [pc, #36]	; (8005374 <vTaskSwitchContext+0xec>)
 800534e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005350:	4b08      	ldr	r3, [pc, #32]	; (8005374 <vTaskSwitchContext+0xec>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	335c      	adds	r3, #92	; 0x5c
 8005356:	4a0a      	ldr	r2, [pc, #40]	; (8005380 <vTaskSwitchContext+0xf8>)
 8005358:	6013      	str	r3, [r2, #0]
}
 800535a:	bf00      	nop
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000abc 	.word	0x20000abc
 8005368:	20000aa8 	.word	0x20000aa8
 800536c:	20000ac4 	.word	0x20000ac4
 8005370:	20000ac0 	.word	0x20000ac0
 8005374:	20000994 	.word	0x20000994
 8005378:	20000a9c 	.word	0x20000a9c
 800537c:	20000998 	.word	0x20000998
 8005380:	20000064 	.word	0x20000064

08005384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800538c:	f000 f852 	bl	8005434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <prvIdleTask+0x28>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d9f9      	bls.n	800538c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <prvIdleTask+0x2c>)
 800539a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053a8:	e7f0      	b.n	800538c <prvIdleTask+0x8>
 80053aa:	bf00      	nop
 80053ac:	20000998 	.word	0x20000998
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053ba:	2300      	movs	r3, #0
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	e00c      	b.n	80053da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <prvInitialiseTaskLists+0x60>)
 80053cc:	4413      	add	r3, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fae7 	bl	80049a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3301      	adds	r3, #1
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d9ef      	bls.n	80053c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053e0:	480d      	ldr	r0, [pc, #52]	; (8005418 <prvInitialiseTaskLists+0x64>)
 80053e2:	f7ff fade 	bl	80049a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053e6:	480d      	ldr	r0, [pc, #52]	; (800541c <prvInitialiseTaskLists+0x68>)
 80053e8:	f7ff fadb 	bl	80049a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053ec:	480c      	ldr	r0, [pc, #48]	; (8005420 <prvInitialiseTaskLists+0x6c>)
 80053ee:	f7ff fad8 	bl	80049a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053f2:	480c      	ldr	r0, [pc, #48]	; (8005424 <prvInitialiseTaskLists+0x70>)
 80053f4:	f7ff fad5 	bl	80049a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053f8:	480b      	ldr	r0, [pc, #44]	; (8005428 <prvInitialiseTaskLists+0x74>)
 80053fa:	f7ff fad2 	bl	80049a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053fe:	4b0b      	ldr	r3, [pc, #44]	; (800542c <prvInitialiseTaskLists+0x78>)
 8005400:	4a05      	ldr	r2, [pc, #20]	; (8005418 <prvInitialiseTaskLists+0x64>)
 8005402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <prvInitialiseTaskLists+0x7c>)
 8005406:	4a05      	ldr	r2, [pc, #20]	; (800541c <prvInitialiseTaskLists+0x68>)
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000998 	.word	0x20000998
 8005418:	20000a24 	.word	0x20000a24
 800541c:	20000a38 	.word	0x20000a38
 8005420:	20000a54 	.word	0x20000a54
 8005424:	20000a68 	.word	0x20000a68
 8005428:	20000a80 	.word	0x20000a80
 800542c:	20000a4c 	.word	0x20000a4c
 8005430:	20000a50 	.word	0x20000a50

08005434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800543a:	e019      	b.n	8005470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800543c:	f000 fa12 	bl	8005864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005440:	4b10      	ldr	r3, [pc, #64]	; (8005484 <prvCheckTasksWaitingTermination+0x50>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fb32 	bl	8004ab6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005452:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <prvCheckTasksWaitingTermination+0x54>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3b01      	subs	r3, #1
 8005458:	4a0b      	ldr	r2, [pc, #44]	; (8005488 <prvCheckTasksWaitingTermination+0x54>)
 800545a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <prvCheckTasksWaitingTermination+0x58>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3b01      	subs	r3, #1
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <prvCheckTasksWaitingTermination+0x58>)
 8005464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005466:	f000 fa2d 	bl	80058c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f810 	bl	8005490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <prvCheckTasksWaitingTermination+0x58>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e1      	bne.n	800543c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000a68 	.word	0x20000a68
 8005488:	20000a94 	.word	0x20000a94
 800548c:	20000a7c 	.word	0x20000a7c

08005490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	335c      	adds	r3, #92	; 0x5c
 800549c:	4618      	mov	r0, r3
 800549e:	f001 f8af 	bl	8006600 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d108      	bne.n	80054be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fb85 	bl	8005bc0 <vPortFree>
				vPortFree( pxTCB );
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fb82 	bl	8005bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054bc:	e018      	b.n	80054f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d103      	bne.n	80054d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fb79 	bl	8005bc0 <vPortFree>
	}
 80054ce:	e00f      	b.n	80054f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d00a      	beq.n	80054f0 <prvDeleteTCB+0x60>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	60fb      	str	r3, [r7, #12]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <prvDeleteTCB+0x5e>
	}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <prvResetNextTaskUnblockTime+0x38>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <prvResetNextTaskUnblockTime+0x3c>)
 800550a:	f04f 32ff 	mov.w	r2, #4294967295
 800550e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005510:	e008      	b.n	8005524 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <prvResetNextTaskUnblockTime+0x38>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a04      	ldr	r2, [pc, #16]	; (8005534 <prvResetNextTaskUnblockTime+0x3c>)
 8005522:	6013      	str	r3, [r2, #0]
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	20000a4c 	.word	0x20000a4c
 8005534:	20000ab4 	.word	0x20000ab4

08005538 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005542:	4b29      	ldr	r3, [pc, #164]	; (80055e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005548:	4b28      	ldr	r3, [pc, #160]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3304      	adds	r3, #4
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fab1 	bl	8004ab6 <uxListRemove>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800555a:	4b24      	ldr	r3, [pc, #144]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	2201      	movs	r2, #1
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43da      	mvns	r2, r3
 8005568:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4013      	ands	r3, r2
 800556e:	4a20      	ldr	r2, [pc, #128]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005570:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d10a      	bne.n	8005590 <prvAddCurrentTaskToDelayedList+0x58>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005580:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	481a      	ldr	r0, [pc, #104]	; (80055f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800558a:	f7ff fa37 	bl	80049fc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800558e:	e026      	b.n	80055de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005598:	4b14      	ldr	r3, [pc, #80]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d209      	bcs.n	80055bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f7ff fa45 	bl	8004a44 <vListInsert>
}
 80055ba:	e010      	b.n	80055de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055bc:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f7ff fa3b 	bl	8004a44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055ce:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d202      	bcs.n	80055de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6013      	str	r3, [r2, #0]
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000a98 	.word	0x20000a98
 80055ec:	20000994 	.word	0x20000994
 80055f0:	20000a9c 	.word	0x20000a9c
 80055f4:	20000a80 	.word	0x20000a80
 80055f8:	20000a50 	.word	0x20000a50
 80055fc:	20000a4c 	.word	0x20000a4c
 8005600:	20000ab4 	.word	0x20000ab4

08005604 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3b04      	subs	r3, #4
 8005614:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800561c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3b04      	subs	r3, #4
 8005622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3b04      	subs	r3, #4
 8005632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005634:	4a0c      	ldr	r2, [pc, #48]	; (8005668 <pxPortInitialiseStack+0x64>)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3b14      	subs	r3, #20
 800563e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3b04      	subs	r3, #4
 800564a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f06f 0202 	mvn.w	r2, #2
 8005652:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b20      	subs	r3, #32
 8005658:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800565a:	68fb      	ldr	r3, [r7, #12]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	0800566d 	.word	0x0800566d

0800566c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005676:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <prvTaskExitError+0x54>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d00a      	beq.n	8005696 <prvTaskExitError+0x2a>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	60fb      	str	r3, [r7, #12]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <prvTaskExitError+0x28>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	60bb      	str	r3, [r7, #8]
}
 80056a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056aa:	bf00      	nop
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0fc      	beq.n	80056ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	2000000c 	.word	0x2000000c
	...

080056d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <pxCurrentTCBConst2>)
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	6808      	ldr	r0, [r1, #0]
 80056d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056da:	f380 8809 	msr	PSP, r0
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f04f 0000 	mov.w	r0, #0
 80056e6:	f380 8811 	msr	BASEPRI, r0
 80056ea:	4770      	bx	lr
 80056ec:	f3af 8000 	nop.w

080056f0 <pxCurrentTCBConst2>:
 80056f0:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop

080056f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056f8:	4808      	ldr	r0, [pc, #32]	; (800571c <prvPortStartFirstTask+0x24>)
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f380 8808 	msr	MSP, r0
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8814 	msr	CONTROL, r0
 800570a:	b662      	cpsie	i
 800570c:	b661      	cpsie	f
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	df00      	svc	0
 8005718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800571a:	bf00      	nop
 800571c:	e000ed08 	.word	0xe000ed08

08005720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005726:	4b46      	ldr	r3, [pc, #280]	; (8005840 <xPortStartScheduler+0x120>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a46      	ldr	r2, [pc, #280]	; (8005844 <xPortStartScheduler+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10a      	bne.n	8005746 <xPortStartScheduler+0x26>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	613b      	str	r3, [r7, #16]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005746:	4b3e      	ldr	r3, [pc, #248]	; (8005840 <xPortStartScheduler+0x120>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a3f      	ldr	r2, [pc, #252]	; (8005848 <xPortStartScheduler+0x128>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10a      	bne.n	8005766 <xPortStartScheduler+0x46>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	60fb      	str	r3, [r7, #12]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005766:	4b39      	ldr	r3, [pc, #228]	; (800584c <xPortStartScheduler+0x12c>)
 8005768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	22ff      	movs	r2, #255	; 0xff
 8005776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <xPortStartScheduler+0x130>)
 800578c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <xPortStartScheduler+0x134>)
 8005790:	2207      	movs	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005794:	e009      	b.n	80057aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005796:	4b2f      	ldr	r3, [pc, #188]	; (8005854 <xPortStartScheduler+0x134>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	4a2d      	ldr	r2, [pc, #180]	; (8005854 <xPortStartScheduler+0x134>)
 800579e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d0ef      	beq.n	8005796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057b6:	4b27      	ldr	r3, [pc, #156]	; (8005854 <xPortStartScheduler+0x134>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1c3 0307 	rsb	r3, r3, #7
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d00a      	beq.n	80057d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057d8:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <xPortStartScheduler+0x134>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <xPortStartScheduler+0x134>)
 80057e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <xPortStartScheduler+0x134>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ea:	4a1a      	ldr	r2, [pc, #104]	; (8005854 <xPortStartScheduler+0x134>)
 80057ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057f6:	4b18      	ldr	r3, [pc, #96]	; (8005858 <xPortStartScheduler+0x138>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <xPortStartScheduler+0x138>)
 80057fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <xPortStartScheduler+0x138>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a14      	ldr	r2, [pc, #80]	; (8005858 <xPortStartScheduler+0x138>)
 8005808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800580c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800580e:	f000 f8dd 	bl	80059cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <xPortStartScheduler+0x13c>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005818:	f000 f8fc 	bl	8005a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <xPortStartScheduler+0x140>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a0f      	ldr	r2, [pc, #60]	; (8005860 <xPortStartScheduler+0x140>)
 8005822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005828:	f7ff ff66 	bl	80056f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800582c:	f7ff fd2c 	bl	8005288 <vTaskSwitchContext>
	prvTaskExitError();
 8005830:	f7ff ff1c 	bl	800566c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	e000ed00 	.word	0xe000ed00
 8005844:	410fc271 	.word	0x410fc271
 8005848:	410fc270 	.word	0x410fc270
 800584c:	e000e400 	.word	0xe000e400
 8005850:	20000ac8 	.word	0x20000ac8
 8005854:	20000acc 	.word	0x20000acc
 8005858:	e000ed20 	.word	0xe000ed20
 800585c:	2000000c 	.word	0x2000000c
 8005860:	e000ef34 	.word	0xe000ef34

08005864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	607b      	str	r3, [r7, #4]
}
 800587c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <vPortEnterCritical+0x58>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <vPortEnterCritical+0x58>)
 8005886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <vPortEnterCritical+0x58>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d10f      	bne.n	80058b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <vPortEnterCritical+0x5c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	603b      	str	r3, [r7, #0]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <vPortEnterCritical+0x4a>
	}
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	2000000c 	.word	0x2000000c
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <vPortExitCritical+0x50>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <vPortExitCritical+0x24>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <vPortExitCritical+0x50>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <vPortExitCritical+0x50>)
 80058f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <vPortExitCritical+0x50>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <vPortExitCritical+0x42>
 80058fa:	2300      	movs	r3, #0
 80058fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
	...

08005920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005920:	f3ef 8009 	mrs	r0, PSP
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4b15      	ldr	r3, [pc, #84]	; (8005980 <pxCurrentTCBConst>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f01e 0f10 	tst.w	lr, #16
 8005930:	bf08      	it	eq
 8005932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	6010      	str	r0, [r2, #0]
 800593c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005944:	f380 8811 	msr	BASEPRI, r0
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f7ff fc9a 	bl	8005288 <vTaskSwitchContext>
 8005954:	f04f 0000 	mov.w	r0, #0
 8005958:	f380 8811 	msr	BASEPRI, r0
 800595c:	bc09      	pop	{r0, r3}
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	6808      	ldr	r0, [r1, #0]
 8005962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005966:	f01e 0f10 	tst.w	lr, #16
 800596a:	bf08      	it	eq
 800596c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005970:	f380 8809 	msr	PSP, r0
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst>:
 8005980:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059a2:	f7ff fbb9 	bl	8005118 <xTaskIncrementTick>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <SysTick_Handler+0x40>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <vPortSetupTimerInterrupt+0x38>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <vPortSetupTimerInterrupt+0x3c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <vPortSetupTimerInterrupt+0x40>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	099b      	lsrs	r3, r3, #6
 80059e8:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <vPortSetupTimerInterrupt+0x44>)
 80059ea:	3b01      	subs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e010 	.word	0xe000e010
 8005a04:	e000e018 	.word	0xe000e018
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	10624dd3 	.word	0x10624dd3
 8005a10:	e000e014 	.word	0xe000e014

08005a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a24 <vPortEnableVFP+0x10>
 8005a18:	6801      	ldr	r1, [r0, #0]
 8005a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a1e:	6001      	str	r1, [r0, #0]
 8005a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a22:	bf00      	nop
 8005a24:	e000ed88 	.word	0xe000ed88

08005a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a34:	f7ff fac6 	bl	8004fc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a38:	4b5b      	ldr	r3, [pc, #364]	; (8005ba8 <pvPortMalloc+0x180>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a40:	f000 f920 	bl	8005c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a44:	4b59      	ldr	r3, [pc, #356]	; (8005bac <pvPortMalloc+0x184>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 8093 	bne.w	8005b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01d      	beq.n	8005a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a58:	2208      	movs	r2, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d014      	beq.n	8005a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f023 0307 	bic.w	r3, r3, #7
 8005a70:	3308      	adds	r3, #8
 8005a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <pvPortMalloc+0x6c>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	617b      	str	r3, [r7, #20]
}
 8005a90:	bf00      	nop
 8005a92:	e7fe      	b.n	8005a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d06e      	beq.n	8005b78 <pvPortMalloc+0x150>
 8005a9a:	4b45      	ldr	r3, [pc, #276]	; (8005bb0 <pvPortMalloc+0x188>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d869      	bhi.n	8005b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aa4:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <pvPortMalloc+0x18c>)
 8005aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005aa8:	4b42      	ldr	r3, [pc, #264]	; (8005bb4 <pvPortMalloc+0x18c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aae:	e004      	b.n	8005aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d903      	bls.n	8005acc <pvPortMalloc+0xa4>
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f1      	bne.n	8005ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005acc:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <pvPortMalloc+0x180>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d050      	beq.n	8005b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2208      	movs	r2, #8
 8005adc:	4413      	add	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	2308      	movs	r3, #8
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d91f      	bls.n	8005b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <pvPortMalloc+0xf8>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	613b      	str	r3, [r7, #16]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	1ad2      	subs	r2, r2, r3
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b32:	69b8      	ldr	r0, [r7, #24]
 8005b34:	f000 f908 	bl	8005d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b38:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b46:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <pvPortMalloc+0x190>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d203      	bcs.n	8005b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b52:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <pvPortMalloc+0x190>)
 8005b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	4b13      	ldr	r3, [pc, #76]	; (8005bac <pvPortMalloc+0x184>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b6e:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <pvPortMalloc+0x194>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3301      	adds	r3, #1
 8005b74:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <pvPortMalloc+0x194>)
 8005b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b78:	f7ff fa32 	bl	8004fe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <pvPortMalloc+0x174>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	60fb      	str	r3, [r7, #12]
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <pvPortMalloc+0x172>
	return pvReturn;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3728      	adds	r7, #40	; 0x28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200046d8 	.word	0x200046d8
 8005bac:	200046ec 	.word	0x200046ec
 8005bb0:	200046dc 	.word	0x200046dc
 8005bb4:	200046d0 	.word	0x200046d0
 8005bb8:	200046e0 	.word	0x200046e0
 8005bbc:	200046e4 	.word	0x200046e4

08005bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d04d      	beq.n	8005c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	425b      	negs	r3, r3
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4413      	add	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <vPortFree+0xb8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <vPortFree+0x44>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	60fb      	str	r3, [r7, #12]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <vPortFree+0x62>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60bb      	str	r3, [r7, #8]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <vPortFree+0xb8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01e      	beq.n	8005c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d11a      	bne.n	8005c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <vPortFree+0xb8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	401a      	ands	r2, r3
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c48:	f7ff f9bc 	bl	8004fc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <vPortFree+0xbc>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4413      	add	r3, r2
 8005c56:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <vPortFree+0xbc>)
 8005c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c5a:	6938      	ldr	r0, [r7, #16]
 8005c5c:	f000 f874 	bl	8005d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <vPortFree+0xc0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3301      	adds	r3, #1
 8005c66:	4a06      	ldr	r2, [pc, #24]	; (8005c80 <vPortFree+0xc0>)
 8005c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c6a:	f7ff f9b9 	bl	8004fe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c6e:	bf00      	nop
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	200046ec 	.word	0x200046ec
 8005c7c:	200046dc 	.word	0x200046dc
 8005c80:	200046e8 	.word	0x200046e8

08005c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c90:	4b27      	ldr	r3, [pc, #156]	; (8005d30 <prvHeapInit+0xac>)
 8005c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3307      	adds	r3, #7
 8005ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0307 	bic.w	r3, r3, #7
 8005caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <prvHeapInit+0xac>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cbc:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <prvHeapInit+0xb0>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <prvHeapInit+0xb0>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4413      	add	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0307 	bic.w	r3, r3, #7
 8005cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <prvHeapInit+0xb4>)
 8005ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ce6:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <prvHeapInit+0xb4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <prvHeapInit+0xb4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d04:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <prvHeapInit+0xb4>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <prvHeapInit+0xb8>)
 8005d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <prvHeapInit+0xbc>)
 8005d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d1c:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <prvHeapInit+0xc0>)
 8005d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d22:	601a      	str	r2, [r3, #0]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000ad0 	.word	0x20000ad0
 8005d34:	200046d0 	.word	0x200046d0
 8005d38:	200046d8 	.word	0x200046d8
 8005d3c:	200046e0 	.word	0x200046e0
 8005d40:	200046dc 	.word	0x200046dc
 8005d44:	200046ec 	.word	0x200046ec

08005d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d50:	4b28      	ldr	r3, [pc, #160]	; (8005df4 <prvInsertBlockIntoFreeList+0xac>)
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e002      	b.n	8005d5c <prvInsertBlockIntoFreeList+0x14>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d8f7      	bhi.n	8005d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4413      	add	r3, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d108      	bne.n	8005d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	441a      	add	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	441a      	add	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d118      	bne.n	8005dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <prvInsertBlockIntoFreeList+0xb0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d00d      	beq.n	8005dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e008      	b.n	8005dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <prvInsertBlockIntoFreeList+0xb0>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e003      	b.n	8005dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d002      	beq.n	8005de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	200046d0 	.word	0x200046d0
 8005df8:	200046d8 	.word	0x200046d8

08005dfc <task_example>:
/********************** external data definition *****************************/

/********************** internal functions definition ************************/

void task_example(void* argument)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  eboard_led_red(false);
 8005e04:	2000      	movs	r0, #0
 8005e06:	f000 f93f 	bl	8006088 <eboard_led_red>
  eboard_led_green(false);
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	f000 f94a 	bl	80060a4 <eboard_led_green>
  eboard_led_blue(false);
 8005e10:	2000      	movs	r0, #0
 8005e12:	f000 f955 	bl	80060c0 <eboard_led_blue>

  bool state = false;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
  while(true)
  {
    eboard_led_red(eboard_switch());
 8005e1a:	f000 f95f 	bl	80060dc <eboard_switch>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 f931 	bl	8006088 <eboard_led_red>

    eboard_led_green(!eboard_switch());
 8005e26:	f000 f959 	bl	80060dc <eboard_switch>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	f083 0301 	eor.w	r3, r3, #1
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 f92e 	bl	80060a4 <eboard_led_green>

    eboard_led_blue(state);
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 f938 	bl	80060c0 <eboard_led_blue>
    state = !state;
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	bf14      	ite	ne
 8005e56:	2301      	movne	r3, #1
 8005e58:	2300      	moveq	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f083 0301 	eor.w	r3, r3, #1
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	73fb      	strb	r3, [r7, #15]
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]

    eboard_osal_port_delay(100);
 8005e6c:	2064      	movs	r0, #100	; 0x64
 8005e6e:	f000 f892 	bl	8005f96 <eboard_osal_port_delay>
    eboard_led_red(eboard_switch());
 8005e72:	e7d2      	b.n	8005e1a <task_example+0x1e>

08005e74 <app_init>:
}

/********************** external functions definition ************************/

void app_init(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af02      	add	r7, sp, #8
  // drivers
  {
    eboard_init();
 8005e7a:	f000 f963 	bl	8006144 <eboard_init>
  }

  // tasks
  {
    BaseType_t status;
    status = xTaskCreate(task_example, "task_example", 128, NULL, tskIDLE_PRIORITY, NULL);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	2300      	movs	r3, #0
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	2300      	movs	r3, #0
 8005e88:	2280      	movs	r2, #128	; 0x80
 8005e8a:	4906      	ldr	r1, [pc, #24]	; (8005ea4 <app_init+0x30>)
 8005e8c:	4806      	ldr	r0, [pc, #24]	; (8005ea8 <app_init+0x34>)
 8005e8e:	f7fe fe99 	bl	8004bc4 <xTaskCreate>
 8005e92:	6078      	str	r0, [r7, #4]
    while (pdPASS != status)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d1fc      	bne.n	8005e94 <app_init+0x20>
    {
      // error
    }
  }
}
 8005e9a:	bf00      	nop
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	08006770 	.word	0x08006770
 8005ea8:	08005dfd 	.word	0x08005dfd

08005eac <euart_hal_receive>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void euart_hal_receive(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  HAL_UARTEx_ReceiveToIdle_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7fd faa9 	bl	8003418 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <euart_hal_send>:

void euart_hal_send(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7fd fa53 	bl	800338e <HAL_UART_Transmit_IT>
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_error((void*)huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f8f7 	bl	80060ec <eboard_hal_port_uart_error>
  // TODO: ¿?
}
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	807b      	strh	r3, [r7, #2]
  eboard_hal_port_uart_rx_irq((void*)huart, size);
 8005f12:	887b      	ldrh	r3, [r7, #2]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8f2 	bl	8006100 <eboard_hal_port_uart_rx_irq>
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_tx_irq((void*)huart);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f8f9 	bl	8006124 <eboard_hal_port_uart_tx_irq>
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <eboard_hal_port_gpio_write>:

void eboard_hal_port_gpio_write(void *handle, bool value)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
  driver_gpio_descriptor_t_ *hgpio = (driver_gpio_descriptor_t_*)handle;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(hgpio->GPIOx, hgpio->GPIO_Pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6858      	ldr	r0, [r3, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	891b      	ldrh	r3, [r3, #8]
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	4619      	mov	r1, r3
 8005f56:	f7fb faa5 	bl	80014a4 <HAL_GPIO_WritePin>
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <eboard_hal_port_gpio_read>:

bool eboard_hal_port_gpio_read(void *handle)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  driver_gpio_descriptor_t_ *hgpio = (driver_gpio_descriptor_t_*)handle;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60fb      	str	r3, [r7, #12]
  GPIO_PinState state = HAL_GPIO_ReadPin(hgpio->GPIOx, hgpio->GPIO_Pin);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	891b      	ldrh	r3, [r3, #8]
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f7fb fa7b 	bl	8001474 <HAL_GPIO_ReadPin>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	72fb      	strb	r3, [r7, #11]
  return (GPIO_PIN_SET == state);
 8005f82:	7afb      	ldrb	r3, [r7, #11]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <eboard_osal_port_delay>:
{
  return (uint32_t)xTaskGetTickCount();
}

void eboard_osal_port_delay(uint32_t time_ms)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  vTaskDelay((TickType_t)((time_ms) / portTICK_PERIOD_MS));
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fe ff70 	bl	8004e84 <vTaskDelay>
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <eboard_uart_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void eboard_uart_init(void* phuart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	6078      	str	r0, [r7, #4]
  euart_init(pheuart_, phuart, tx_buffer_, RB_TX_BUFFER_SIZE_, rx_buffer_, RB_RX_BUFFER_SIZE_);
 8005fb4:	4807      	ldr	r0, [pc, #28]	; (8005fd4 <eboard_uart_init+0x28>)
 8005fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <eboard_uart_init+0x2c>)
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc4:	4a05      	ldr	r2, [pc, #20]	; (8005fdc <eboard_uart_init+0x30>)
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	f000 fa30 	bl	800642c <euart_init>
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20004bf0 	.word	0x20004bf0
 8005fd8:	20004af0 	.word	0x20004af0
 8005fdc:	200046f0 	.word	0x200046f0

08005fe0 <eboard_gpio_init>:

void eboard_gpio_init(eboard_gpio_idx_t idx, void* hgpio)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	6039      	str	r1, [r7, #0]
 8005fea:	71fb      	strb	r3, [r7, #7]
	gpios_[idx].hgpio = hgpio;
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	4905      	ldr	r1, [pc, #20]	; (8006004 <eboard_gpio_init+0x24>)
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000044 	.word	0x20000044

08006008 <eboard_gpio_write>:

void eboard_gpio_write(eboard_gpio_idx_t idx, bool value)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	460a      	mov	r2, r1
 8006012:	71fb      	strb	r3, [r7, #7]
 8006014:	4613      	mov	r3, r2
 8006016:	71bb      	strb	r3, [r7, #6]
  if(EBOARD_GPIO__CNT <= idx)
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d810      	bhi.n	8006040 <eboard_gpio_write+0x38>
  {
    return;
  }

  eboard_gpio_descriptor_t_* hgpio = gpios_ + idx;
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	4a0a      	ldr	r2, [pc, #40]	; (800604c <eboard_gpio_write+0x44>)
 8006024:	4413      	add	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  if(hgpio->input)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	791b      	ldrb	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d109      	bne.n	8006044 <eboard_gpio_write+0x3c>
  {
    return;
  }

  eboard_hal_port_gpio_write((void*)hgpio->hgpio, value);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	79ba      	ldrb	r2, [r7, #6]
 8006036:	4611      	mov	r1, r2
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff ff7e 	bl	8005f3a <eboard_hal_port_gpio_write>
 800603e:	e002      	b.n	8006046 <eboard_gpio_write+0x3e>
    return;
 8006040:	bf00      	nop
 8006042:	e000      	b.n	8006046 <eboard_gpio_write+0x3e>
    return;
 8006044:	bf00      	nop
}
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000044 	.word	0x20000044

08006050 <eboard_gpio_read>:

bool eboard_gpio_read(eboard_gpio_idx_t idx)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	71fb      	strb	r3, [r7, #7]
  if(EBOARD_GPIO__CNT <= idx)
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	2b03      	cmp	r3, #3
 800605e:	d901      	bls.n	8006064 <eboard_gpio_read+0x14>
  {
    return false;
 8006060:	2300      	movs	r3, #0
 8006062:	e00a      	b.n	800607a <eboard_gpio_read+0x2a>
  }

  eboard_gpio_descriptor_t_* hgpio = gpios_ + idx;
 8006064:	79fb      	ldrb	r3, [r7, #7]
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4a06      	ldr	r2, [pc, #24]	; (8006084 <eboard_gpio_read+0x34>)
 800606a:	4413      	add	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  return eboard_hal_port_gpio_read((void*)hgpio->hgpio);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff ff75 	bl	8005f62 <eboard_hal_port_gpio_read>
 8006078:	4603      	mov	r3, r0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000044 	.word	0x20000044

08006088 <eboard_led_red>:

void eboard_led_red(bool value)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	71fb      	strb	r3, [r7, #7]
  eboard_gpio_write(EBOARD_GPIO_LEDR, value);
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	4619      	mov	r1, r3
 8006096:	2000      	movs	r0, #0
 8006098:	f7ff ffb6 	bl	8006008 <eboard_gpio_write>
}
 800609c:	bf00      	nop
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <eboard_led_green>:

void eboard_led_green(bool value)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]
  eboard_gpio_write(EBOARD_GPIO_LEDG, value);
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	4619      	mov	r1, r3
 80060b2:	2001      	movs	r0, #1
 80060b4:	f7ff ffa8 	bl	8006008 <eboard_gpio_write>
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <eboard_led_blue>:

void eboard_led_blue(bool value)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	71fb      	strb	r3, [r7, #7]
  eboard_gpio_write(EBOARD_GPIO_LEDB, value);
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	4619      	mov	r1, r3
 80060ce:	2002      	movs	r0, #2
 80060d0:	f7ff ff9a 	bl	8006008 <eboard_gpio_write>
}
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <eboard_switch>:

bool eboard_switch(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
  return eboard_gpio_read(EBOARD_GPIO_SW);
 80060e0:	2003      	movs	r0, #3
 80060e2:	f7ff ffb5 	bl	8006050 <eboard_gpio_read>
 80060e6:	4603      	mov	r3, r0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	bd80      	pop	{r7, pc}

080060ec <eboard_hal_port_uart_error>:
  eboard_uart_swrite_line((elog_msg_len < (ELOG_MAXLEN - 1)) ? "" : " ...");
}

// port uart
void eboard_hal_port_uart_error(void* huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  // TODO: ¿?
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <eboard_hal_port_uart_rx_irq>:

void eboard_hal_port_uart_rx_irq(void* huart, uint16_t size)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	807b      	strh	r3, [r7, #2]
  euart_rx_irq(pheuart_, huart, size);
 800610c:	4804      	ldr	r0, [pc, #16]	; (8006120 <eboard_hal_port_uart_rx_irq+0x20>)
 800610e:	887b      	ldrh	r3, [r7, #2]
 8006110:	461a      	mov	r2, r3
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	f000 f9ac 	bl	8006470 <euart_rx_irq>
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20004bf0 	.word	0x20004bf0

08006124 <eboard_hal_port_uart_tx_irq>:

void eboard_hal_port_uart_tx_irq(void* huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  euart_tx_irq(pheuart_, (void*)huart);
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <eboard_hal_port_uart_tx_irq+0x1c>)
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	4618      	mov	r0, r3
 8006132:	f000 f9bc 	bl	80064ae <euart_tx_irq>
}
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20004bf0 	.word	0x20004bf0

08006144 <eboard_init>:

void eboard_init(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
  eboard_uart_init((void*)p_huart_selected_);
 800614a:	4b10      	ldr	r3, [pc, #64]	; (800618c <eboard_init+0x48>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff ff2c 	bl	8005fac <eboard_uart_init>

  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 8006154:	2300      	movs	r3, #0
 8006156:	71fb      	strb	r3, [r7, #7]
 8006158:	e00f      	b.n	800617a <eboard_init+0x36>
  {
    eboard_gpio_init(idx, (void*)(driver_gpios_ + idx));
 800615a:	79fa      	ldrb	r2, [r7, #7]
 800615c:	4613      	mov	r3, r2
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	461a      	mov	r2, r3
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <eboard_init+0x4c>)
 8006168:	441a      	add	r2, r3
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	4611      	mov	r1, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff ff36 	bl	8005fe0 <eboard_gpio_init>
  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	3301      	adds	r3, #1
 8006178:	71fb      	strb	r3, [r7, #7]
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	2b03      	cmp	r3, #3
 800617e:	d9ec      	bls.n	800615a <eboard_init+0x16>
  }
}
 8006180:	bf00      	nop
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000040 	.word	0x20000040
 8006190:	20000010 	.word	0x20000010

08006194 <inc_idex_>:
 */

#include "eringbuffer.h"

inline static void inc_idex_(size_t *index, size_t size)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  *index += 1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
  if(size <= *index)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d802      	bhi.n	80061b8 <inc_idex_+0x24>
  {
    *index = 0;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
  }
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <write_byte_>:

inline static void write_byte_(eringbuffer_t *rb, uint8_t byte)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  rb->buffer[rb->w] = byte;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	78fa      	ldrb	r2, [r7, #3]
 80061dc:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->w), rb->size);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f103 020c 	add.w	r2, r3, #12
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f7ff ffd2 	bl	8006194 <inc_idex_>
  rb->len++;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	609a      	str	r2, [r3, #8]
}
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <read_byte_>:

inline static void read_byte_(eringbuffer_t *rb, uint8_t *byte)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
  *byte = rb->buffer[rb->r];
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	4413      	add	r3, r2
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->r), rb->size);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f103 0210 	add.w	r2, r3, #16
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4619      	mov	r1, r3
 8006228:	4610      	mov	r0, r2
 800622a:	f7ff ffb3 	bl	8006194 <inc_idex_>
  rb->len--;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	1e5a      	subs	r2, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	609a      	str	r2, [r3, #8]
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <eringbuffer_init>:

void eringbuffer_init(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  rb->buffer = buffer;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	601a      	str	r2, [r3, #0]
  rb->size = size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	605a      	str	r2, [r3, #4]
  rb->len = 0;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]
  rb->w = 0;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	60da      	str	r2, [r3, #12]
  rb->r = 0;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	611a      	str	r2, [r3, #16]
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <eringbuffer_len>:
{
  return rb->size;
}

size_t eringbuffer_len(const eringbuffer_t *rb)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  return rb->len;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <eringbuffer_free>:

size_t eringbuffer_free(const eringbuffer_t *rb)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  return rb->size - rb->len;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	1ad3      	subs	r3, r2, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <eringbuffer_is_full>:

bool eringbuffer_is_full(const eringbuffer_t *rb)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_free(rb));
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff ffea 	bl	800628e <eringbuffer_free>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <eringbuffer_is_empty>:

bool eringbuffer_is_empty(const eringbuffer_t *rb)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_len(rb));
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff ffcd 	bl	8006276 <eringbuffer_len>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bf0c      	ite	eq
 80062e2:	2301      	moveq	r3, #1
 80062e4:	2300      	movne	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <eringbuffer_write_byte>:

size_t eringbuffer_write_byte(eringbuffer_t *rb, uint8_t byte)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	70fb      	strb	r3, [r7, #3]
  if(eringbuffer_is_full(rb))
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ffd5 	bl	80062ac <eringbuffer_is_full>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <eringbuffer_write_byte+0x1c>
  {
    return 0;
 8006308:	2300      	movs	r3, #0
 800630a:	e005      	b.n	8006318 <eringbuffer_write_byte+0x28>
  }
  write_byte_(rb, byte);
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ff57 	bl	80061c4 <write_byte_>
  return 1;
 8006316:	2301      	movs	r3, #1
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <eringbuffer_write>:

size_t eringbuffer_write(eringbuffer_t *rb, const uint8_t *buffer, size_t size)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e00d      	b.n	800634e <eringbuffer_write+0x2e>
  {
    if(0 == eringbuffer_write_byte(rb, buffer[i]))
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4413      	add	r3, r2
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	4619      	mov	r1, r3
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff ffd7 	bl	80062f0 <eringbuffer_write_byte>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <eringbuffer_write+0x38>
  for(i = 0; i < size; ++i)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	3301      	adds	r3, #1
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	429a      	cmp	r2, r3
 8006354:	d3ed      	bcc.n	8006332 <eringbuffer_write+0x12>
 8006356:	e000      	b.n	800635a <eringbuffer_write+0x3a>
    {
      break;
 8006358:	bf00      	nop
    }
  }
  return i;
 800635a:	697b      	ldr	r3, [r7, #20]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <eringbuffer_read_byte>:

size_t eringbuffer_read_byte(eringbuffer_t *rb, uint8_t *byte)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  if(eringbuffer_is_empty(rb))
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff ffad 	bl	80062ce <eringbuffer_is_empty>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <eringbuffer_read_byte+0x1a>
  {
    return 0;
 800637a:	2300      	movs	r3, #0
 800637c:	e004      	b.n	8006388 <eringbuffer_read_byte+0x24>
  }
  read_byte_(rb, byte);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff ff3e 	bl	8006202 <read_byte_>
  return 1;
 8006386:	2301      	movs	r3, #1
}
 8006388:	4618      	mov	r0, r3
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <eringbuffer_read>:

size_t eringbuffer_read(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e00c      	b.n	80063bc <eringbuffer_read+0x2c>
  {
    if(0 == eringbuffer_read_byte(rb, buffer + i))
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	4413      	add	r3, r2
 80063a8:	4619      	mov	r1, r3
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff ffda 	bl	8006364 <eringbuffer_read_byte>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d007      	beq.n	80063c6 <eringbuffer_read+0x36>
  for(i = 0; i < size; ++i)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	3301      	adds	r3, #1
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d3ee      	bcc.n	80063a2 <eringbuffer_read+0x12>
 80063c4:	e000      	b.n	80063c8 <eringbuffer_read+0x38>
    {
      break;
 80063c6:	bf00      	nop
    }
  }
  return i;
 80063c8:	697b      	ldr	r3, [r7, #20]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <hal_receive_>:
#define pTX_BUFFER      (phandle->tx.pbuffer)
#define pRX_RB          (&(phandle->rx.rb))
#define pRX_BUFFER      (phandle->rx.pbuffer)

void hal_receive_(euart_t *phandle)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  euart_hal_receive(phandle->phardware_handle, pRX_BUFFER, EUART_HAL_BUFFER_SIZE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3340      	adds	r3, #64	; 0x40
 80063e2:	2210      	movs	r2, #16
 80063e4:	4619      	mov	r1, r3
 80063e6:	f7ff fd61 	bl	8005eac <euart_hal_receive>
}
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <hal_send_>:

void hal_send_(euart_t *phandle)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  size_t tx_len = eringbuffer_read(pTX_RB, pTX_BUFFER, EUART_HAL_BUFFER_SIZE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f103 0008 	add.w	r0, r3, #8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	331c      	adds	r3, #28
 8006404:	2210      	movs	r2, #16
 8006406:	4619      	mov	r1, r3
 8006408:	f7ff ffc2 	bl	8006390 <eringbuffer_read>
 800640c:	60f8      	str	r0, [r7, #12]
  euart_hal_send(phandle->phardware_handle, pTX_BUFFER, tx_len);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	331c      	adds	r3, #28
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4619      	mov	r1, r3
 800641a:	f7ff fd58 	bl	8005ece <euart_hal_send>
  phandle->tx_free = false;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	711a      	strb	r2, [r3, #4]
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <euart_init>:

void euart_init(euart_t *phandle, void* phardware_handle, uint8_t* ptx_buffer, size_t tx_buffer_size, uint8_t* prx_buffer, size_t rx_buffer_size)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
  phandle->phardware_handle = phardware_handle;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	601a      	str	r2, [r3, #0]
  eringbuffer_init(pTX_RB, ptx_buffer, tx_buffer_size);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3308      	adds	r3, #8
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fef9 	bl	8006240 <eringbuffer_init>
  eringbuffer_init(pRX_RB, prx_buffer, rx_buffer_size);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	332c      	adds	r3, #44	; 0x2c
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	69b9      	ldr	r1, [r7, #24]
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fef2 	bl	8006240 <eringbuffer_init>
  phandle->tx_free = true;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	711a      	strb	r2, [r3, #4]

  hal_receive_(phandle);
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f7ff ffb5 	bl	80063d2 <hal_receive_>
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <euart_rx_irq>:
{
  return eringbuffer_read(pRX_RB, buffer, size);
}

void euart_rx_irq(euart_t *phandle, void *phardware_handle, size_t size)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  if(phandle->phardware_handle != phardware_handle)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	429a      	cmp	r2, r3
 8006484:	d10f      	bne.n	80064a6 <euart_rx_irq+0x36>
  {
    return;
  }

  if(0 < size)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d008      	beq.n	800649e <euart_rx_irq+0x2e>
  {
    eringbuffer_write(pRX_RB, pRX_BUFFER, size);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3340      	adds	r3, #64	; 0x40
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4619      	mov	r1, r3
 800649a:	f7ff ff41 	bl	8006320 <eringbuffer_write>
  }
  hal_receive_(phandle);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff ff97 	bl	80063d2 <hal_receive_>
 80064a4:	e000      	b.n	80064a8 <euart_rx_irq+0x38>
    return;
 80064a6:	bf00      	nop
}
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <euart_tx_irq>:

void euart_tx_irq(euart_t *phandle, void *phardware_handle)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
  phandle->tx_free = true;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	711a      	strb	r2, [r3, #4]
  if(phandle->phardware_handle != phardware_handle)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d10e      	bne.n	80064e6 <euart_tx_irq+0x38>
  {
    return;
  }

  if(!eringbuffer_is_empty(pTX_RB))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3308      	adds	r3, #8
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff fefe 	bl	80062ce <eringbuffer_is_empty>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f083 0301 	eor.w	r3, r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <euart_tx_irq+0x3a>
  {
    hal_send_(phandle);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff ff87 	bl	80063f2 <hal_send_>
 80064e4:	e000      	b.n	80064e8 <euart_tx_irq+0x3a>
    return;
 80064e6:	bf00      	nop
  }
}
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <__libc_init_array>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	4d0d      	ldr	r5, [pc, #52]	; (8006528 <__libc_init_array+0x38>)
 80064f4:	4c0d      	ldr	r4, [pc, #52]	; (800652c <__libc_init_array+0x3c>)
 80064f6:	1b64      	subs	r4, r4, r5
 80064f8:	10a4      	asrs	r4, r4, #2
 80064fa:	2600      	movs	r6, #0
 80064fc:	42a6      	cmp	r6, r4
 80064fe:	d109      	bne.n	8006514 <__libc_init_array+0x24>
 8006500:	4d0b      	ldr	r5, [pc, #44]	; (8006530 <__libc_init_array+0x40>)
 8006502:	4c0c      	ldr	r4, [pc, #48]	; (8006534 <__libc_init_array+0x44>)
 8006504:	f000 f8e4 	bl	80066d0 <_init>
 8006508:	1b64      	subs	r4, r4, r5
 800650a:	10a4      	asrs	r4, r4, #2
 800650c:	2600      	movs	r6, #0
 800650e:	42a6      	cmp	r6, r4
 8006510:	d105      	bne.n	800651e <__libc_init_array+0x2e>
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	f855 3b04 	ldr.w	r3, [r5], #4
 8006518:	4798      	blx	r3
 800651a:	3601      	adds	r6, #1
 800651c:	e7ee      	b.n	80064fc <__libc_init_array+0xc>
 800651e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006522:	4798      	blx	r3
 8006524:	3601      	adds	r6, #1
 8006526:	e7f2      	b.n	800650e <__libc_init_array+0x1e>
 8006528:	08006800 	.word	0x08006800
 800652c:	08006800 	.word	0x08006800
 8006530:	08006800 	.word	0x08006800
 8006534:	08006804 	.word	0x08006804

08006538 <__retarget_lock_acquire_recursive>:
 8006538:	4770      	bx	lr

0800653a <__retarget_lock_release_recursive>:
 800653a:	4770      	bx	lr

0800653c <memset>:
 800653c:	4402      	add	r2, r0
 800653e:	4603      	mov	r3, r0
 8006540:	4293      	cmp	r3, r2
 8006542:	d100      	bne.n	8006546 <memset+0xa>
 8006544:	4770      	bx	lr
 8006546:	f803 1b01 	strb.w	r1, [r3], #1
 800654a:	e7f9      	b.n	8006540 <memset+0x4>

0800654c <_free_r>:
 800654c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800654e:	2900      	cmp	r1, #0
 8006550:	d044      	beq.n	80065dc <_free_r+0x90>
 8006552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006556:	9001      	str	r0, [sp, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f1a1 0404 	sub.w	r4, r1, #4
 800655e:	bfb8      	it	lt
 8006560:	18e4      	addlt	r4, r4, r3
 8006562:	f000 f8a9 	bl	80066b8 <__malloc_lock>
 8006566:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <_free_r+0x94>)
 8006568:	9801      	ldr	r0, [sp, #4]
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	b933      	cbnz	r3, 800657c <_free_r+0x30>
 800656e:	6063      	str	r3, [r4, #4]
 8006570:	6014      	str	r4, [r2, #0]
 8006572:	b003      	add	sp, #12
 8006574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006578:	f000 b8a4 	b.w	80066c4 <__malloc_unlock>
 800657c:	42a3      	cmp	r3, r4
 800657e:	d908      	bls.n	8006592 <_free_r+0x46>
 8006580:	6825      	ldr	r5, [r4, #0]
 8006582:	1961      	adds	r1, r4, r5
 8006584:	428b      	cmp	r3, r1
 8006586:	bf01      	itttt	eq
 8006588:	6819      	ldreq	r1, [r3, #0]
 800658a:	685b      	ldreq	r3, [r3, #4]
 800658c:	1949      	addeq	r1, r1, r5
 800658e:	6021      	streq	r1, [r4, #0]
 8006590:	e7ed      	b.n	800656e <_free_r+0x22>
 8006592:	461a      	mov	r2, r3
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	b10b      	cbz	r3, 800659c <_free_r+0x50>
 8006598:	42a3      	cmp	r3, r4
 800659a:	d9fa      	bls.n	8006592 <_free_r+0x46>
 800659c:	6811      	ldr	r1, [r2, #0]
 800659e:	1855      	adds	r5, r2, r1
 80065a0:	42a5      	cmp	r5, r4
 80065a2:	d10b      	bne.n	80065bc <_free_r+0x70>
 80065a4:	6824      	ldr	r4, [r4, #0]
 80065a6:	4421      	add	r1, r4
 80065a8:	1854      	adds	r4, r2, r1
 80065aa:	42a3      	cmp	r3, r4
 80065ac:	6011      	str	r1, [r2, #0]
 80065ae:	d1e0      	bne.n	8006572 <_free_r+0x26>
 80065b0:	681c      	ldr	r4, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	6053      	str	r3, [r2, #4]
 80065b6:	4421      	add	r1, r4
 80065b8:	6011      	str	r1, [r2, #0]
 80065ba:	e7da      	b.n	8006572 <_free_r+0x26>
 80065bc:	d902      	bls.n	80065c4 <_free_r+0x78>
 80065be:	230c      	movs	r3, #12
 80065c0:	6003      	str	r3, [r0, #0]
 80065c2:	e7d6      	b.n	8006572 <_free_r+0x26>
 80065c4:	6825      	ldr	r5, [r4, #0]
 80065c6:	1961      	adds	r1, r4, r5
 80065c8:	428b      	cmp	r3, r1
 80065ca:	bf04      	itt	eq
 80065cc:	6819      	ldreq	r1, [r3, #0]
 80065ce:	685b      	ldreq	r3, [r3, #4]
 80065d0:	6063      	str	r3, [r4, #4]
 80065d2:	bf04      	itt	eq
 80065d4:	1949      	addeq	r1, r1, r5
 80065d6:	6021      	streq	r1, [r4, #0]
 80065d8:	6054      	str	r4, [r2, #4]
 80065da:	e7ca      	b.n	8006572 <_free_r+0x26>
 80065dc:	b003      	add	sp, #12
 80065de:	bd30      	pop	{r4, r5, pc}
 80065e0:	20004c44 	.word	0x20004c44

080065e4 <cleanup_glue>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	460c      	mov	r4, r1
 80065e8:	6809      	ldr	r1, [r1, #0]
 80065ea:	4605      	mov	r5, r0
 80065ec:	b109      	cbz	r1, 80065f2 <cleanup_glue+0xe>
 80065ee:	f7ff fff9 	bl	80065e4 <cleanup_glue>
 80065f2:	4621      	mov	r1, r4
 80065f4:	4628      	mov	r0, r5
 80065f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065fa:	f7ff bfa7 	b.w	800654c <_free_r>
	...

08006600 <_reclaim_reent>:
 8006600:	4b2c      	ldr	r3, [pc, #176]	; (80066b4 <_reclaim_reent+0xb4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4283      	cmp	r3, r0
 8006606:	b570      	push	{r4, r5, r6, lr}
 8006608:	4604      	mov	r4, r0
 800660a:	d051      	beq.n	80066b0 <_reclaim_reent+0xb0>
 800660c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800660e:	b143      	cbz	r3, 8006622 <_reclaim_reent+0x22>
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d14a      	bne.n	80066ac <_reclaim_reent+0xac>
 8006616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006618:	6819      	ldr	r1, [r3, #0]
 800661a:	b111      	cbz	r1, 8006622 <_reclaim_reent+0x22>
 800661c:	4620      	mov	r0, r4
 800661e:	f7ff ff95 	bl	800654c <_free_r>
 8006622:	6961      	ldr	r1, [r4, #20]
 8006624:	b111      	cbz	r1, 800662c <_reclaim_reent+0x2c>
 8006626:	4620      	mov	r0, r4
 8006628:	f7ff ff90 	bl	800654c <_free_r>
 800662c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800662e:	b111      	cbz	r1, 8006636 <_reclaim_reent+0x36>
 8006630:	4620      	mov	r0, r4
 8006632:	f7ff ff8b 	bl	800654c <_free_r>
 8006636:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006638:	b111      	cbz	r1, 8006640 <_reclaim_reent+0x40>
 800663a:	4620      	mov	r0, r4
 800663c:	f7ff ff86 	bl	800654c <_free_r>
 8006640:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006642:	b111      	cbz	r1, 800664a <_reclaim_reent+0x4a>
 8006644:	4620      	mov	r0, r4
 8006646:	f7ff ff81 	bl	800654c <_free_r>
 800664a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800664c:	b111      	cbz	r1, 8006654 <_reclaim_reent+0x54>
 800664e:	4620      	mov	r0, r4
 8006650:	f7ff ff7c 	bl	800654c <_free_r>
 8006654:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006656:	b111      	cbz	r1, 800665e <_reclaim_reent+0x5e>
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff ff77 	bl	800654c <_free_r>
 800665e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006660:	b111      	cbz	r1, 8006668 <_reclaim_reent+0x68>
 8006662:	4620      	mov	r0, r4
 8006664:	f7ff ff72 	bl	800654c <_free_r>
 8006668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800666a:	b111      	cbz	r1, 8006672 <_reclaim_reent+0x72>
 800666c:	4620      	mov	r0, r4
 800666e:	f7ff ff6d 	bl	800654c <_free_r>
 8006672:	69a3      	ldr	r3, [r4, #24]
 8006674:	b1e3      	cbz	r3, 80066b0 <_reclaim_reent+0xb0>
 8006676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006678:	4620      	mov	r0, r4
 800667a:	4798      	blx	r3
 800667c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800667e:	b1b9      	cbz	r1, 80066b0 <_reclaim_reent+0xb0>
 8006680:	4620      	mov	r0, r4
 8006682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006686:	f7ff bfad 	b.w	80065e4 <cleanup_glue>
 800668a:	5949      	ldr	r1, [r1, r5]
 800668c:	b941      	cbnz	r1, 80066a0 <_reclaim_reent+0xa0>
 800668e:	3504      	adds	r5, #4
 8006690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006692:	2d80      	cmp	r5, #128	; 0x80
 8006694:	68d9      	ldr	r1, [r3, #12]
 8006696:	d1f8      	bne.n	800668a <_reclaim_reent+0x8a>
 8006698:	4620      	mov	r0, r4
 800669a:	f7ff ff57 	bl	800654c <_free_r>
 800669e:	e7ba      	b.n	8006616 <_reclaim_reent+0x16>
 80066a0:	680e      	ldr	r6, [r1, #0]
 80066a2:	4620      	mov	r0, r4
 80066a4:	f7ff ff52 	bl	800654c <_free_r>
 80066a8:	4631      	mov	r1, r6
 80066aa:	e7ef      	b.n	800668c <_reclaim_reent+0x8c>
 80066ac:	2500      	movs	r5, #0
 80066ae:	e7ef      	b.n	8006690 <_reclaim_reent+0x90>
 80066b0:	bd70      	pop	{r4, r5, r6, pc}
 80066b2:	bf00      	nop
 80066b4:	20000064 	.word	0x20000064

080066b8 <__malloc_lock>:
 80066b8:	4801      	ldr	r0, [pc, #4]	; (80066c0 <__malloc_lock+0x8>)
 80066ba:	f7ff bf3d 	b.w	8006538 <__retarget_lock_acquire_recursive>
 80066be:	bf00      	nop
 80066c0:	20004c40 	.word	0x20004c40

080066c4 <__malloc_unlock>:
 80066c4:	4801      	ldr	r0, [pc, #4]	; (80066cc <__malloc_unlock+0x8>)
 80066c6:	f7ff bf38 	b.w	800653a <__retarget_lock_release_recursive>
 80066ca:	bf00      	nop
 80066cc:	20004c40 	.word	0x20004c40

080066d0 <_init>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	bf00      	nop
 80066d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d6:	bc08      	pop	{r3}
 80066d8:	469e      	mov	lr, r3
 80066da:	4770      	bx	lr

080066dc <_fini>:
 80066dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066de:	bf00      	nop
 80066e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e2:	bc08      	pop	{r3}
 80066e4:	469e      	mov	lr, r3
 80066e6:	4770      	bx	lr
