
RTOSII_tp1_prueba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800669c  0800669c  0001669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067bc  080067bc  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c4  080067c4  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080067cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b94  200000c8  08006894  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c5c  08006894  00024c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c795  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e40  00000000  00000000  0003c88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  000406d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  00041e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254d2  00000000  00000000  00043458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae45  00000000  00000000  0006892a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dca87  00000000  00000000  0008376f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001601f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000657c  00000000  00000000  00160248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006684 	.word	0x08006684

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	08006684 	.word	0x08006684

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200000e4 	.word	0x200000e4
 8000544:	200001a8 	.word	0x200001a8

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fc33 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f827 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f935 	bl	80007c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800055a:	f000 f8db 	bl	8000714 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055e:	f000 f903 	bl	8000768 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000562:	f000 f88b 	bl	800067c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 8000566:	480c      	ldr	r0, [pc, #48]	; (8000598 <main+0x50>)
 8000568:	f002 faba 	bl	8002ae0 <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 800056c:	f005 fcc8 	bl	8005f00 <app_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <main+0x54>)
 8000572:	1d3c      	adds	r4, r7, #4
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 f9d3 	bl	8004932 <osThreadCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <main+0x58>)
 8000590:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000592:	f004 f9c7 	bl	8004924 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	e7fe      	b.n	8000596 <main+0x4e>
 8000598:	200003a8 	.word	0x200003a8
 800059c:	080066a8 	.word	0x080066a8
 80005a0:	20000940 	.word	0x20000940

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 ff9c 	bl	80064f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <SystemClock_Config+0xd0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a28      	ldr	r2, [pc, #160]	; (8000674 <SystemClock_Config+0xd0>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <SystemClock_Config+0xd0>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <SystemClock_Config+0xd4>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000604:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000618:	23a8      	movs	r3, #168	; 0xa8
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000620:	2307      	movs	r3, #7
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f001 ff69 	bl	8002504 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000638:	f000 f9ba 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f8ac 	bl	80017b8 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000666:	f000 f9a3 	bl	80009b0 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_TIM2_Init+0x94>)
 800069a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_TIM2_Init+0x94>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_TIM2_Init+0x94>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42-1;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_TIM2_Init+0x94>)
 80006ae:	2229      	movs	r2, #41	; 0x29
 80006b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_TIM2_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_TIM2_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <MX_TIM2_Init+0x94>)
 80006c0:	f002 f9be 	bl	8002a40 <HAL_TIM_Base_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f971 	bl	80009b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_TIM2_Init+0x94>)
 80006dc:	f002 fb78 	bl	8002dd0 <HAL_TIM_ConfigClockSource>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f963 	bl	80009b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_TIM2_Init+0x94>)
 80006f8:	f002 fd94 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000702:	f000 f955 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200003a8 	.word	0x200003a8

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART3_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800074c:	f002 fdfa 	bl	8003344 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f92b 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200003f0 	.word	0x200003f0
 8000764:	40004800 	.word	0x40004800

08000768 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000772:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2206      	movs	r2, #6
 8000778:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2202      	movs	r2, #2
 800077e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2202      	movs	r2, #2
 800078a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2201      	movs	r2, #1
 8000790:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	f000 febc 	bl	8001528 <HAL_PCD_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f8fb 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000434 	.word	0x20000434

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b50      	ldr	r3, [pc, #320]	; (8000920 <MX_GPIO_Init+0x15c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a4f      	ldr	r2, [pc, #316]	; (8000920 <MX_GPIO_Init+0x15c>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b4d      	ldr	r3, [pc, #308]	; (8000920 <MX_GPIO_Init+0x15c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b49      	ldr	r3, [pc, #292]	; (8000920 <MX_GPIO_Init+0x15c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a48      	ldr	r2, [pc, #288]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b46      	ldr	r3, [pc, #280]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b42      	ldr	r3, [pc, #264]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a41      	ldr	r2, [pc, #260]	; (8000920 <MX_GPIO_Init+0x15c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b3f      	ldr	r3, [pc, #252]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b3b      	ldr	r3, [pc, #236]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a3a      	ldr	r2, [pc, #232]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b38      	ldr	r3, [pc, #224]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a33      	ldr	r2, [pc, #204]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <MX_GPIO_Init+0x15c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_GPIO_Init+0x15c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <MX_GPIO_Init+0x15c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f244 0181 	movw	r1, #16513	; 0x4081
 8000888:	4826      	ldr	r0, [pc, #152]	; (8000924 <MX_GPIO_Init+0x160>)
 800088a:	f000 fe1b 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	4825      	ldr	r0, [pc, #148]	; (8000928 <MX_GPIO_Init+0x164>)
 8000894:	f000 fe16 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800089e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	481f      	ldr	r0, [pc, #124]	; (800092c <MX_GPIO_Init+0x168>)
 80008b0:	f000 fc5c 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4815      	ldr	r0, [pc, #84]	; (8000924 <MX_GPIO_Init+0x160>)
 80008ce:	f000 fc4d 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d2:	2340      	movs	r3, #64	; 0x40
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	480f      	ldr	r0, [pc, #60]	; (8000928 <MX_GPIO_Init+0x164>)
 80008ea:	f000 fc3f 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <MX_GPIO_Init+0x164>)
 8000902:	f000 fc33 	bl	800116c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2105      	movs	r1, #5
 800090a:	2028      	movs	r0, #40	; 0x28
 800090c:	f000 fb72 	bl	8000ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000910:	2028      	movs	r0, #40	; 0x28
 8000912:	f000 fb8b 	bl	800102c <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020400 	.word	0x40020400
 8000928:	40021800 	.word	0x40021800
 800092c:	40020800 	.word	0x40020800

08000930 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <configureTimerForRunTimeStats+0x14>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	20000944 	.word	0x20000944

08000948 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <getRunTimeCounterValue+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000944 	.word	0x20000944

08000960 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(0xFFFFFFFF);		/* Miximum delay = (2**32-1) tick */
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f004 f82d 	bl	80049ca <osDelay>
 8000970:	e7fa      	b.n	8000968 <StartDefaultTask+0x8>
	...

08000974 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000986:	f000 fa39 	bl	8000dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000992:	d104      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x38>)
 800099c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010000 	.word	0x40010000
 80009ac:	20000944 	.word	0x20000944

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_MspInit+0x54>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <HAL_MspInit+0x54>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x54>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_MspInit+0x54>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_MspInit+0x54>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_MspInit+0x54>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	210f      	movs	r1, #15
 80009fe:	f06f 0001 	mvn.w	r0, #1
 8000a02:	f000 faf7 	bl	8000ff4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a24:	d115      	bne.n	8000a52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_TIM_Base_MspInit+0x48>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <HAL_TIM_Base_MspInit+0x48>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_TIM_Base_MspInit+0x48>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2105      	movs	r1, #5
 8000a46:	201c      	movs	r0, #28
 8000a48:	f000 fad4 	bl	8000ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a4c:	201c      	movs	r0, #28
 8000a4e:	f000 faed 	bl	800102c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_UART_MspInit+0x94>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d134      	bne.n	8000aec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000acc:	2307      	movs	r3, #7
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <HAL_UART_MspInit+0x9c>)
 8000ad8:	f000 fb48 	bl	800116c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2105      	movs	r1, #5
 8000ae0:	2027      	movs	r0, #39	; 0x27
 8000ae2:	f000 fa87 	bl	8000ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ae6:	2027      	movs	r0, #39	; 0x27
 8000ae8:	f000 faa0 	bl	800102c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40004800 	.word	0x40004800
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020c00 	.word	0x40020c00

08000b00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0a0      	sub	sp, #128	; 0x80
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	225c      	movs	r2, #92	; 0x5c
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 fce5 	bl	80064f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b2e:	d14e      	bne.n	8000bce <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b36:	2300      	movs	r3, #0
 8000b38:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 ff86 	bl	8001a50 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000b4a:	f7ff ff31 	bl	80009b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <HAL_PCD_MspInit+0xd8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <HAL_PCD_MspInit+0xd8>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <HAL_PCD_MspInit+0xd8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b6a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b7c:	230a      	movs	r3, #10
 8000b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b84:	4619      	mov	r1, r3
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <HAL_PCD_MspInit+0xdc>)
 8000b88:	f000 faf0 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b90:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480e      	ldr	r0, [pc, #56]	; (8000bdc <HAL_PCD_MspInit+0xdc>)
 8000ba2:	f000 fae3 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_PCD_MspInit+0xd8>)
 8000ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <HAL_PCD_MspInit+0xd8>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	6353      	str	r3, [r2, #52]	; 0x34
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_PCD_MspInit+0xd8>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_PCD_MspInit+0xd8>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_PCD_MspInit+0xd8>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3780      	adds	r7, #128	; 0x80
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <HAL_InitTick+0xd4>)
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <HAL_InitTick+0xd4>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6453      	str	r3, [r2, #68]	; 0x44
 8000c00:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <HAL_InitTick+0xd4>)
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0c:	f107 020c 	add.w	r2, r7, #12
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fee8 	bl	80019ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c1c:	f000 fed2 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8000c20:	4603      	mov	r3, r0
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <HAL_InitTick+0xd8>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	0c9b      	lsrs	r3, r3, #18
 8000c30:	3b01      	subs	r3, #1
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c34:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <HAL_InitTick+0xdc>)
 8000c36:	4a22      	ldr	r2, [pc, #136]	; (8000cc0 <HAL_InitTick+0xe0>)
 8000c38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <HAL_InitTick+0xdc>)
 8000c3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c42:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <HAL_InitTick+0xdc>)
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_InitTick+0xdc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_InitTick+0xdc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_InitTick+0xdc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c5a:	4818      	ldr	r0, [pc, #96]	; (8000cbc <HAL_InitTick+0xdc>)
 8000c5c:	f001 fef0 	bl	8002a40 <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d11b      	bne.n	8000ca6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c6e:	4813      	ldr	r0, [pc, #76]	; (8000cbc <HAL_InitTick+0xdc>)
 8000c70:	f001 ff36 	bl	8002ae0 <HAL_TIM_Base_Start_IT>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d111      	bne.n	8000ca6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c82:	2019      	movs	r0, #25
 8000c84:	f000 f9d2 	bl	800102c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b0f      	cmp	r3, #15
 8000c8c:	d808      	bhi.n	8000ca0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	2019      	movs	r0, #25
 8000c94:	f000 f9ae 	bl	8000ff4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_InitTick+0xe4>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e002      	b.n	8000ca6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3730      	adds	r7, #48	; 0x30
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	431bde83 	.word	0x431bde83
 8000cbc:	20000948 	.word	0x20000948
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cfa:	f001 ff61 	bl	8002bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000948 	.word	0x20000948

08000d08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <TIM2_IRQHandler+0x10>)
 8000d0e:	f001 ff57 	bl	8002bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200003a8 	.word	0x200003a8

08000d1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USART3_IRQHandler+0x10>)
 8000d22:	f002 fc07 	bl	8003534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200003f0 	.word	0x200003f0

08000d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000d34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d38:	f000 fbde 	bl	80014f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6a:	490e      	ldr	r1, [pc, #56]	; (8000da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d80:	4c0b      	ldr	r4, [pc, #44]	; (8000db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d8e:	f7ff ffd7 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f005 fb87 	bl	80064a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fbd7 	bl	8000548 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8000da8:	080067cc 	.word	0x080067cc
  ldr r2, =_sbss
 8000dac:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8000db0:	20004c5c 	.word	0x20004c5c

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f8fc 	bl	8000fde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f7ff fefa 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fde6 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000990 	.word	0x20000990

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000990 	.word	0x20000990

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4907      	ldr	r1, [pc, #28]	; (8000f20 <__NVIC_EnableIRQ+0x38>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff4c 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001006:	f7ff ff61 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 800100a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	68b9      	ldr	r1, [r7, #8]
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff ffb1 	bl	8000f78 <NVIC_EncodePriority>
 8001016:	4602      	mov	r2, r0
 8001018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff80 	bl	8000f24 <__NVIC_SetPriority>
}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff54 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001054:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001056:	f7ff fee5 	bl	8000e24 <HAL_GetTick>
 800105a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d008      	beq.n	800107a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e052      	b.n	8001120 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0216 	bic.w	r2, r2, #22
 8001088:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001098:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <HAL_DMA_Abort+0x62>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d007      	beq.n	80010ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0208 	bic.w	r2, r2, #8
 80010b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ca:	e013      	b.n	80010f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010cc:	f7ff feaa 	bl	8000e24 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d90c      	bls.n	80010f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2220      	movs	r2, #32
 80010de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e015      	b.n	8001120 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1e4      	bne.n	80010cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001106:	223f      	movs	r2, #63	; 0x3f
 8001108:	409a      	lsls	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d004      	beq.n	8001146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00c      	b.n	8001160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2205      	movs	r2, #5
 800114a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e165      	b.n	8001454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8154 	bne.w	800144e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80ae 	beq.w	800144e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b5d      	ldr	r3, [pc, #372]	; (800146c <HAL_GPIO_Init+0x300>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a5c      	ldr	r2, [pc, #368]	; (800146c <HAL_GPIO_Init+0x300>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b5a      	ldr	r3, [pc, #360]	; (800146c <HAL_GPIO_Init+0x300>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a58      	ldr	r2, [pc, #352]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x308>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x21a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <HAL_GPIO_Init+0x30c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x216>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4d      	ldr	r2, [pc, #308]	; (800147c <HAL_GPIO_Init+0x310>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x212>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_GPIO_Init+0x314>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x20e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <HAL_GPIO_Init+0x318>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x20a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <HAL_GPIO_Init+0x31c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x206>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a49      	ldr	r2, [pc, #292]	; (800148c <HAL_GPIO_Init+0x320>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x202>
 800136a:	2306      	movs	r3, #6
 800136c:	e00c      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 800136e:	2307      	movs	r3, #7
 8001370:	e00a      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001376:	2304      	movs	r3, #4
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001386:	2300      	movs	r3, #0
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001398:	4935      	ldr	r1, [pc, #212]	; (8001470 <HAL_GPIO_Init+0x304>)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ca:	4a31      	ldr	r2, [pc, #196]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f4:	4a26      	ldr	r2, [pc, #152]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <HAL_GPIO_Init+0x324>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_GPIO_Init+0x324>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001448:	4a11      	ldr	r2, [pc, #68]	; (8001490 <HAL_GPIO_Init+0x324>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	f67f ae96 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40013800 	.word	0x40013800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40021000 	.word	0x40021000
 8001488:	40021400 	.word	0x40021400
 800148c:	40021800 	.word	0x40021800
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e001      	b.n	80014b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e0:	e003      	b.n	80014ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	041a      	lsls	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fc98 	bl	8005e4c <HAL_GPIO_EXTI_Callback>
  }
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40013c00 	.word	0x40013c00

08001528 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	b08f      	sub	sp, #60	; 0x3c
 800152c:	af0a      	add	r7, sp, #40	; 0x28
 800152e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e116      	b.n	8001768 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d106      	bne.n	800155a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff fad3 	bl	8000b00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f002 ff20 	bl	80043be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	687e      	ldr	r6, [r7, #4]
 8001586:	466d      	mov	r5, sp
 8001588:	f106 0410 	add.w	r4, r6, #16
 800158c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001594:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001598:	e885 0003 	stmia.w	r5, {r0, r1}
 800159c:	1d33      	adds	r3, r6, #4
 800159e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a0:	6838      	ldr	r0, [r7, #0]
 80015a2:	f002 feab 	bl	80042fc <USB_CoreInit>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0d7      	b.n	8001768 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 ff0e 	bl	80043e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e04a      	b.n	8001660 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	333d      	adds	r3, #61	; 0x3d
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	333c      	adds	r3, #60	; 0x3c
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	b298      	uxth	r0, r3
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	3344      	adds	r3, #68	; 0x44
 8001606:	4602      	mov	r2, r0
 8001608:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	3340      	adds	r3, #64	; 0x40
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3348      	adds	r3, #72	; 0x48
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	334c      	adds	r3, #76	; 0x4c
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3354      	adds	r3, #84	; 0x54
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	3301      	adds	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3af      	bcc.n	80015ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166a:	2300      	movs	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	e044      	b.n	80016fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001670:	7bfa      	ldrb	r2, [r7, #15]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	3301      	adds	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	d3b5      	bcc.n	8001670 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	687e      	ldr	r6, [r7, #4]
 800170c:	466d      	mov	r5, sp
 800170e:	f106 0410 	add.w	r4, r6, #16
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800171e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001722:	1d33      	adds	r3, r6, #4
 8001724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f002 fea6 	bl	8004478 <USB_DevInit>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2202      	movs	r2, #2
 8001736:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e014      	b.n	8001768 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	2b01      	cmp	r3, #1
 8001754:	d102      	bne.n	800175c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f80a 	bl	8001770 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 f864 	bl	800482e <USB_DevDisconnect>

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001770 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a2:	f043 0303 	orr.w	r3, r3, #3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0cc      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d90c      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	494d      	ldr	r1, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d044      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d119      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d003      	beq.n	8001876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	2b03      	cmp	r3, #3
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e067      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 0203 	bic.w	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4934      	ldr	r1, [pc, #208]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a8:	f7ff fabc 	bl	8000e24 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b0:	f7ff fab8 	bl	8000e24 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e04f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 020c 	and.w	r2, r3, #12
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1eb      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d20c      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e032      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4916      	ldr	r1, [pc, #88]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193e:	f000 fbb1 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8001942:	4602      	mov	r2, r0
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	490a      	ldr	r1, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	5ccb      	ldrb	r3, [r1, r3]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f93e 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00
 8001974:	40023800 	.word	0x40023800
 8001978:	08006744 	.word	0x08006744
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_RCC_GetHCLKFreq+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000000 	.word	0x20000000

0800199c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019a0:	f7ff fff0 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	0a9b      	lsrs	r3, r3, #10
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	4903      	ldr	r1, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	08006754 	.word	0x08006754

080019c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019c8:	f7ff ffdc 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	0b5b      	lsrs	r3, r3, #13
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	4903      	ldr	r1, [pc, #12]	; (80019e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	08006754 	.word	0x08006754

080019ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	220f      	movs	r2, #15
 80019fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_GetClockConfig+0x5c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0203 	and.w	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_RCC_GetClockConfig+0x5c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_RCC_GetClockConfig+0x5c>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_RCC_GetClockConfig+0x5c>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	08db      	lsrs	r3, r3, #3
 8001a26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_RCC_GetClockConfig+0x60>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 020f 	and.w	r2, r3, #15
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	601a      	str	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	; 0x30
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d010      	beq.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a88:	4b6f      	ldr	r3, [pc, #444]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a8e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	496c      	ldr	r1, [pc, #432]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d010      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001ab6:	4b64      	ldr	r3, [pc, #400]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001abc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac4:	4960      	ldr	r1, [pc, #384]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d017      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ae4:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4955      	ldr	r1, [pc, #340]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b02:	d101      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001b04:	2301      	movs	r3, #1
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001b10:	2301      	movs	r3, #1
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d017      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b20:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2e:	4946      	ldr	r1, [pc, #280]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001b40:	2301      	movs	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 808a 	beq.w	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a38      	ldr	r2, [pc, #224]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b84:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b86:	f7ff f94d 	bl	8000e24 <HAL_GetTick>
 8001b8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b8e:	f7ff f949 	bl	8000e24 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e278      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bac:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d02f      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d028      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bd2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d114      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f917 	bl	8000e24 <HAL_GetTick>
 8001bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff f913 	bl	8000e24 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e240      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ee      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c28:	d114      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3e:	4902      	ldr	r1, [pc, #8]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
 8001c44:	e00c      	b.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	42470e40 	.word	0x42470e40
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c5e:	6093      	str	r3, [r2, #8]
 8001c60:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6c:	4944      	ldr	r1, [pc, #272]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d004      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001c86:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00a      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	4937      	ldr	r1, [pc, #220]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00a      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc4:	492e      	ldr	r1, [pc, #184]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d011      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cde:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	4926      	ldr	r1, [pc, #152]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00a      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	491a      	ldr	r1, [pc, #104]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d011      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d30:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d38:	4911      	ldr	r1, [pc, #68]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d48:	d101      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d5c:	f040 80ff 	bne.w	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d66:	f7ff f85d 	bl	8000e24 <HAL_GetTick>
 8001d6a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d6c:	e00e      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d6e:	f7ff f859 	bl	8000e24 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d907      	bls.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e188      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001d80:	40023800 	.word	0x40023800
 8001d84:	424711e0 	.word	0x424711e0
 8001d88:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d8c:	4b7e      	ldr	r3, [pc, #504]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ea      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d009      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d028      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d124      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001dc0:	4b71      	ldr	r3, [pc, #452]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc6:	0c1b      	lsrs	r3, r3, #16
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001dd2:	4b6d      	ldr	r3, [pc, #436]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dd8:	0e1b      	lsrs	r3, r3, #24
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	431a      	orrs	r2, r3
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	3b01      	subs	r3, #1
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	431a      	orrs	r2, r3
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	071b      	lsls	r3, r3, #28
 8001e02:	4961      	ldr	r1, [pc, #388]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d004      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e1e:	d00a      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d035      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e34:	d130      	bne.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e36:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	3301      	adds	r3, #1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e48:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e4e:	0f1b      	lsrs	r3, r3, #28
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	019b      	lsls	r3, r3, #6
 8001e60:	431a      	orrs	r2, r3
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	085b      	lsrs	r3, r3, #1
 8001e66:	3b01      	subs	r3, #1
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	431a      	orrs	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	071b      	lsls	r3, r3, #28
 8001e78:	4943      	ldr	r1, [pc, #268]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001e80:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e86:	f023 021f 	bic.w	r2, r3, #31
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	493d      	ldr	r1, [pc, #244]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d029      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eac:	d124      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001eae:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ec0:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ec6:	0f1b      	lsrs	r3, r3, #28
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	019b      	lsls	r3, r3, #6
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	061b      	lsls	r3, r3, #24
 8001eea:	431a      	orrs	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	071b      	lsls	r3, r3, #28
 8001ef0:	4925      	ldr	r1, [pc, #148]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d016      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	019b      	lsls	r3, r3, #6
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	3b01      	subs	r3, #1
 8001f18:	041b      	lsls	r3, r3, #16
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	071b      	lsls	r3, r3, #28
 8001f2a:	4917      	ldr	r1, [pc, #92]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f38:	f7fe ff74 	bl	8000e24 <HAL_GetTick>
 8001f3c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f40:	f7fe ff70 	bl	8000e24 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e09f      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	f040 8095 	bne.w	8002090 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe ff5a 	bl	8000e24 <HAL_GetTick>
 8001f70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f72:	e00f      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f74:	f7fe ff56 	bl	8000e24 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d908      	bls.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e085      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	42470068 	.word	0x42470068
 8001f90:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f94:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fa0:	d0e8      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d02b      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d127      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd0:	0c1b      	lsrs	r3, r3, #16
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	3b01      	subs	r3, #1
 8001fee:	041b      	lsls	r3, r3, #16
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	061b      	lsls	r3, r3, #24
 8001ff8:	4928      	ldr	r1, [pc, #160]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002006:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	3b01      	subs	r3, #1
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	4922      	ldr	r1, [pc, #136]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01d      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800202e:	d118      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	0e1b      	lsrs	r3, r3, #24
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	019b      	lsls	r3, r3, #6
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	3b01      	subs	r3, #1
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	431a      	orrs	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	4910      	ldr	r1, [pc, #64]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002068:	f7fe fedc 	bl	8000e24 <HAL_GetTick>
 800206c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002070:	f7fe fed8 	bl	8000e24 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e007      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800208a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800208e:	d1ef      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3730      	adds	r7, #48	; 0x30
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	42470070 	.word	0x42470070

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a8:	b0ae      	sub	sp, #184	; 0xb8
 80020aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ca:	4bcb      	ldr	r3, [pc, #812]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	f200 8206 	bhi.w	80024e4 <HAL_RCC_GetSysClockFreq+0x440>
 80020d8:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80020da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020de:	bf00      	nop
 80020e0:	08002115 	.word	0x08002115
 80020e4:	080024e5 	.word	0x080024e5
 80020e8:	080024e5 	.word	0x080024e5
 80020ec:	080024e5 	.word	0x080024e5
 80020f0:	0800211d 	.word	0x0800211d
 80020f4:	080024e5 	.word	0x080024e5
 80020f8:	080024e5 	.word	0x080024e5
 80020fc:	080024e5 	.word	0x080024e5
 8002100:	08002125 	.word	0x08002125
 8002104:	080024e5 	.word	0x080024e5
 8002108:	080024e5 	.word	0x080024e5
 800210c:	080024e5 	.word	0x080024e5
 8002110:	08002315 	.word	0x08002315
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4bb9      	ldr	r3, [pc, #740]	; (80023fc <HAL_RCC_GetSysClockFreq+0x358>)
 8002116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800211a:	e1e7      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800211c:	4bb8      	ldr	r3, [pc, #736]	; (8002400 <HAL_RCC_GetSysClockFreq+0x35c>)
 800211e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002122:	e1e3      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002124:	4bb4      	ldr	r3, [pc, #720]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800212c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002130:	4bb1      	ldr	r3, [pc, #708]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d071      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213c:	4bae      	ldr	r3, [pc, #696]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	2200      	movs	r2, #0
 8002144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002148:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800214c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002154:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800215e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002162:	4622      	mov	r2, r4
 8002164:	462b      	mov	r3, r5
 8002166:	f04f 0000 	mov.w	r0, #0
 800216a:	f04f 0100 	mov.w	r1, #0
 800216e:	0159      	lsls	r1, r3, #5
 8002170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002174:	0150      	lsls	r0, r2, #5
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4621      	mov	r1, r4
 800217c:	1a51      	subs	r1, r2, r1
 800217e:	6439      	str	r1, [r7, #64]	; 0x40
 8002180:	4629      	mov	r1, r5
 8002182:	eb63 0301 	sbc.w	r3, r3, r1
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002194:	4649      	mov	r1, r9
 8002196:	018b      	lsls	r3, r1, #6
 8002198:	4641      	mov	r1, r8
 800219a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800219e:	4641      	mov	r1, r8
 80021a0:	018a      	lsls	r2, r1, #6
 80021a2:	4641      	mov	r1, r8
 80021a4:	1a51      	subs	r1, r2, r1
 80021a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80021a8:	4649      	mov	r1, r9
 80021aa:	eb63 0301 	sbc.w	r3, r3, r1
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80021bc:	4649      	mov	r1, r9
 80021be:	00cb      	lsls	r3, r1, #3
 80021c0:	4641      	mov	r1, r8
 80021c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021c6:	4641      	mov	r1, r8
 80021c8:	00ca      	lsls	r2, r1, #3
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	4622      	mov	r2, r4
 80021d2:	189b      	adds	r3, r3, r2
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
 80021d6:	462b      	mov	r3, r5
 80021d8:	460a      	mov	r2, r1
 80021da:	eb42 0303 	adc.w	r3, r2, r3
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021ec:	4629      	mov	r1, r5
 80021ee:	024b      	lsls	r3, r1, #9
 80021f0:	4621      	mov	r1, r4
 80021f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021f6:	4621      	mov	r1, r4
 80021f8:	024a      	lsls	r2, r1, #9
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002202:	2200      	movs	r2, #0
 8002204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800220c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002210:	f7fd fffe 	bl	8000210 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4613      	mov	r3, r2
 800221a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800221e:	e067      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002220:	4b75      	ldr	r3, [pc, #468]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	2200      	movs	r2, #0
 8002228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800222c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002230:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002238:	67bb      	str	r3, [r7, #120]	; 0x78
 800223a:	2300      	movs	r3, #0
 800223c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800223e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002242:	4622      	mov	r2, r4
 8002244:	462b      	mov	r3, r5
 8002246:	f04f 0000 	mov.w	r0, #0
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	0159      	lsls	r1, r3, #5
 8002250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002254:	0150      	lsls	r0, r2, #5
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4621      	mov	r1, r4
 800225c:	1a51      	subs	r1, r2, r1
 800225e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002260:	4629      	mov	r1, r5
 8002262:	eb63 0301 	sbc.w	r3, r3, r1
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002274:	4649      	mov	r1, r9
 8002276:	018b      	lsls	r3, r1, #6
 8002278:	4641      	mov	r1, r8
 800227a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800227e:	4641      	mov	r1, r8
 8002280:	018a      	lsls	r2, r1, #6
 8002282:	4641      	mov	r1, r8
 8002284:	ebb2 0a01 	subs.w	sl, r2, r1
 8002288:	4649      	mov	r1, r9
 800228a:	eb63 0b01 	sbc.w	fp, r3, r1
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800229a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800229e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022a2:	4692      	mov	sl, r2
 80022a4:	469b      	mov	fp, r3
 80022a6:	4623      	mov	r3, r4
 80022a8:	eb1a 0303 	adds.w	r3, sl, r3
 80022ac:	623b      	str	r3, [r7, #32]
 80022ae:	462b      	mov	r3, r5
 80022b0:	eb4b 0303 	adc.w	r3, fp, r3
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80022c2:	4629      	mov	r1, r5
 80022c4:	028b      	lsls	r3, r1, #10
 80022c6:	4621      	mov	r1, r4
 80022c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022cc:	4621      	mov	r1, r4
 80022ce:	028a      	lsls	r2, r1, #10
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022d8:	2200      	movs	r2, #0
 80022da:	673b      	str	r3, [r7, #112]	; 0x70
 80022dc:	677a      	str	r2, [r7, #116]	; 0x74
 80022de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80022e2:	f7fd ff95 	bl	8000210 <__aeabi_uldivmod>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4613      	mov	r3, r2
 80022ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f0:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	3301      	adds	r3, #1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002312:	e0eb      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002314:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800231c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002320:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d06b      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232c:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	099b      	lsrs	r3, r3, #6
 8002332:	2200      	movs	r2, #0
 8002334:	66bb      	str	r3, [r7, #104]	; 0x68
 8002336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800233a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233e:	663b      	str	r3, [r7, #96]	; 0x60
 8002340:	2300      	movs	r3, #0
 8002342:	667b      	str	r3, [r7, #100]	; 0x64
 8002344:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002348:	4622      	mov	r2, r4
 800234a:	462b      	mov	r3, r5
 800234c:	f04f 0000 	mov.w	r0, #0
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	0159      	lsls	r1, r3, #5
 8002356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235a:	0150      	lsls	r0, r2, #5
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4621      	mov	r1, r4
 8002362:	1a51      	subs	r1, r2, r1
 8002364:	61b9      	str	r1, [r7, #24]
 8002366:	4629      	mov	r1, r5
 8002368:	eb63 0301 	sbc.w	r3, r3, r1
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800237a:	4659      	mov	r1, fp
 800237c:	018b      	lsls	r3, r1, #6
 800237e:	4651      	mov	r1, sl
 8002380:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002384:	4651      	mov	r1, sl
 8002386:	018a      	lsls	r2, r1, #6
 8002388:	4651      	mov	r1, sl
 800238a:	ebb2 0801 	subs.w	r8, r2, r1
 800238e:	4659      	mov	r1, fp
 8002390:	eb63 0901 	sbc.w	r9, r3, r1
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023a8:	4690      	mov	r8, r2
 80023aa:	4699      	mov	r9, r3
 80023ac:	4623      	mov	r3, r4
 80023ae:	eb18 0303 	adds.w	r3, r8, r3
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	462b      	mov	r3, r5
 80023b6:	eb49 0303 	adc.w	r3, r9, r3
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80023c8:	4629      	mov	r1, r5
 80023ca:	024b      	lsls	r3, r1, #9
 80023cc:	4621      	mov	r1, r4
 80023ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023d2:	4621      	mov	r1, r4
 80023d4:	024a      	lsls	r2, r1, #9
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023de:	2200      	movs	r2, #0
 80023e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80023e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80023e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023e8:	f7fd ff12 	bl	8000210 <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4613      	mov	r3, r2
 80023f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023f6:	e065      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x420>
 80023f8:	40023800 	.word	0x40023800
 80023fc:	00f42400 	.word	0x00f42400
 8002400:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002404:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCC_GetSysClockFreq+0x458>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	2200      	movs	r2, #0
 800240c:	4618      	mov	r0, r3
 800240e:	4611      	mov	r1, r2
 8002410:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002414:	653b      	str	r3, [r7, #80]	; 0x50
 8002416:	2300      	movs	r3, #0
 8002418:	657b      	str	r3, [r7, #84]	; 0x54
 800241a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800241e:	4642      	mov	r2, r8
 8002420:	464b      	mov	r3, r9
 8002422:	f04f 0000 	mov.w	r0, #0
 8002426:	f04f 0100 	mov.w	r1, #0
 800242a:	0159      	lsls	r1, r3, #5
 800242c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002430:	0150      	lsls	r0, r2, #5
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4641      	mov	r1, r8
 8002438:	1a51      	subs	r1, r2, r1
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	4649      	mov	r1, r9
 800243e:	eb63 0301 	sbc.w	r3, r3, r1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002450:	4659      	mov	r1, fp
 8002452:	018b      	lsls	r3, r1, #6
 8002454:	4651      	mov	r1, sl
 8002456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800245a:	4651      	mov	r1, sl
 800245c:	018a      	lsls	r2, r1, #6
 800245e:	4651      	mov	r1, sl
 8002460:	1a54      	subs	r4, r2, r1
 8002462:	4659      	mov	r1, fp
 8002464:	eb63 0501 	sbc.w	r5, r3, r1
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	00eb      	lsls	r3, r5, #3
 8002472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002476:	00e2      	lsls	r2, r4, #3
 8002478:	4614      	mov	r4, r2
 800247a:	461d      	mov	r5, r3
 800247c:	4643      	mov	r3, r8
 800247e:	18e3      	adds	r3, r4, r3
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	464b      	mov	r3, r9
 8002484:	eb45 0303 	adc.w	r3, r5, r3
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002496:	4629      	mov	r1, r5
 8002498:	028b      	lsls	r3, r1, #10
 800249a:	4621      	mov	r1, r4
 800249c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a0:	4621      	mov	r1, r4
 80024a2:	028a      	lsls	r2, r1, #10
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024ac:	2200      	movs	r2, #0
 80024ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024b6:	f7fd feab 	bl	8000210 <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4613      	mov	r3, r2
 80024c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_RCC_GetSysClockFreq+0x458>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	0f1b      	lsrs	r3, r3, #28
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80024d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024e2:	e003      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_RCC_GetSysClockFreq+0x45c>)
 80024e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	37b8      	adds	r7, #184	; 0xb8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	00f42400 	.word	0x00f42400

08002504 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e28d      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8083 	beq.w	800262a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002524:	4b94      	ldr	r3, [pc, #592]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b04      	cmp	r3, #4
 800252e:	d019      	beq.n	8002564 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002530:	4b91      	ldr	r3, [pc, #580]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002538:	2b08      	cmp	r3, #8
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800253c:	4b8e      	ldr	r3, [pc, #568]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002548:	d00c      	beq.n	8002564 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d112      	bne.n	800257c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b84      	ldr	r3, [pc, #528]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05b      	beq.n	8002628 <HAL_RCC_OscConfig+0x124>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d157      	bne.n	8002628 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e25a      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x90>
 8002586:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7b      	ldr	r2, [pc, #492]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xcc>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0xb4>
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a75      	ldr	r2, [pc, #468]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b73      	ldr	r3, [pc, #460]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a72      	ldr	r2, [pc, #456]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xcc>
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6b      	ldr	r2, [pc, #428]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fc24 	bl	8000e24 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fc20 	bl	8000e24 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e21f      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xdc>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fc10 	bl	8000e24 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe fc0c 	bl	8000e24 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e20b      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b57      	ldr	r3, [pc, #348]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x104>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d06f      	beq.n	8002716 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002636:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d017      	beq.n	8002672 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002642:	4b4d      	ldr	r3, [pc, #308]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d105      	bne.n	800265a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800264e:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d11c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d116      	bne.n	80026a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x186>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d001      	beq.n	800268a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e1d3      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4937      	ldr	r1, [pc, #220]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	e03a      	b.n	8002716 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a8:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_RCC_OscConfig+0x278>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fbb9 	bl	8000e24 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b6:	f7fe fbb5 	bl	8000e24 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1b4      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4925      	ldr	r1, [pc, #148]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCC_OscConfig+0x278>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fb98 	bl	8000e24 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f8:	f7fe fb94 	bl	8000e24 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e193      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d036      	beq.n	8002790 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7fe fb78 	bl	8000e24 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002738:	f7fe fb74 	bl	8000e24 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e173      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 800274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x234>
 8002756:	e01b      	b.n	8002790 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7fe fb61 	bl	8000e24 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	e00e      	b.n	8002784 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002766:	f7fe fb5d 	bl	8000e24 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d907      	bls.n	8002784 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e15c      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
 8002778:	40023800 	.word	0x40023800
 800277c:	42470000 	.word	0x42470000
 8002780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b8a      	ldr	r3, [pc, #552]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 8002786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ea      	bne.n	8002766 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8097 	beq.w	80028cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a2:	4b83      	ldr	r3, [pc, #524]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b7f      	ldr	r3, [pc, #508]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a7e      	ldr	r2, [pc, #504]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b7c      	ldr	r3, [pc, #496]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b79      	ldr	r3, [pc, #484]	; (80029b4 <HAL_RCC_OscConfig+0x4b0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d118      	bne.n	800280c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027da:	4b76      	ldr	r3, [pc, #472]	; (80029b4 <HAL_RCC_OscConfig+0x4b0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a75      	ldr	r2, [pc, #468]	; (80029b4 <HAL_RCC_OscConfig+0x4b0>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7fe fb1d 	bl	8000e24 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ee:	f7fe fb19 	bl	8000e24 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e118      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	4b6c      	ldr	r3, [pc, #432]	; (80029b4 <HAL_RCC_OscConfig+0x4b0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x31e>
 8002814:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a65      	ldr	r2, [pc, #404]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
 8002820:	e01c      	b.n	800285c <HAL_RCC_OscConfig+0x358>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b05      	cmp	r3, #5
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0x340>
 800282a:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a60      	ldr	r2, [pc, #384]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	4b5e      	ldr	r3, [pc, #376]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0x358>
 8002844:	4b5a      	ldr	r3, [pc, #360]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a59      	ldr	r2, [pc, #356]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6713      	str	r3, [r2, #112]	; 0x70
 8002850:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	4a56      	ldr	r2, [pc, #344]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 8002856:	f023 0304 	bic.w	r3, r3, #4
 800285a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d015      	beq.n	8002890 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fade 	bl	8000e24 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe fada 	bl	8000e24 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0d7      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ee      	beq.n	800286c <HAL_RCC_OscConfig+0x368>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7fe fac8 	bl	8000e24 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fe fac4 	bl	8000e24 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0c1      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1ee      	bne.n	8002898 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c0:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80ad 	beq.w	8002a30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028d6:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d060      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d145      	bne.n	8002976 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <HAL_RCC_OscConfig+0x4b4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fa98 	bl	8000e24 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fa94 	bl	8000e24 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e093      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69da      	ldr	r2, [r3, #28]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	019b      	lsls	r3, r3, #6
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	3b01      	subs	r3, #1
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	071b      	lsls	r3, r3, #28
 8002942:	491b      	ldr	r1, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4b4>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fa69 	bl	8000e24 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002956:	f7fe fa65 	bl	8000e24 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e064      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x452>
 8002974:	e05c      	b.n	8002a30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_RCC_OscConfig+0x4b4>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fa52 	bl	8000e24 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe fa4e 	bl	8000e24 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e04d      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_OscConfig+0x4ac>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x480>
 80029a2:	e045      	b.n	8002a30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e040      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40007000 	.word	0x40007000
 80029b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <HAL_RCC_OscConfig+0x538>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d030      	beq.n	8002a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d129      	bne.n	8002a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d122      	bne.n	8002a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029ec:	4013      	ands	r3, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d119      	bne.n	8002a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	085b      	lsrs	r3, r3, #1
 8002a04:	3b01      	subs	r3, #1
 8002a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d10f      	bne.n	8002a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800

08002a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e041      	b.n	8002ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fd ffd4 	bl	8000a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f000 fa96 	bl	8002fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d001      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e04e      	b.n	8002b96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a23      	ldr	r2, [pc, #140]	; (8002ba4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d022      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x80>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b22:	d01d      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x80>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d018      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x80>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <HAL_TIM_Base_Start_IT+0xcc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d013      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x80>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00e      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x80>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d009      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x80>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x80>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_TIM_Base_Start_IT+0xdc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d111      	bne.n	8002b84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d010      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b82:	e007      	b.n	8002b94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40000c00 	.word	0x40000c00
 8002bb4:	40010400 	.word	0x40010400
 8002bb8:	40014000 	.word	0x40014000
 8002bbc:	40001800 	.word	0x40001800

08002bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d122      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d11b      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0202 	mvn.w	r2, #2
 8002bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f9b5 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002c08:	e005      	b.n	8002c16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9a7 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f9b8 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d122      	bne.n	8002c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d11b      	bne.n	8002c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0204 	mvn.w	r2, #4
 8002c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f98b 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e005      	b.n	8002c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f97d 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f98e 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0208 	mvn.w	r2, #8
 8002c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f961 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f953 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f964 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0210 	mvn.w	r2, #16
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2208      	movs	r2, #8
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f937 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f929 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f93a 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d10e      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d107      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0201 	mvn.w	r2, #1
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fe18 	bl	8000974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5c:	2b80      	cmp	r3, #128	; 0x80
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fae0 	bl	8003330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d107      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8ff 	bl	8002f9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d10e      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d107      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0220 	mvn.w	r2, #32
 8002dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 faaa 	bl	800331c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_TIM_ConfigClockSource+0x1c>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e0b4      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x186>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e24:	d03e      	beq.n	8002ea4 <HAL_TIM_ConfigClockSource+0xd4>
 8002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2a:	f200 8087 	bhi.w	8002f3c <HAL_TIM_ConfigClockSource+0x16c>
 8002e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e32:	f000 8086 	beq.w	8002f42 <HAL_TIM_ConfigClockSource+0x172>
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d87f      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b70      	cmp	r3, #112	; 0x70
 8002e3e:	d01a      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0xa6>
 8002e40:	2b70      	cmp	r3, #112	; 0x70
 8002e42:	d87b      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b60      	cmp	r3, #96	; 0x60
 8002e46:	d050      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x11a>
 8002e48:	2b60      	cmp	r3, #96	; 0x60
 8002e4a:	d877      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x16c>
 8002e4c:	2b50      	cmp	r3, #80	; 0x50
 8002e4e:	d03c      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0xfa>
 8002e50:	2b50      	cmp	r3, #80	; 0x50
 8002e52:	d873      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x16c>
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d058      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x13a>
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d86f      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x16c>
 8002e5c:	2b30      	cmp	r3, #48	; 0x30
 8002e5e:	d064      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x15a>
 8002e60:	2b30      	cmp	r3, #48	; 0x30
 8002e62:	d86b      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x16c>
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d060      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x15a>
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d867      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x16c>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05c      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x15a>
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d05a      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x15a>
 8002e74:	e062      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6899      	ldr	r1, [r3, #8]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f000 f9ad 	bl	80031e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	609a      	str	r2, [r3, #8]
      break;
 8002ea2:	e04f      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f000 f996 	bl	80031e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ec6:	609a      	str	r2, [r3, #8]
      break;
 8002ec8:	e03c      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f000 f90a 	bl	80030f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2150      	movs	r1, #80	; 0x50
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f963 	bl	80031ae <TIM_ITRx_SetConfig>
      break;
 8002ee8:	e02c      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 f929 	bl	800314e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2160      	movs	r1, #96	; 0x60
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f953 	bl	80031ae <TIM_ITRx_SetConfig>
      break;
 8002f08:	e01c      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	461a      	mov	r2, r3
 8002f18:	f000 f8ea 	bl	80030f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2140      	movs	r1, #64	; 0x40
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f943 	bl	80031ae <TIM_ITRx_SetConfig>
      break;
 8002f28:	e00c      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f000 f93a 	bl	80031ae <TIM_ITRx_SetConfig>
      break;
 8002f3a:	e003      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f40:	e000      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a40      	ldr	r2, [pc, #256]	; (80030c4 <TIM_Base_SetConfig+0x114>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <TIM_Base_SetConfig+0x40>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fce:	d00f      	beq.n	8002ff0 <TIM_Base_SetConfig+0x40>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3d      	ldr	r2, [pc, #244]	; (80030c8 <TIM_Base_SetConfig+0x118>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00b      	beq.n	8002ff0 <TIM_Base_SetConfig+0x40>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a3c      	ldr	r2, [pc, #240]	; (80030cc <TIM_Base_SetConfig+0x11c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <TIM_Base_SetConfig+0x40>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a3b      	ldr	r2, [pc, #236]	; (80030d0 <TIM_Base_SetConfig+0x120>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d003      	beq.n	8002ff0 <TIM_Base_SetConfig+0x40>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a3a      	ldr	r2, [pc, #232]	; (80030d4 <TIM_Base_SetConfig+0x124>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a2f      	ldr	r2, [pc, #188]	; (80030c4 <TIM_Base_SetConfig+0x114>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d02b      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d027      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <TIM_Base_SetConfig+0x118>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d023      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a2b      	ldr	r2, [pc, #172]	; (80030cc <TIM_Base_SetConfig+0x11c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01f      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a2a      	ldr	r2, [pc, #168]	; (80030d0 <TIM_Base_SetConfig+0x120>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01b      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <TIM_Base_SetConfig+0x124>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d017      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <TIM_Base_SetConfig+0x128>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a27      	ldr	r2, [pc, #156]	; (80030dc <TIM_Base_SetConfig+0x12c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00f      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <TIM_Base_SetConfig+0x130>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00b      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a25      	ldr	r2, [pc, #148]	; (80030e4 <TIM_Base_SetConfig+0x134>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d007      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <TIM_Base_SetConfig+0x138>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d003      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a23      	ldr	r2, [pc, #140]	; (80030ec <TIM_Base_SetConfig+0x13c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d108      	bne.n	8003074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <TIM_Base_SetConfig+0x114>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_Base_SetConfig+0xf8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <TIM_Base_SetConfig+0x124>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d103      	bne.n	80030b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	615a      	str	r2, [r3, #20]
}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40000c00 	.word	0x40000c00
 80030d4:	40010400 	.word	0x40010400
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800
 80030e4:	40001800 	.word	0x40001800
 80030e8:	40001c00 	.word	0x40001c00
 80030ec:	40002000 	.word	0x40002000

080030f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f023 0201 	bic.w	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800311a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 030a 	bic.w	r3, r3, #10
 800312c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800314e:	b480      	push	{r7}
 8003150:	b087      	sub	sp, #28
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f023 0210 	bic.w	r2, r3, #16
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	031b      	lsls	r3, r3, #12
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800318a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	621a      	str	r2, [r3, #32]
}
 80031a2:	bf00      	nop
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f043 0307 	orr.w	r3, r3, #7
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	609a      	str	r2, [r3, #8]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	021a      	lsls	r2, r3, #8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	431a      	orrs	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	609a      	str	r2, [r3, #8]
}
 8003218:	bf00      	nop
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e05a      	b.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d01d      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10c      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010000 	.word	0x40010000
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40010400 	.word	0x40010400
 8003314:	40014000 	.word	0x40014000
 8003318:	40001800 	.word	0x40001800

0800331c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e03f      	b.n	80033d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fb78 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	; 0x24
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fd43 	bl	8003e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	4613      	mov	r3, r2
 80033ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d130      	bne.n	800345a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_UART_Transmit_IT+0x26>
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e029      	b.n	800345c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_UART_Transmit_IT+0x38>
 8003412:	2302      	movs	r3, #2
 8003414:	e022      	b.n	800345c <HAL_UART_Transmit_IT+0x7e>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2221      	movs	r2, #33	; 0x21
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003454:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	; 0x30
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	4613      	mov	r3, r2
 8003474:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b20      	cmp	r3, #32
 8003480:	d152      	bne.n	8003528 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e04b      	b.n	800352a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800349c:	2302      	movs	r3, #2
 800349e:	e044      	b.n	800352a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	461a      	mov	r2, r3
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fad5 	bl	8003a64 <UART_Start_Receive_IT>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80034c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d12c      	bne.n	8003522 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d125      	bne.n	800351c <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	617b      	str	r3, [r7, #20]
   return(result);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f043 0310 	orr.w	r3, r3, #16
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003506:	627a      	str	r2, [r7, #36]	; 0x24
 8003508:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6a39      	ldr	r1, [r7, #32]
 800350c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	61fb      	str	r3, [r7, #28]
   return(result);
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e5      	bne.n	80034e6 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800351a:	e002      	b.n	8003522 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003526:	e000      	b.n	800352a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	3730      	adds	r7, #48	; 0x30
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b0ba      	sub	sp, #232	; 0xe8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800355a:	2300      	movs	r3, #0
 800355c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800357a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_UART_IRQHandler+0x66>
 8003586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fb83 	bl	8003c9e <UART_Receive_IT>
      return;
 8003598:	e256      	b.n	8003a48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800359a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80de 	beq.w	8003760 <HAL_UART_IRQHandler+0x22c>
 80035a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80d1 	beq.w	8003760 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_UART_IRQHandler+0xae>
 80035ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f043 0201 	orr.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_UART_IRQHandler+0xd2>
 80035ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f043 0202 	orr.w	r2, r3, #2
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_UART_IRQHandler+0xf6>
 8003612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0204 	orr.w	r2, r3, #4
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d011      	beq.n	800365a <HAL_UART_IRQHandler+0x126>
 8003636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d105      	bne.n	800364e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f043 0208 	orr.w	r2, r3, #8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 81ed 	beq.w	8003a3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_UART_IRQHandler+0x14e>
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fb0e 	bl	8003c9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <HAL_UART_IRQHandler+0x17a>
 80036a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d04f      	beq.n	800374e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa16 	bl	8003ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	d141      	bne.n	8003746 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3314      	adds	r3, #20
 80036c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036d0:	e853 3f00 	ldrex	r3, [r3]
 80036d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3314      	adds	r3, #20
 80036ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1d9      	bne.n	80036c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	2b00      	cmp	r3, #0
 8003714:	d013      	beq.n	800373e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	4a7d      	ldr	r2, [pc, #500]	; (8003910 <HAL_UART_IRQHandler+0x3dc>)
 800371c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fd00 	bl	8001128 <HAL_DMA_Abort_IT>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d016      	beq.n	800375c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003738:	4610      	mov	r0, r2
 800373a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373c:	e00e      	b.n	800375c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f002 fc1c 	bl	8005f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003744:	e00a      	b.n	800375c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f002 fc18 	bl	8005f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	e006      	b.n	800375c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f002 fc14 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800375a:	e170      	b.n	8003a3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375c:	bf00      	nop
    return;
 800375e:	e16e      	b.n	8003a3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	2b01      	cmp	r3, #1
 8003766:	f040 814a 	bne.w	80039fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8143 	beq.w	80039fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 813c 	beq.w	80039fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	f040 80b4 	bne.w	8003914 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8140 	beq.w	8003a42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037ca:	429a      	cmp	r2, r3
 80037cc:	f080 8139 	bcs.w	8003a42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e2:	f000 8088 	beq.w	80038f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003812:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800381e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800382a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1d9      	bne.n	80037e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3314      	adds	r3, #20
 8003838:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3314      	adds	r3, #20
 8003852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003856:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800385a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800385e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e1      	bne.n	8003832 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800387e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3314      	adds	r3, #20
 800388e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003892:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003894:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003898:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e3      	bne.n	800386e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c6:	f023 0310 	bic.w	r3, r3, #16
 80038ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80038da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e3      	bne.n	80038b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fd fba9 	bl	8001048 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038fe:	b29b      	uxth	r3, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	b29b      	uxth	r3, r3
 8003904:	4619      	mov	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f002 fb43 	bl	8005f92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800390c:	e099      	b.n	8003a42 <HAL_UART_IRQHandler+0x50e>
 800390e:	bf00      	nop
 8003910:	08003ba7 	.word	0x08003ba7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800391c:	b29b      	uxth	r3, r3
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 808b 	beq.w	8003a46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003930:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8086 	beq.w	8003a46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	330c      	adds	r3, #12
 8003940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800395e:	647a      	str	r2, [r7, #68]	; 0x44
 8003960:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800396c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e3      	bne.n	800393a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	623b      	str	r3, [r7, #32]
   return(result);
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3314      	adds	r3, #20
 8003992:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003996:	633a      	str	r2, [r7, #48]	; 0x30
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800399c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e3      	bne.n	8003972 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0310 	bic.w	r3, r3, #16
 80039ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039dc:	61fa      	str	r2, [r7, #28]
 80039de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	69b9      	ldr	r1, [r7, #24]
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	617b      	str	r3, [r7, #20]
   return(result);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e3      	bne.n	80039b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f002 facb 	bl	8005f92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039fc:	e023      	b.n	8003a46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_UART_IRQHandler+0x4ea>
 8003a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f8d9 	bl	8003bce <UART_Transmit_IT>
    return;
 8003a1c:	e014      	b.n	8003a48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00e      	beq.n	8003a48 <HAL_UART_IRQHandler+0x514>
 8003a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f919 	bl	8003c6e <UART_EndTransmit_IT>
    return;
 8003a3c:	e004      	b.n	8003a48 <HAL_UART_IRQHandler+0x514>
    return;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <HAL_UART_IRQHandler+0x514>
      return;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_UART_IRQHandler+0x514>
      return;
 8003a46:	bf00      	nop
  }
}
 8003a48:	37e8      	adds	r7, #232	; 0xe8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop

08003a50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2222      	movs	r2, #34	; 0x22
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d007      	beq.n	8003ab2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0220 	orr.w	r2, r2, #32
 8003ad0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b095      	sub	sp, #84	; 0x54
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b08:	643a      	str	r2, [r7, #64]	; 0x40
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e5      	bne.n	8003ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e5      	bne.n	8003b1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d119      	bne.n	8003b8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f023 0310 	bic.w	r3, r3, #16
 8003b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b78:	61ba      	str	r2, [r7, #24]
 8003b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	613b      	str	r3, [r7, #16]
   return(result);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e5      	bne.n	8003b58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b9a:	bf00      	nop
 8003b9c:	3754      	adds	r7, #84	; 0x54
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f002 f9db 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b21      	cmp	r3, #33	; 0x21
 8003be0:	d13e      	bne.n	8003c60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bea:	d114      	bne.n	8003c16 <UART_Transmit_IT+0x48>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d110      	bne.n	8003c16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	621a      	str	r2, [r3, #32]
 8003c14:	e008      	b.n	8003c28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	1c59      	adds	r1, r3, #1
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6211      	str	r1, [r2, #32]
 8003c20:	781a      	ldrb	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4619      	mov	r1, r3
 8003c36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10f      	bne.n	8003c5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e000      	b.n	8003c62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f002 f98e 	bl	8005fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b08c      	sub	sp, #48	; 0x30
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b22      	cmp	r3, #34	; 0x22
 8003cb0:	f040 80ab 	bne.w	8003e0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d117      	bne.n	8003cee <UART_Receive_IT+0x50>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d113      	bne.n	8003cee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	1c9a      	adds	r2, r3, #2
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
 8003cec:	e026      	b.n	8003d3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d00:	d007      	beq.n	8003d12 <UART_Receive_IT+0x74>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <UART_Receive_IT+0x82>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e008      	b.n	8003d32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d15a      	bne.n	8003e06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0220 	bic.w	r2, r2, #32
 8003d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0201 	bic.w	r2, r2, #1
 8003d7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d135      	bne.n	8003dfc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	613b      	str	r3, [r7, #16]
   return(result);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f023 0310 	bic.w	r3, r3, #16
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db6:	623a      	str	r2, [r7, #32]
 8003db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	69f9      	ldr	r1, [r7, #28]
 8003dbc:	6a3a      	ldr	r2, [r7, #32]
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e5      	bne.n	8003d96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d10a      	bne.n	8003dee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003df2:	4619      	mov	r1, r3
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f002 f8cc 	bl	8005f92 <HAL_UARTEx_RxEventCallback>
 8003dfa:	e002      	b.n	8003e02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff fe27 	bl	8003a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e002      	b.n	8003e0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3730      	adds	r7, #48	; 0x30
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e18:	b0c0      	sub	sp, #256	; 0x100
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	68d9      	ldr	r1, [r3, #12]
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	ea40 0301 	orr.w	r3, r0, r1
 8003e3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e6c:	f021 010c 	bic.w	r1, r1, #12
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8e:	6999      	ldr	r1, [r3, #24]
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	ea40 0301 	orr.w	r3, r0, r1
 8003e9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b8f      	ldr	r3, [pc, #572]	; (80040e0 <UART_SetConfig+0x2cc>)
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d005      	beq.n	8003eb4 <UART_SetConfig+0xa0>
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b8d      	ldr	r3, [pc, #564]	; (80040e4 <UART_SetConfig+0x2d0>)
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d104      	bne.n	8003ebe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eb4:	f7fd fd86 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8003eb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ebc:	e003      	b.n	8003ec6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ebe:	f7fd fd6d 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 8003ec2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed0:	f040 810c 	bne.w	80040ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ede:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ee2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	462b      	mov	r3, r5
 8003eea:	1891      	adds	r1, r2, r2
 8003eec:	65b9      	str	r1, [r7, #88]	; 0x58
 8003eee:	415b      	adcs	r3, r3
 8003ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	eb12 0801 	adds.w	r8, r2, r1
 8003efc:	4629      	mov	r1, r5
 8003efe:	eb43 0901 	adc.w	r9, r3, r1
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f16:	4690      	mov	r8, r2
 8003f18:	4699      	mov	r9, r3
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	eb18 0303 	adds.w	r3, r8, r3
 8003f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f24:	462b      	mov	r3, r5
 8003f26:	eb49 0303 	adc.w	r3, r9, r3
 8003f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f42:	460b      	mov	r3, r1
 8003f44:	18db      	adds	r3, r3, r3
 8003f46:	653b      	str	r3, [r7, #80]	; 0x50
 8003f48:	4613      	mov	r3, r2
 8003f4a:	eb42 0303 	adc.w	r3, r2, r3
 8003f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f58:	f7fc f95a 	bl	8000210 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <UART_SetConfig+0x2d4>)
 8003f62:	fba3 2302 	umull	r2, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	011c      	lsls	r4, r3, #4
 8003f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	1891      	adds	r1, r2, r2
 8003f82:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f84:	415b      	adcs	r3, r3
 8003f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f92:	4649      	mov	r1, r9
 8003f94:	eb43 0b01 	adc.w	fp, r3, r1
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fac:	4692      	mov	sl, r2
 8003fae:	469b      	mov	fp, r3
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	eb1a 0303 	adds.w	r3, sl, r3
 8003fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fba:	464b      	mov	r3, r9
 8003fbc:	eb4b 0303 	adc.w	r3, fp, r3
 8003fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	18db      	adds	r3, r3, r3
 8003fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8003fde:	4613      	mov	r3, r2
 8003fe0:	eb42 0303 	adc.w	r3, r2, r3
 8003fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003fee:	f7fc f90f 	bl	8000210 <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <UART_SetConfig+0x2d4>)
 8003ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2264      	movs	r2, #100	; 0x64
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	1acb      	subs	r3, r1, r3
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <UART_SetConfig+0x2d4>)
 8004010:	fba3 2302 	umull	r2, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800401c:	441c      	add	r4, r3
 800401e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004028:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800402c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004030:	4642      	mov	r2, r8
 8004032:	464b      	mov	r3, r9
 8004034:	1891      	adds	r1, r2, r2
 8004036:	63b9      	str	r1, [r7, #56]	; 0x38
 8004038:	415b      	adcs	r3, r3
 800403a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800403c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004040:	4641      	mov	r1, r8
 8004042:	1851      	adds	r1, r2, r1
 8004044:	6339      	str	r1, [r7, #48]	; 0x30
 8004046:	4649      	mov	r1, r9
 8004048:	414b      	adcs	r3, r1
 800404a:	637b      	str	r3, [r7, #52]	; 0x34
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004058:	4659      	mov	r1, fp
 800405a:	00cb      	lsls	r3, r1, #3
 800405c:	4651      	mov	r1, sl
 800405e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004062:	4651      	mov	r1, sl
 8004064:	00ca      	lsls	r2, r1, #3
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	4603      	mov	r3, r0
 800406c:	4642      	mov	r2, r8
 800406e:	189b      	adds	r3, r3, r2
 8004070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004074:	464b      	mov	r3, r9
 8004076:	460a      	mov	r2, r1
 8004078:	eb42 0303 	adc.w	r3, r2, r3
 800407c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800408c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004090:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004094:	460b      	mov	r3, r1
 8004096:	18db      	adds	r3, r3, r3
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
 800409a:	4613      	mov	r3, r2
 800409c:	eb42 0303 	adc.w	r3, r2, r3
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040aa:	f7fc f8b1 	bl	8000210 <__aeabi_uldivmod>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <UART_SetConfig+0x2d4>)
 80040b4:	fba3 1302 	umull	r1, r3, r3, r2
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	2164      	movs	r1, #100	; 0x64
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	3332      	adds	r3, #50	; 0x32
 80040c6:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <UART_SetConfig+0x2d4>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	f003 0207 	and.w	r2, r3, #7
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4422      	add	r2, r4
 80040da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040dc:	e105      	b.n	80042ea <UART_SetConfig+0x4d6>
 80040de:	bf00      	nop
 80040e0:	40011000 	.word	0x40011000
 80040e4:	40011400 	.word	0x40011400
 80040e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040fe:	4642      	mov	r2, r8
 8004100:	464b      	mov	r3, r9
 8004102:	1891      	adds	r1, r2, r2
 8004104:	6239      	str	r1, [r7, #32]
 8004106:	415b      	adcs	r3, r3
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
 800410a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800410e:	4641      	mov	r1, r8
 8004110:	1854      	adds	r4, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb43 0501 	adc.w	r5, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	00eb      	lsls	r3, r5, #3
 8004122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004126:	00e2      	lsls	r2, r4, #3
 8004128:	4614      	mov	r4, r2
 800412a:	461d      	mov	r5, r3
 800412c:	4643      	mov	r3, r8
 800412e:	18e3      	adds	r3, r4, r3
 8004130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004134:	464b      	mov	r3, r9
 8004136:	eb45 0303 	adc.w	r3, r5, r3
 800413a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800414a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800415a:	4629      	mov	r1, r5
 800415c:	008b      	lsls	r3, r1, #2
 800415e:	4621      	mov	r1, r4
 8004160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004164:	4621      	mov	r1, r4
 8004166:	008a      	lsls	r2, r1, #2
 8004168:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800416c:	f7fc f850 	bl	8000210 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4b60      	ldr	r3, [pc, #384]	; (80042f8 <UART_SetConfig+0x4e4>)
 8004176:	fba3 2302 	umull	r2, r3, r3, r2
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	011c      	lsls	r4, r3, #4
 800417e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004182:	2200      	movs	r2, #0
 8004184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004188:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800418c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004190:	4642      	mov	r2, r8
 8004192:	464b      	mov	r3, r9
 8004194:	1891      	adds	r1, r2, r2
 8004196:	61b9      	str	r1, [r7, #24]
 8004198:	415b      	adcs	r3, r3
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041a0:	4641      	mov	r1, r8
 80041a2:	1851      	adds	r1, r2, r1
 80041a4:	6139      	str	r1, [r7, #16]
 80041a6:	4649      	mov	r1, r9
 80041a8:	414b      	adcs	r3, r1
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041b8:	4659      	mov	r1, fp
 80041ba:	00cb      	lsls	r3, r1, #3
 80041bc:	4651      	mov	r1, sl
 80041be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c2:	4651      	mov	r1, sl
 80041c4:	00ca      	lsls	r2, r1, #3
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	4642      	mov	r2, r8
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041d4:	464b      	mov	r3, r9
 80041d6:	460a      	mov	r2, r1
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041f8:	4649      	mov	r1, r9
 80041fa:	008b      	lsls	r3, r1, #2
 80041fc:	4641      	mov	r1, r8
 80041fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004202:	4641      	mov	r1, r8
 8004204:	008a      	lsls	r2, r1, #2
 8004206:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800420a:	f7fc f801 	bl	8000210 <__aeabi_uldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <UART_SetConfig+0x4e4>)
 8004214:	fba3 1302 	umull	r1, r3, r3, r2
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	2164      	movs	r1, #100	; 0x64
 800421c:	fb01 f303 	mul.w	r3, r1, r3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	3332      	adds	r3, #50	; 0x32
 8004226:	4a34      	ldr	r2, [pc, #208]	; (80042f8 <UART_SetConfig+0x4e4>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004232:	441c      	add	r4, r3
 8004234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004238:	2200      	movs	r2, #0
 800423a:	673b      	str	r3, [r7, #112]	; 0x70
 800423c:	677a      	str	r2, [r7, #116]	; 0x74
 800423e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004242:	4642      	mov	r2, r8
 8004244:	464b      	mov	r3, r9
 8004246:	1891      	adds	r1, r2, r2
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	415b      	adcs	r3, r3
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004252:	4641      	mov	r1, r8
 8004254:	1851      	adds	r1, r2, r1
 8004256:	6039      	str	r1, [r7, #0]
 8004258:	4649      	mov	r1, r9
 800425a:	414b      	adcs	r3, r1
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800426a:	4659      	mov	r1, fp
 800426c:	00cb      	lsls	r3, r1, #3
 800426e:	4651      	mov	r1, sl
 8004270:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004274:	4651      	mov	r1, sl
 8004276:	00ca      	lsls	r2, r1, #3
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	4603      	mov	r3, r0
 800427e:	4642      	mov	r2, r8
 8004280:	189b      	adds	r3, r3, r2
 8004282:	66bb      	str	r3, [r7, #104]	; 0x68
 8004284:	464b      	mov	r3, r9
 8004286:	460a      	mov	r2, r1
 8004288:	eb42 0303 	adc.w	r3, r2, r3
 800428c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	663b      	str	r3, [r7, #96]	; 0x60
 8004298:	667a      	str	r2, [r7, #100]	; 0x64
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042a6:	4649      	mov	r1, r9
 80042a8:	008b      	lsls	r3, r1, #2
 80042aa:	4641      	mov	r1, r8
 80042ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b0:	4641      	mov	r1, r8
 80042b2:	008a      	lsls	r2, r1, #2
 80042b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042b8:	f7fb ffaa 	bl	8000210 <__aeabi_uldivmod>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <UART_SetConfig+0x4e4>)
 80042c2:	fba3 1302 	umull	r1, r3, r3, r2
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	2164      	movs	r1, #100	; 0x64
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	3332      	adds	r3, #50	; 0x32
 80042d4:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <UART_SetConfig+0x4e4>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	f003 020f 	and.w	r2, r3, #15
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4422      	add	r2, r4
 80042e8:	609a      	str	r2, [r3, #8]
}
 80042ea:	bf00      	nop
 80042ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042f0:	46bd      	mov	sp, r7
 80042f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f6:	bf00      	nop
 80042f8:	51eb851f 	.word	0x51eb851f

080042fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042fc:	b084      	sub	sp, #16
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	f107 001c 	add.w	r0, r7, #28
 800430a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	2b01      	cmp	r3, #1
 8004312:	d122      	bne.n	800435a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800433c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d105      	bne.n	800434e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fa9c 	bl	800488c <USB_CoreReset>
 8004354:	4603      	mov	r3, r0
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	e01a      	b.n	8004390 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa90 	bl	800488c <USB_CoreReset>
 800436c:	4603      	mov	r3, r0
 800436e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
 8004382:	e005      	b.n	8004390 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10b      	bne.n	80043ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f043 0206 	orr.w	r2, r3, #6
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043ba:	b004      	add	sp, #16
 80043bc:	4770      	bx	lr

080043be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d115      	bne.n	800442e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800440e:	2001      	movs	r0, #1
 8004410:	f7fc fd14 	bl	8000e3c <HAL_Delay>
      ms++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa28 	bl	8004870 <USB_GetMode>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d01e      	beq.n	8004464 <USB_SetCurrentMode+0x84>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b31      	cmp	r3, #49	; 0x31
 800442a:	d9f0      	bls.n	800440e <USB_SetCurrentMode+0x2e>
 800442c:	e01a      	b.n	8004464 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d115      	bne.n	8004460 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004440:	2001      	movs	r0, #1
 8004442:	f7fc fcfb 	bl	8000e3c <HAL_Delay>
      ms++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fa0f 	bl	8004870 <USB_GetMode>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <USB_SetCurrentMode+0x84>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b31      	cmp	r3, #49	; 0x31
 800445c:	d9f0      	bls.n	8004440 <USB_SetCurrentMode+0x60>
 800445e:	e001      	b.n	8004464 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e005      	b.n	8004470 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b32      	cmp	r3, #50	; 0x32
 8004468:	d101      	bne.n	800446e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004478:	b084      	sub	sp, #16
 800447a:	b580      	push	{r7, lr}
 800447c:	b086      	sub	sp, #24
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e009      	b.n	80044ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3340      	adds	r3, #64	; 0x40
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	2200      	movs	r2, #0
 80044a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	3301      	adds	r3, #1
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b0e      	cmp	r3, #14
 80044b0:	d9f2      	bls.n	8004498 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d11c      	bne.n	80044f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044c6:	f043 0302 	orr.w	r3, r3, #2
 80044ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e005      	b.n	80044fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004510:	4619      	mov	r1, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004518:	461a      	mov	r2, r3
 800451a:	680b      	ldr	r3, [r1, #0]
 800451c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	2b01      	cmp	r3, #1
 8004522:	d10c      	bne.n	800453e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800452a:	2100      	movs	r1, #0
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f965 	bl	80047fc <USB_SetDevSpeed>
 8004532:	e008      	b.n	8004546 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004534:	2101      	movs	r1, #1
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f960 	bl	80047fc <USB_SetDevSpeed>
 800453c:	e003      	b.n	8004546 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800453e:	2103      	movs	r1, #3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f95b 	bl	80047fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004546:	2110      	movs	r1, #16
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f8f3 	bl	8004734 <USB_FlushTxFifo>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f91f 	bl	800479c <USB_FlushRxFifo>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	461a      	mov	r2, r3
 8004570:	2300      	movs	r3, #0
 8004572:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	461a      	mov	r2, r3
 800457c:	2300      	movs	r3, #0
 800457e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	461a      	mov	r2, r3
 8004588:	2300      	movs	r3, #0
 800458a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e043      	b.n	800461a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045a8:	d118      	bne.n	80045dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045bc:	461a      	mov	r2, r3
 80045be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	e013      	b.n	80045ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d2:	461a      	mov	r2, r3
 80045d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e008      	b.n	80045ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	461a      	mov	r2, r3
 80045ea:	2300      	movs	r3, #0
 80045ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	461a      	mov	r2, r3
 800460e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004612:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	3301      	adds	r3, #1
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	429a      	cmp	r2, r3
 8004620:	d3b7      	bcc.n	8004592 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e043      	b.n	80046b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800463a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800463e:	d118      	bne.n	8004672 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	461a      	mov	r2, r3
 8004654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e013      	b.n	8004684 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	461a      	mov	r2, r3
 800466a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	e008      	b.n	8004684 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	461a      	mov	r2, r3
 8004680:	2300      	movs	r3, #0
 8004682:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004690:	461a      	mov	r2, r3
 8004692:	2300      	movs	r3, #0
 8004694:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	3301      	adds	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d3b7      	bcc.n	8004628 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f043 0210 	orr.w	r2, r3, #16
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <USB_DevInit+0x2b8>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f043 0208 	orr.w	r2, r3, #8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800470a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d107      	bne.n	8004720 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004718:	f043 0304 	orr.w	r3, r3, #4
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800472c:	b004      	add	sp, #16
 800472e:	4770      	bx	lr
 8004730:	803c3800 	.word	0x803c3800

08004734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a13      	ldr	r2, [pc, #76]	; (8004798 <USB_FlushTxFifo+0x64>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e01b      	b.n	800478c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	daf2      	bge.n	8004742 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	019b      	lsls	r3, r3, #6
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a08      	ldr	r2, [pc, #32]	; (8004798 <USB_FlushTxFifo+0x64>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e006      	b.n	800478c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b20      	cmp	r3, #32
 8004788:	d0f0      	beq.n	800476c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	00030d40 	.word	0x00030d40

0800479c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a11      	ldr	r2, [pc, #68]	; (80047f8 <USB_FlushRxFifo+0x5c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e018      	b.n	80047ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	daf2      	bge.n	80047a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2210      	movs	r2, #16
 80047ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <USB_FlushRxFifo+0x5c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e006      	b.n	80047ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d0f0      	beq.n	80047cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	00030d40 	.word	0x00030d40

080047fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800481c:	4313      	orrs	r3, r2
 800481e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004848:	f023 0303 	bic.w	r3, r3, #3
 800484c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800485c:	f043 0302 	orr.w	r3, r3, #2
 8004860:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f003 0301 	and.w	r3, r3, #1
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <USB_CoreReset+0x64>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e01b      	b.n	80048e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	daf2      	bge.n	8004898 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f043 0201 	orr.w	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <USB_CoreReset+0x64>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d901      	bls.n	80048d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e006      	b.n	80048e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d0f0      	beq.n	80048c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	00030d40 	.word	0x00030d40

080048f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004906:	2b84      	cmp	r3, #132	; 0x84
 8004908:	d005      	beq.n	8004916 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800490a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	3303      	adds	r3, #3
 8004914:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004916:	68fb      	ldr	r3, [r7, #12]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004928:	f000 fb08 	bl	8004f3c <vTaskStartScheduler>
  
  return osOK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	bd80      	pop	{r7, pc}

08004932 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004934:	b089      	sub	sp, #36	; 0x24
 8004936:	af04      	add	r7, sp, #16
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d020      	beq.n	8004986 <osThreadCreate+0x54>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01c      	beq.n	8004986 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685c      	ldr	r4, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681d      	ldr	r5, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691e      	ldr	r6, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff ffc8 	bl	80048f4 <makeFreeRtosPriority>
 8004964:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800496e:	9202      	str	r2, [sp, #8]
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	9100      	str	r1, [sp, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4632      	mov	r2, r6
 8004978:	4629      	mov	r1, r5
 800497a:	4620      	mov	r0, r4
 800497c:	f000 f8ed 	bl	8004b5a <xTaskCreateStatic>
 8004980:	4603      	mov	r3, r0
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	e01c      	b.n	80049c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685c      	ldr	r4, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004992:	b29e      	uxth	r6, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff ffaa 	bl	80048f4 <makeFreeRtosPriority>
 80049a0:	4602      	mov	r2, r0
 80049a2:	f107 030c 	add.w	r3, r7, #12
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	9200      	str	r2, [sp, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	4632      	mov	r2, r6
 80049ae:	4629      	mov	r1, r5
 80049b0:	4620      	mov	r0, r4
 80049b2:	f000 f92f 	bl	8004c14 <xTaskCreate>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d001      	beq.n	80049c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	e000      	b.n	80049c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80049c0:	68fb      	ldr	r3, [r7, #12]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <osDelay+0x16>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	e000      	b.n	80049e2 <osDelay+0x18>
 80049e0:	2301      	movs	r3, #1
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fa76 	bl	8004ed4 <vTaskDelay>
  
  return osOK;
 80049e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f103 0208 	add.w	r2, r3, #8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f103 0208 	add.w	r2, r3, #8
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f103 0208 	add.w	r2, r3, #8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	601a      	str	r2, [r3, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	d103      	bne.n	8004ab4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e00c      	b.n	8004ace <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e002      	b.n	8004ac2 <vListInsert+0x2e>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d2f6      	bcs.n	8004abc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	601a      	str	r2, [r3, #0]
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6892      	ldr	r2, [r2, #8]
 8004b1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6852      	ldr	r2, [r2, #4]
 8004b26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d103      	bne.n	8004b3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	1e5a      	subs	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b08e      	sub	sp, #56	; 0x38
 8004b5e:	af04      	add	r7, sp, #16
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	61fb      	str	r3, [r7, #28]
}
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ba0:	23c4      	movs	r3, #196	; 0xc4
 8004ba2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2bc4      	cmp	r3, #196	; 0xc4
 8004ba8:	d00a      	beq.n	8004bc0 <xTaskCreateStatic+0x66>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	61bb      	str	r3, [r7, #24]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004bc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01e      	beq.n	8004c06 <xTaskCreateStatic+0xac>
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01b      	beq.n	8004c06 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004be0:	2300      	movs	r3, #0
 8004be2:	9303      	str	r3, [sp, #12]
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	9302      	str	r3, [sp, #8]
 8004be8:	f107 0314 	add.w	r3, r7, #20
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f851 	bl	8004ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c00:	f000 f8fa 	bl	8004df8 <prvAddNewTaskToReadyList>
 8004c04:	e001      	b.n	8004c0a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c0a:	697b      	ldr	r3, [r7, #20]
	}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3728      	adds	r7, #40	; 0x28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08c      	sub	sp, #48	; 0x30
 8004c18:	af04      	add	r7, sp, #16
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 ff25 	bl	8005a78 <pvPortMalloc>
 8004c2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00e      	beq.n	8004c54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c36:	20c4      	movs	r0, #196	; 0xc4
 8004c38:	f000 ff1e 	bl	8005a78 <pvPortMalloc>
 8004c3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
 8004c4a:	e005      	b.n	8004c58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c4c:	6978      	ldr	r0, [r7, #20]
 8004c4e:	f000 ffdf 	bl	8005c10 <vPortFree>
 8004c52:	e001      	b.n	8004c58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d017      	beq.n	8004c8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	2300      	movs	r3, #0
 8004c6a:	9303      	str	r3, [sp, #12]
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	9302      	str	r3, [sp, #8]
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f80f 	bl	8004ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c82:	69f8      	ldr	r0, [r7, #28]
 8004c84:	f000 f8b8 	bl	8004df8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	e002      	b.n	8004c94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c94:	69bb      	ldr	r3, [r7, #24]
	}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	21a5      	movs	r1, #165	; 0xa5
 8004cba:	f001 fc19 	bl	80064f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f023 0307 	bic.w	r3, r3, #7
 8004cd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	617b      	str	r3, [r7, #20]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01f      	beq.n	8004d44 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	e012      	b.n	8004d30 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	4413      	add	r3, r2
 8004d10:	7819      	ldrb	r1, [r3, #0]
 8004d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	3334      	adds	r3, #52	; 0x34
 8004d1a:	460a      	mov	r2, r1
 8004d1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	4413      	add	r3, r2
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d006      	beq.n	8004d38 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b0f      	cmp	r3, #15
 8004d34:	d9e9      	bls.n	8004d0a <prvInitialiseNewTask+0x6a>
 8004d36:	e000      	b.n	8004d3a <prvInitialiseNewTask+0x9a>
			{
				break;
 8004d38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d42:	e003      	b.n	8004d4c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	2b06      	cmp	r3, #6
 8004d50:	d901      	bls.n	8004d56 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d52:	2306      	movs	r3, #6
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d60:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	2200      	movs	r2, #0
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff fe60 	bl	8004a32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	3318      	adds	r3, #24
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fe5b 	bl	8004a32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	f1c3 0207 	rsb	r2, r3, #7
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	2200      	movs	r2, #0
 8004d96:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	335c      	adds	r3, #92	; 0x5c
 8004dac:	2260      	movs	r2, #96	; 0x60
 8004dae:	2100      	movs	r1, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 fb9d 	bl	80064f0 <memset>
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <prvInitialiseNewTask+0x14c>)
 8004dba:	661a      	str	r2, [r3, #96]	; 0x60
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	4a0c      	ldr	r2, [pc, #48]	; (8004df0 <prvInitialiseNewTask+0x150>)
 8004dc0:	665a      	str	r2, [r3, #100]	; 0x64
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	4a0b      	ldr	r2, [pc, #44]	; (8004df4 <prvInitialiseNewTask+0x154>)
 8004dc6:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	69b8      	ldr	r0, [r7, #24]
 8004dce:	f000 fc41 	bl	8005654 <pxPortInitialiseStack>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004de4:	bf00      	nop
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	0800677c 	.word	0x0800677c
 8004df0:	0800679c 	.word	0x0800679c
 8004df4:	0800675c 	.word	0x0800675c

08004df8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e00:	f000 fd58 	bl	80058b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e04:	4b2c      	ldr	r3, [pc, #176]	; (8004eb8 <prvAddNewTaskToReadyList+0xc0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	4a2b      	ldr	r2, [pc, #172]	; (8004eb8 <prvAddNewTaskToReadyList+0xc0>)
 8004e0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e0e:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <prvAddNewTaskToReadyList+0xc4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e16:	4a29      	ldr	r2, [pc, #164]	; (8004ebc <prvAddNewTaskToReadyList+0xc4>)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e1c:	4b26      	ldr	r3, [pc, #152]	; (8004eb8 <prvAddNewTaskToReadyList+0xc0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d110      	bne.n	8004e46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e24:	f000 faee 	bl	8005404 <prvInitialiseTaskLists>
 8004e28:	e00d      	b.n	8004e46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e2a:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <prvAddNewTaskToReadyList+0xc8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e32:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <prvAddNewTaskToReadyList+0xc4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d802      	bhi.n	8004e46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e40:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <prvAddNewTaskToReadyList+0xc4>)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e46:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <prvAddNewTaskToReadyList+0xcc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <prvAddNewTaskToReadyList+0xcc>)
 8004e4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e50:	4b1c      	ldr	r3, [pc, #112]	; (8004ec4 <prvAddNewTaskToReadyList+0xcc>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <prvAddNewTaskToReadyList+0xd0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <prvAddNewTaskToReadyList+0xd0>)
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <prvAddNewTaskToReadyList+0xd4>)
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f7ff fde3 	bl	8004a4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e86:	f000 fd45 	bl	8005914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <prvAddNewTaskToReadyList+0xc8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00e      	beq.n	8004eb0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <prvAddNewTaskToReadyList+0xc4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d207      	bcs.n	8004eb0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <prvAddNewTaskToReadyList+0xd8>)
 8004ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000a94 	.word	0x20000a94
 8004ebc:	20000994 	.word	0x20000994
 8004ec0:	20000aa0 	.word	0x20000aa0
 8004ec4:	20000ab0 	.word	0x20000ab0
 8004ec8:	20000a9c 	.word	0x20000a9c
 8004ecc:	20000998 	.word	0x20000998
 8004ed0:	e000ed04 	.word	0xe000ed04

08004ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d017      	beq.n	8004f16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <vTaskDelay+0x60>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <vTaskDelay+0x30>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	60bb      	str	r3, [r7, #8]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f04:	f000 f886 	bl	8005014 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f08:	2100      	movs	r1, #0
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fb3c 	bl	8005588 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f10:	f000 f88e 	bl	8005030 <xTaskResumeAll>
 8004f14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d107      	bne.n	8004f2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <vTaskDelay+0x64>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f2c:	bf00      	nop
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20000abc 	.word	0x20000abc
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f4a:	463a      	mov	r2, r7
 8004f4c:	1d39      	adds	r1, r7, #4
 8004f4e:	f107 0308 	add.w	r3, r7, #8
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb fade 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	9202      	str	r2, [sp, #8]
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	2300      	movs	r3, #0
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2300      	movs	r3, #0
 8004f68:	460a      	mov	r2, r1
 8004f6a:	4922      	ldr	r1, [pc, #136]	; (8004ff4 <vTaskStartScheduler+0xb8>)
 8004f6c:	4822      	ldr	r0, [pc, #136]	; (8004ff8 <vTaskStartScheduler+0xbc>)
 8004f6e:	f7ff fdf4 	bl	8004b5a <xTaskCreateStatic>
 8004f72:	4603      	mov	r3, r0
 8004f74:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <vTaskStartScheduler+0xc0>)
 8004f76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f78:	4b20      	ldr	r3, [pc, #128]	; (8004ffc <vTaskStartScheduler+0xc0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	e001      	b.n	8004f8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d11d      	bne.n	8004fcc <vTaskStartScheduler+0x90>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	613b      	str	r3, [r7, #16]
}
 8004fa2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <vTaskStartScheduler+0xc4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	335c      	adds	r3, #92	; 0x5c
 8004faa:	4a16      	ldr	r2, [pc, #88]	; (8005004 <vTaskStartScheduler+0xc8>)
 8004fac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fae:	4b16      	ldr	r3, [pc, #88]	; (8005008 <vTaskStartScheduler+0xcc>)
 8004fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fb6:	4b15      	ldr	r3, [pc, #84]	; (800500c <vTaskStartScheduler+0xd0>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <vTaskStartScheduler+0xd4>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004fc2:	f7fb fcb5 	bl	8000930 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fc6:	f000 fbd3 	bl	8005770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fca:	e00e      	b.n	8004fea <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d10a      	bne.n	8004fea <vTaskStartScheduler+0xae>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	60fb      	str	r3, [r7, #12]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <vTaskStartScheduler+0xac>
}
 8004fea:	bf00      	nop
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	080066f4 	.word	0x080066f4
 8004ff8:	080053d5 	.word	0x080053d5
 8004ffc:	20000ab8 	.word	0x20000ab8
 8005000:	20000994 	.word	0x20000994
 8005004:	20000064 	.word	0x20000064
 8005008:	20000ab4 	.word	0x20000ab4
 800500c:	20000aa0 	.word	0x20000aa0
 8005010:	20000a98 	.word	0x20000a98

08005014 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005018:	4b04      	ldr	r3, [pc, #16]	; (800502c <vTaskSuspendAll+0x18>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	4a03      	ldr	r2, [pc, #12]	; (800502c <vTaskSuspendAll+0x18>)
 8005020:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005022:	bf00      	nop
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	20000abc 	.word	0x20000abc

08005030 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800503a:	2300      	movs	r3, #0
 800503c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800503e:	4b41      	ldr	r3, [pc, #260]	; (8005144 <xTaskResumeAll+0x114>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <xTaskResumeAll+0x2c>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	603b      	str	r3, [r7, #0]
}
 8005058:	bf00      	nop
 800505a:	e7fe      	b.n	800505a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800505c:	f000 fc2a 	bl	80058b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005060:	4b38      	ldr	r3, [pc, #224]	; (8005144 <xTaskResumeAll+0x114>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3b01      	subs	r3, #1
 8005066:	4a37      	ldr	r2, [pc, #220]	; (8005144 <xTaskResumeAll+0x114>)
 8005068:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800506a:	4b36      	ldr	r3, [pc, #216]	; (8005144 <xTaskResumeAll+0x114>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d161      	bne.n	8005136 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005072:	4b35      	ldr	r3, [pc, #212]	; (8005148 <xTaskResumeAll+0x118>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d05d      	beq.n	8005136 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800507a:	e02e      	b.n	80050da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800507c:	4b33      	ldr	r3, [pc, #204]	; (800514c <xTaskResumeAll+0x11c>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3318      	adds	r3, #24
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fd3c 	bl	8004b06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3304      	adds	r3, #4
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fd37 	bl	8004b06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	2201      	movs	r2, #1
 800509e:	409a      	lsls	r2, r3
 80050a0:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <xTaskResumeAll+0x120>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <xTaskResumeAll+0x120>)
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4a27      	ldr	r2, [pc, #156]	; (8005154 <xTaskResumeAll+0x124>)
 80050b8:	441a      	add	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3304      	adds	r3, #4
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f7ff fcc3 	bl	8004a4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ca:	4b23      	ldr	r3, [pc, #140]	; (8005158 <xTaskResumeAll+0x128>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d302      	bcc.n	80050da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80050d4:	4b21      	ldr	r3, [pc, #132]	; (800515c <xTaskResumeAll+0x12c>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050da:	4b1c      	ldr	r3, [pc, #112]	; (800514c <xTaskResumeAll+0x11c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1cc      	bne.n	800507c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050e8:	f000 fa2e 	bl	8005548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050ec:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <xTaskResumeAll+0x130>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d010      	beq.n	800511a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050f8:	f000 f836 	bl	8005168 <xTaskIncrementTick>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005102:	4b16      	ldr	r3, [pc, #88]	; (800515c <xTaskResumeAll+0x12c>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3b01      	subs	r3, #1
 800510c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f1      	bne.n	80050f8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <xTaskResumeAll+0x130>)
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <xTaskResumeAll+0x12c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005122:	2301      	movs	r3, #1
 8005124:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <xTaskResumeAll+0x134>)
 8005128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005136:	f000 fbed 	bl	8005914 <vPortExitCritical>

	return xAlreadyYielded;
 800513a:	68bb      	ldr	r3, [r7, #8]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20000abc 	.word	0x20000abc
 8005148:	20000a94 	.word	0x20000a94
 800514c:	20000a54 	.word	0x20000a54
 8005150:	20000a9c 	.word	0x20000a9c
 8005154:	20000998 	.word	0x20000998
 8005158:	20000994 	.word	0x20000994
 800515c:	20000aa8 	.word	0x20000aa8
 8005160:	20000aa4 	.word	0x20000aa4
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005172:	4b4e      	ldr	r3, [pc, #312]	; (80052ac <xTaskIncrementTick+0x144>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 808e 	bne.w	8005298 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800517c:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <xTaskIncrementTick+0x148>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005184:	4a4a      	ldr	r2, [pc, #296]	; (80052b0 <xTaskIncrementTick+0x148>)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d120      	bne.n	80051d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005190:	4b48      	ldr	r3, [pc, #288]	; (80052b4 <xTaskIncrementTick+0x14c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	603b      	str	r3, [r7, #0]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <xTaskIncrementTick+0x46>
 80051b0:	4b40      	ldr	r3, [pc, #256]	; (80052b4 <xTaskIncrementTick+0x14c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4b40      	ldr	r3, [pc, #256]	; (80052b8 <xTaskIncrementTick+0x150>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a3e      	ldr	r2, [pc, #248]	; (80052b4 <xTaskIncrementTick+0x14c>)
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4a3e      	ldr	r2, [pc, #248]	; (80052b8 <xTaskIncrementTick+0x150>)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	4b3d      	ldr	r3, [pc, #244]	; (80052bc <xTaskIncrementTick+0x154>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3301      	adds	r3, #1
 80051ca:	4a3c      	ldr	r2, [pc, #240]	; (80052bc <xTaskIncrementTick+0x154>)
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	f000 f9bb 	bl	8005548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051d2:	4b3b      	ldr	r3, [pc, #236]	; (80052c0 <xTaskIncrementTick+0x158>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d348      	bcc.n	800526e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051dc:	4b35      	ldr	r3, [pc, #212]	; (80052b4 <xTaskIncrementTick+0x14c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e6:	4b36      	ldr	r3, [pc, #216]	; (80052c0 <xTaskIncrementTick+0x158>)
 80051e8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ec:	601a      	str	r2, [r3, #0]
					break;
 80051ee:	e03e      	b.n	800526e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f0:	4b30      	ldr	r3, [pc, #192]	; (80052b4 <xTaskIncrementTick+0x14c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	d203      	bcs.n	8005210 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005208:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <xTaskIncrementTick+0x158>)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800520e:	e02e      	b.n	800526e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	3304      	adds	r3, #4
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fc76 	bl	8004b06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	3318      	adds	r3, #24
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff fc6d 	bl	8004b06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	2201      	movs	r2, #1
 8005232:	409a      	lsls	r2, r3
 8005234:	4b23      	ldr	r3, [pc, #140]	; (80052c4 <xTaskIncrementTick+0x15c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4313      	orrs	r3, r2
 800523a:	4a22      	ldr	r2, [pc, #136]	; (80052c4 <xTaskIncrementTick+0x15c>)
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <xTaskIncrementTick+0x160>)
 800524c:	441a      	add	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	3304      	adds	r3, #4
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f7ff fbf9 	bl	8004a4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <xTaskIncrementTick+0x164>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	429a      	cmp	r2, r3
 8005266:	d3b9      	bcc.n	80051dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005268:	2301      	movs	r3, #1
 800526a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800526c:	e7b6      	b.n	80051dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800526e:	4b17      	ldr	r3, [pc, #92]	; (80052cc <xTaskIncrementTick+0x164>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	4914      	ldr	r1, [pc, #80]	; (80052c8 <xTaskIncrementTick+0x160>)
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d901      	bls.n	800528a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005286:	2301      	movs	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800528a:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <xTaskIncrementTick+0x168>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005292:	2301      	movs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e004      	b.n	80052a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <xTaskIncrementTick+0x16c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	4a0d      	ldr	r2, [pc, #52]	; (80052d4 <xTaskIncrementTick+0x16c>)
 80052a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052a2:	697b      	ldr	r3, [r7, #20]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000abc 	.word	0x20000abc
 80052b0:	20000a98 	.word	0x20000a98
 80052b4:	20000a4c 	.word	0x20000a4c
 80052b8:	20000a50 	.word	0x20000a50
 80052bc:	20000aac 	.word	0x20000aac
 80052c0:	20000ab4 	.word	0x20000ab4
 80052c4:	20000a9c 	.word	0x20000a9c
 80052c8:	20000998 	.word	0x20000998
 80052cc:	20000994 	.word	0x20000994
 80052d0:	20000aa8 	.word	0x20000aa8
 80052d4:	20000aa4 	.word	0x20000aa4

080052d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052de:	4b35      	ldr	r3, [pc, #212]	; (80053b4 <vTaskSwitchContext+0xdc>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052e6:	4b34      	ldr	r3, [pc, #208]	; (80053b8 <vTaskSwitchContext+0xe0>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052ec:	e05d      	b.n	80053aa <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 80052ee:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <vTaskSwitchContext+0xe0>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80052f4:	f7fb fb28 	bl	8000948 <getRunTimeCounterValue>
 80052f8:	4603      	mov	r3, r0
 80052fa:	4a30      	ldr	r2, [pc, #192]	; (80053bc <vTaskSwitchContext+0xe4>)
 80052fc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80052fe:	4b2f      	ldr	r3, [pc, #188]	; (80053bc <vTaskSwitchContext+0xe4>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b2f      	ldr	r3, [pc, #188]	; (80053c0 <vTaskSwitchContext+0xe8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d909      	bls.n	800531e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800530a:	4b2e      	ldr	r3, [pc, #184]	; (80053c4 <vTaskSwitchContext+0xec>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005310:	4a2a      	ldr	r2, [pc, #168]	; (80053bc <vTaskSwitchContext+0xe4>)
 8005312:	6810      	ldr	r0, [r2, #0]
 8005314:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <vTaskSwitchContext+0xe8>)
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	1a82      	subs	r2, r0, r2
 800531a:	440a      	add	r2, r1
 800531c:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800531e:	4b27      	ldr	r3, [pc, #156]	; (80053bc <vTaskSwitchContext+0xe4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <vTaskSwitchContext+0xe8>)
 8005324:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005326:	4b28      	ldr	r3, [pc, #160]	; (80053c8 <vTaskSwitchContext+0xf0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	fab3 f383 	clz	r3, r3
 8005332:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005334:	7afb      	ldrb	r3, [r7, #11]
 8005336:	f1c3 031f 	rsb	r3, r3, #31
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	4923      	ldr	r1, [pc, #140]	; (80053cc <vTaskSwitchContext+0xf4>)
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <vTaskSwitchContext+0x8e>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	607b      	str	r3, [r7, #4]
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <vTaskSwitchContext+0x8c>
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4a16      	ldr	r2, [pc, #88]	; (80053cc <vTaskSwitchContext+0xf4>)
 8005372:	4413      	add	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	605a      	str	r2, [r3, #4]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	3308      	adds	r3, #8
 8005388:	429a      	cmp	r2, r3
 800538a:	d104      	bne.n	8005396 <vTaskSwitchContext+0xbe>
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <vTaskSwitchContext+0xec>)
 800539e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053a0:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <vTaskSwitchContext+0xec>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	335c      	adds	r3, #92	; 0x5c
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <vTaskSwitchContext+0xf8>)
 80053a8:	6013      	str	r3, [r2, #0]
}
 80053aa:	bf00      	nop
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000abc 	.word	0x20000abc
 80053b8:	20000aa8 	.word	0x20000aa8
 80053bc:	20000ac4 	.word	0x20000ac4
 80053c0:	20000ac0 	.word	0x20000ac0
 80053c4:	20000994 	.word	0x20000994
 80053c8:	20000a9c 	.word	0x20000a9c
 80053cc:	20000998 	.word	0x20000998
 80053d0:	20000064 	.word	0x20000064

080053d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053dc:	f000 f852 	bl	8005484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <prvIdleTask+0x28>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d9f9      	bls.n	80053dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <prvIdleTask+0x2c>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053f8:	e7f0      	b.n	80053dc <prvIdleTask+0x8>
 80053fa:	bf00      	nop
 80053fc:	20000998 	.word	0x20000998
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	e00c      	b.n	800542a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <prvInitialiseTaskLists+0x60>)
 800541c:	4413      	add	r3, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fae7 	bl	80049f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3301      	adds	r3, #1
 8005428:	607b      	str	r3, [r7, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b06      	cmp	r3, #6
 800542e:	d9ef      	bls.n	8005410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005430:	480d      	ldr	r0, [pc, #52]	; (8005468 <prvInitialiseTaskLists+0x64>)
 8005432:	f7ff fade 	bl	80049f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005436:	480d      	ldr	r0, [pc, #52]	; (800546c <prvInitialiseTaskLists+0x68>)
 8005438:	f7ff fadb 	bl	80049f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800543c:	480c      	ldr	r0, [pc, #48]	; (8005470 <prvInitialiseTaskLists+0x6c>)
 800543e:	f7ff fad8 	bl	80049f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005442:	480c      	ldr	r0, [pc, #48]	; (8005474 <prvInitialiseTaskLists+0x70>)
 8005444:	f7ff fad5 	bl	80049f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005448:	480b      	ldr	r0, [pc, #44]	; (8005478 <prvInitialiseTaskLists+0x74>)
 800544a:	f7ff fad2 	bl	80049f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800544e:	4b0b      	ldr	r3, [pc, #44]	; (800547c <prvInitialiseTaskLists+0x78>)
 8005450:	4a05      	ldr	r2, [pc, #20]	; (8005468 <prvInitialiseTaskLists+0x64>)
 8005452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <prvInitialiseTaskLists+0x7c>)
 8005456:	4a05      	ldr	r2, [pc, #20]	; (800546c <prvInitialiseTaskLists+0x68>)
 8005458:	601a      	str	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000998 	.word	0x20000998
 8005468:	20000a24 	.word	0x20000a24
 800546c:	20000a38 	.word	0x20000a38
 8005470:	20000a54 	.word	0x20000a54
 8005474:	20000a68 	.word	0x20000a68
 8005478:	20000a80 	.word	0x20000a80
 800547c:	20000a4c 	.word	0x20000a4c
 8005480:	20000a50 	.word	0x20000a50

08005484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800548a:	e019      	b.n	80054c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800548c:	f000 fa12 	bl	80058b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005490:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <prvCheckTasksWaitingTermination+0x50>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3304      	adds	r3, #4
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fb32 	bl	8004b06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <prvCheckTasksWaitingTermination+0x54>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	4a0b      	ldr	r2, [pc, #44]	; (80054d8 <prvCheckTasksWaitingTermination+0x54>)
 80054aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054b6:	f000 fa2d 	bl	8005914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f810 	bl	80054e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e1      	bne.n	800548c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000a68 	.word	0x20000a68
 80054d8:	20000a94 	.word	0x20000a94
 80054dc:	20000a7c 	.word	0x20000a7c

080054e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	335c      	adds	r3, #92	; 0x5c
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 f861 	bl	80065b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb85 	bl	8005c10 <vPortFree>
				vPortFree( pxTCB );
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fb82 	bl	8005c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800550c:	e018      	b.n	8005540 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d103      	bne.n	8005520 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fb79 	bl	8005c10 <vPortFree>
	}
 800551e:	e00f      	b.n	8005540 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005526:	2b02      	cmp	r3, #2
 8005528:	d00a      	beq.n	8005540 <prvDeleteTCB+0x60>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	60fb      	str	r3, [r7, #12]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <prvDeleteTCB+0x5e>
	}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <prvResetNextTaskUnblockTime+0x38>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <prvResetNextTaskUnblockTime+0x3c>)
 800555a:	f04f 32ff 	mov.w	r2, #4294967295
 800555e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005560:	e008      	b.n	8005574 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005562:	4b07      	ldr	r3, [pc, #28]	; (8005580 <prvResetNextTaskUnblockTime+0x38>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4a04      	ldr	r2, [pc, #16]	; (8005584 <prvResetNextTaskUnblockTime+0x3c>)
 8005572:	6013      	str	r3, [r2, #0]
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	20000a4c 	.word	0x20000a4c
 8005584:	20000ab4 	.word	0x20000ab4

08005588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005592:	4b29      	ldr	r3, [pc, #164]	; (8005638 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005598:	4b28      	ldr	r3, [pc, #160]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fab1 	bl	8004b06 <uxListRemove>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	2201      	movs	r2, #1
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43da      	mvns	r2, r3
 80055b8:	4b21      	ldr	r3, [pc, #132]	; (8005640 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4013      	ands	r3, r2
 80055be:	4a20      	ldr	r2, [pc, #128]	; (8005640 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d10a      	bne.n	80055e0 <prvAddCurrentTaskToDelayedList+0x58>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3304      	adds	r3, #4
 80055d6:	4619      	mov	r1, r3
 80055d8:	481a      	ldr	r0, [pc, #104]	; (8005644 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055da:	f7ff fa37 	bl	8004a4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055de:	e026      	b.n	800562e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055e8:	4b14      	ldr	r3, [pc, #80]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d209      	bcs.n	800560c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f8:	4b13      	ldr	r3, [pc, #76]	; (8005648 <prvAddCurrentTaskToDelayedList+0xc0>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3304      	adds	r3, #4
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7ff fa45 	bl	8004a94 <vListInsert>
}
 800560a:	e010      	b.n	800562e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800560c:	4b0f      	ldr	r3, [pc, #60]	; (800564c <prvAddCurrentTaskToDelayedList+0xc4>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3304      	adds	r3, #4
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f7ff fa3b 	bl	8004a94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800561e:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	429a      	cmp	r2, r3
 8005626:	d202      	bcs.n	800562e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005628:	4a09      	ldr	r2, [pc, #36]	; (8005650 <prvAddCurrentTaskToDelayedList+0xc8>)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6013      	str	r3, [r2, #0]
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000a98 	.word	0x20000a98
 800563c:	20000994 	.word	0x20000994
 8005640:	20000a9c 	.word	0x20000a9c
 8005644:	20000a80 	.word	0x20000a80
 8005648:	20000a50 	.word	0x20000a50
 800564c:	20000a4c 	.word	0x20000a4c
 8005650:	20000ab4 	.word	0x20000ab4

08005654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3b04      	subs	r3, #4
 8005664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800566c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3b04      	subs	r3, #4
 8005672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3b04      	subs	r3, #4
 8005682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005684:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <pxPortInitialiseStack+0x64>)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3b14      	subs	r3, #20
 800568e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3b04      	subs	r3, #4
 800569a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f06f 0202 	mvn.w	r2, #2
 80056a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3b20      	subs	r3, #32
 80056a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056aa:	68fb      	ldr	r3, [r7, #12]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	080056bd 	.word	0x080056bd

080056bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <prvTaskExitError+0x54>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d00a      	beq.n	80056e6 <prvTaskExitError+0x2a>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	60fb      	str	r3, [r7, #12]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <prvTaskExitError+0x28>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60bb      	str	r3, [r7, #8]
}
 80056f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056fa:	bf00      	nop
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0fc      	beq.n	80056fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	2000000c 	.word	0x2000000c
	...

08005720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <pxCurrentTCBConst2>)
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	6808      	ldr	r0, [r1, #0]
 8005726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	f380 8809 	msr	PSP, r0
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8811 	msr	BASEPRI, r0
 800573a:	4770      	bx	lr
 800573c:	f3af 8000 	nop.w

08005740 <pxCurrentTCBConst2>:
 8005740:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop

08005748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005748:	4808      	ldr	r0, [pc, #32]	; (800576c <prvPortStartFirstTask+0x24>)
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f380 8808 	msr	MSP, r0
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8814 	msr	CONTROL, r0
 800575a:	b662      	cpsie	i
 800575c:	b661      	cpsie	f
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	df00      	svc	0
 8005768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800576a:	bf00      	nop
 800576c:	e000ed08 	.word	0xe000ed08

08005770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005776:	4b46      	ldr	r3, [pc, #280]	; (8005890 <xPortStartScheduler+0x120>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a46      	ldr	r2, [pc, #280]	; (8005894 <xPortStartScheduler+0x124>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10a      	bne.n	8005796 <xPortStartScheduler+0x26>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005796:	4b3e      	ldr	r3, [pc, #248]	; (8005890 <xPortStartScheduler+0x120>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a3f      	ldr	r2, [pc, #252]	; (8005898 <xPortStartScheduler+0x128>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d10a      	bne.n	80057b6 <xPortStartScheduler+0x46>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	60fb      	str	r3, [r7, #12]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057b6:	4b39      	ldr	r3, [pc, #228]	; (800589c <xPortStartScheduler+0x12c>)
 80057b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	22ff      	movs	r2, #255	; 0xff
 80057c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <xPortStartScheduler+0x130>)
 80057dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057de:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <xPortStartScheduler+0x134>)
 80057e0:	2207      	movs	r2, #7
 80057e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057e4:	e009      	b.n	80057fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80057e6:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <xPortStartScheduler+0x134>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <xPortStartScheduler+0x134>)
 80057ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d0ef      	beq.n	80057e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005806:	4b27      	ldr	r3, [pc, #156]	; (80058a4 <xPortStartScheduler+0x134>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1c3 0307 	rsb	r3, r3, #7
 800580e:	2b04      	cmp	r3, #4
 8005810:	d00a      	beq.n	8005828 <xPortStartScheduler+0xb8>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	60bb      	str	r3, [r7, #8]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005828:	4b1e      	ldr	r3, [pc, #120]	; (80058a4 <xPortStartScheduler+0x134>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <xPortStartScheduler+0x134>)
 8005830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005832:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <xPortStartScheduler+0x134>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800583a:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <xPortStartScheduler+0x134>)
 800583c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005846:	4b18      	ldr	r3, [pc, #96]	; (80058a8 <xPortStartScheduler+0x138>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <xPortStartScheduler+0x138>)
 800584c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <xPortStartScheduler+0x138>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a14      	ldr	r2, [pc, #80]	; (80058a8 <xPortStartScheduler+0x138>)
 8005858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800585c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800585e:	f000 f8dd 	bl	8005a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <xPortStartScheduler+0x13c>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005868:	f000 f8fc 	bl	8005a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800586c:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <xPortStartScheduler+0x140>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <xPortStartScheduler+0x140>)
 8005872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005878:	f7ff ff66 	bl	8005748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800587c:	f7ff fd2c 	bl	80052d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005880:	f7ff ff1c 	bl	80056bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	e000ed00 	.word	0xe000ed00
 8005894:	410fc271 	.word	0x410fc271
 8005898:	410fc270 	.word	0x410fc270
 800589c:	e000e400 	.word	0xe000e400
 80058a0:	20000ac8 	.word	0x20000ac8
 80058a4:	20000acc 	.word	0x20000acc
 80058a8:	e000ed20 	.word	0xe000ed20
 80058ac:	2000000c 	.word	0x2000000c
 80058b0:	e000ef34 	.word	0xe000ef34

080058b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	607b      	str	r3, [r7, #4]
}
 80058cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <vPortEnterCritical+0x58>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3301      	adds	r3, #1
 80058d4:	4a0d      	ldr	r2, [pc, #52]	; (800590c <vPortEnterCritical+0x58>)
 80058d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <vPortEnterCritical+0x58>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d10f      	bne.n	8005900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <vPortEnterCritical+0x5c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <vPortEnterCritical+0x4c>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	603b      	str	r3, [r7, #0]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <vPortEnterCritical+0x4a>
	}
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	2000000c 	.word	0x2000000c
 8005910:	e000ed04 	.word	0xe000ed04

08005914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <vPortExitCritical+0x50>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <vPortExitCritical+0x24>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	607b      	str	r3, [r7, #4]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <vPortExitCritical+0x50>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3b01      	subs	r3, #1
 800593e:	4a09      	ldr	r2, [pc, #36]	; (8005964 <vPortExitCritical+0x50>)
 8005940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005942:	4b08      	ldr	r3, [pc, #32]	; (8005964 <vPortExitCritical+0x50>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d105      	bne.n	8005956 <vPortExitCritical+0x42>
 800594a:	2300      	movs	r3, #0
 800594c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	2000000c 	.word	0x2000000c
	...

08005970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005970:	f3ef 8009 	mrs	r0, PSP
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <pxCurrentTCBConst>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f01e 0f10 	tst.w	lr, #16
 8005980:	bf08      	it	eq
 8005982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598a:	6010      	str	r0, [r2, #0]
 800598c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005994:	f380 8811 	msr	BASEPRI, r0
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f7ff fc9a 	bl	80052d8 <vTaskSwitchContext>
 80059a4:	f04f 0000 	mov.w	r0, #0
 80059a8:	f380 8811 	msr	BASEPRI, r0
 80059ac:	bc09      	pop	{r0, r3}
 80059ae:	6819      	ldr	r1, [r3, #0]
 80059b0:	6808      	ldr	r0, [r1, #0]
 80059b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b6:	f01e 0f10 	tst.w	lr, #16
 80059ba:	bf08      	it	eq
 80059bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059c0:	f380 8809 	msr	PSP, r0
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	f3af 8000 	nop.w

080059d0 <pxCurrentTCBConst>:
 80059d0:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop

080059d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059f2:	f7ff fbb9 	bl	8005168 <xTaskIncrementTick>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <SysTick_Handler+0x40>)
 80059fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f383 8811 	msr	BASEPRI, r3
}
 8005a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <vPortSetupTimerInterrupt+0x34>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a26:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <vPortSetupTimerInterrupt+0x38>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <vPortSetupTimerInterrupt+0x3c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <vPortSetupTimerInterrupt+0x40>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <vPortSetupTimerInterrupt+0x44>)
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a3e:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <vPortSetupTimerInterrupt+0x34>)
 8005a40:	2207      	movs	r2, #7
 8005a42:	601a      	str	r2, [r3, #0]
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	e000e010 	.word	0xe000e010
 8005a54:	e000e018 	.word	0xe000e018
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	10624dd3 	.word	0x10624dd3
 8005a60:	e000e014 	.word	0xe000e014

08005a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a74 <vPortEnableVFP+0x10>
 8005a68:	6801      	ldr	r1, [r0, #0]
 8005a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a6e:	6001      	str	r1, [r0, #0]
 8005a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a72:	bf00      	nop
 8005a74:	e000ed88 	.word	0xe000ed88

08005a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a84:	f7ff fac6 	bl	8005014 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a88:	4b5b      	ldr	r3, [pc, #364]	; (8005bf8 <pvPortMalloc+0x180>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a90:	f000 f920 	bl	8005cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a94:	4b59      	ldr	r3, [pc, #356]	; (8005bfc <pvPortMalloc+0x184>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f040 8093 	bne.w	8005bc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01d      	beq.n	8005ae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4413      	add	r3, r2
 8005aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d014      	beq.n	8005ae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f023 0307 	bic.w	r3, r3, #7
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <pvPortMalloc+0x6c>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	617b      	str	r3, [r7, #20]
}
 8005ae0:	bf00      	nop
 8005ae2:	e7fe      	b.n	8005ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d06e      	beq.n	8005bc8 <pvPortMalloc+0x150>
 8005aea:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <pvPortMalloc+0x188>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d869      	bhi.n	8005bc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005af4:	4b43      	ldr	r3, [pc, #268]	; (8005c04 <pvPortMalloc+0x18c>)
 8005af6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005af8:	4b42      	ldr	r3, [pc, #264]	; (8005c04 <pvPortMalloc+0x18c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005afe:	e004      	b.n	8005b0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d903      	bls.n	8005b1c <pvPortMalloc+0xa4>
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f1      	bne.n	8005b00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b1c:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <pvPortMalloc+0x180>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d050      	beq.n	8005bc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	4413      	add	r3, r2
 8005b2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	1ad2      	subs	r2, r2, r3
 8005b40:	2308      	movs	r3, #8
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d91f      	bls.n	8005b88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <pvPortMalloc+0xf8>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	613b      	str	r3, [r7, #16]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	1ad2      	subs	r2, r2, r3
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b82:	69b8      	ldr	r0, [r7, #24]
 8005b84:	f000 f908 	bl	8005d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b88:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <pvPortMalloc+0x188>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <pvPortMalloc+0x188>)
 8005b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b96:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <pvPortMalloc+0x188>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <pvPortMalloc+0x190>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d203      	bcs.n	8005baa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ba2:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <pvPortMalloc+0x188>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <pvPortMalloc+0x190>)
 8005ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <pvPortMalloc+0x184>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bbe:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <pvPortMalloc+0x194>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	4a11      	ldr	r2, [pc, #68]	; (8005c0c <pvPortMalloc+0x194>)
 8005bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bc8:	f7ff fa32 	bl	8005030 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <pvPortMalloc+0x174>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	60fb      	str	r3, [r7, #12]
}
 8005be8:	bf00      	nop
 8005bea:	e7fe      	b.n	8005bea <pvPortMalloc+0x172>
	return pvReturn;
 8005bec:	69fb      	ldr	r3, [r7, #28]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3728      	adds	r7, #40	; 0x28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	200046d8 	.word	0x200046d8
 8005bfc:	200046ec 	.word	0x200046ec
 8005c00:	200046dc 	.word	0x200046dc
 8005c04:	200046d0 	.word	0x200046d0
 8005c08:	200046e0 	.word	0x200046e0
 8005c0c:	200046e4 	.word	0x200046e4

08005c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d04d      	beq.n	8005cbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c22:	2308      	movs	r3, #8
 8005c24:	425b      	negs	r3, r3
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <vPortFree+0xb8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <vPortFree+0x44>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	60fb      	str	r3, [r7, #12]
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <vPortFree+0x62>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60bb      	str	r3, [r7, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <vPortFree+0xb8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01e      	beq.n	8005cbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11a      	bne.n	8005cbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <vPortFree+0xb8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	401a      	ands	r2, r3
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c98:	f7ff f9bc 	bl	8005014 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <vPortFree+0xbc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <vPortFree+0xbc>)
 8005ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005caa:	6938      	ldr	r0, [r7, #16]
 8005cac:	f000 f874 	bl	8005d98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <vPortFree+0xc0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	4a06      	ldr	r2, [pc, #24]	; (8005cd0 <vPortFree+0xc0>)
 8005cb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005cba:	f7ff f9b9 	bl	8005030 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cbe:	bf00      	nop
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200046ec 	.word	0x200046ec
 8005ccc:	200046dc 	.word	0x200046dc
 8005cd0:	200046e8 	.word	0x200046e8

08005cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ce0:	4b27      	ldr	r3, [pc, #156]	; (8005d80 <prvHeapInit+0xac>)
 8005ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00c      	beq.n	8005d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3307      	adds	r3, #7
 8005cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0307 	bic.w	r3, r3, #7
 8005cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <prvHeapInit+0xac>)
 8005d04:	4413      	add	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <prvHeapInit+0xb0>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d12:	4b1c      	ldr	r3, [pc, #112]	; (8005d84 <prvHeapInit+0xb0>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d20:	2208      	movs	r2, #8
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1a9b      	subs	r3, r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0307 	bic.w	r3, r3, #7
 8005d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <prvHeapInit+0xb4>)
 8005d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d36:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <prvHeapInit+0xb4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d3e:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <prvHeapInit+0xb4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <prvHeapInit+0xb4>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <prvHeapInit+0xb8>)
 8005d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <prvHeapInit+0xbc>)
 8005d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <prvHeapInit+0xc0>)
 8005d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d72:	601a      	str	r2, [r3, #0]
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20000ad0 	.word	0x20000ad0
 8005d84:	200046d0 	.word	0x200046d0
 8005d88:	200046d8 	.word	0x200046d8
 8005d8c:	200046e0 	.word	0x200046e0
 8005d90:	200046dc 	.word	0x200046dc
 8005d94:	200046ec 	.word	0x200046ec

08005d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005da0:	4b28      	ldr	r3, [pc, #160]	; (8005e44 <prvInsertBlockIntoFreeList+0xac>)
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e002      	b.n	8005dac <prvInsertBlockIntoFreeList+0x14>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d8f7      	bhi.n	8005da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d108      	bne.n	8005dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	441a      	add	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	441a      	add	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d118      	bne.n	8005e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4b15      	ldr	r3, [pc, #84]	; (8005e48 <prvInsertBlockIntoFreeList+0xb0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d00d      	beq.n	8005e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	e008      	b.n	8005e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <prvInsertBlockIntoFreeList+0xb0>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e003      	b.n	8005e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d002      	beq.n	8005e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	200046d0 	.word	0x200046d0
 8005e48:	200046d8 	.word	0x200046d8

08005e4c <HAL_GPIO_EXTI_Callback>:

uint32_t tiempo_rais=0;
uint32_t tiempo_fall=0;
uint32_t tiem=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	80fb      	strh	r3, [r7, #6]
	tiem= HAL_GetTick();
 8005e56:	f7fa ffe5 	bl	8000e24 <HAL_GetTick>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4a0b      	ldr	r2, [pc, #44]	; (8005e8c <HAL_GPIO_EXTI_Callback+0x40>)
 8005e5e:	6013      	str	r3, [r2, #0]
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8005e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e64:	480a      	ldr	r0, [pc, #40]	; (8005e90 <HAL_GPIO_EXTI_Callback+0x44>)
 8005e66:	f7fb fb15 	bl	8001494 <HAL_GPIO_ReadPin>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <HAL_GPIO_EXTI_Callback+0x2e>
		tiempo_rais= tiem;
 8005e70:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <HAL_GPIO_EXTI_Callback+0x40>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a07      	ldr	r2, [pc, #28]	; (8005e94 <HAL_GPIO_EXTI_Callback+0x48>)
 8005e76:	6013      	str	r3, [r2, #0]
	else
		tiempo_fall= tiem;
}
 8005e78:	e003      	b.n	8005e82 <HAL_GPIO_EXTI_Callback+0x36>
		tiempo_fall= tiem;
 8005e7a:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <HAL_GPIO_EXTI_Callback+0x40>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a06      	ldr	r2, [pc, #24]	; (8005e98 <HAL_GPIO_EXTI_Callback+0x4c>)
 8005e80:	6013      	str	r3, [r2, #0]
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20004700 	.word	0x20004700
 8005e90:	40020800 	.word	0x40020800
 8005e94:	200046f8 	.word	0x200046f8
 8005e98:	200046fc 	.word	0x200046fc

08005e9c <process_button_state>:
BaseType_t ao_led_send(ao_led_t *p_ao_led, led_event_t event)
{
  return (pdPASS == xQueueSend(p_ao_led->h_queue, (void*)&event, 0));
}
button_event_t process_button_state(bool state_)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]

	if(state_)
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <process_button_state+0x20>
	{
		tiempo=HAL_GetTick();
 8005eac:	f7fa ffba 	bl	8000e24 <HAL_GetTick>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	4a05      	ldr	r2, [pc, #20]	; (8005ec8 <process_button_state+0x2c>)
 8005eb4:	6013      	str	r3, [r2, #0]
		nuestro_butt=BOT_LARGO;
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <process_button_state+0x30>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
	}

	return nuestro_butt;
 8005ebc:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <process_button_state+0x30>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200046f0 	.word	0x200046f0
 8005ecc:	200046f4 	.word	0x200046f4

08005ed0 <vtask_button>:
  }
}


void vtask_button(void* argument)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	//ao_led_t * p_ao_led=argument;
	  while (true)
	  {
	    state = eboard_switch();
 8005ed8:	f000 f8da 	bl	8006090 <eboard_switch>
 8005edc:	4603      	mov	r3, r0
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <vtask_button+0x2c>)
 8005ee2:	701a      	strb	r2, [r3, #0]

	    led_event_t led_event = process_button_state(state);
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <vtask_button+0x2c>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff ffd7 	bl	8005e9c <process_button_state>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	73fb      	strb	r3, [r7, #15]

	    //ao_led_send(p_ao_led, led_event);

	    vTaskDelay((TickType_t)((1000) / portTICK_PERIOD_MS));
 8005ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ef6:	f7fe ffed 	bl	8004ed4 <vTaskDelay>
	  {
 8005efa:	e7ed      	b.n	8005ed8 <vtask_button+0x8>
 8005efc:	200046f5 	.word	0x200046f5

08005f00 <app_init>:


/********************** external functions definition ************************/

void app_init(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af02      	add	r7, sp, #8
  // drivers
  {
    eboard_init();
 8005f06:	f000 f8f7 	bl	80060f8 <eboard_init>
	//ao_led_init(&ao_led);

  // tasks
  {
    BaseType_t status;
    status = xTaskCreate(vtask_button, "vtask_button", 128, NULL, tskIDLE_PRIORITY, NULL);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	2300      	movs	r3, #0
 8005f14:	2280      	movs	r2, #128	; 0x80
 8005f16:	4906      	ldr	r1, [pc, #24]	; (8005f30 <app_init+0x30>)
 8005f18:	4806      	ldr	r0, [pc, #24]	; (8005f34 <app_init+0x34>)
 8005f1a:	f7fe fe7b 	bl	8004c14 <xTaskCreate>
 8005f1e:	6078      	str	r0, [r7, #4]
    while (pdPASS != status)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d1fc      	bne.n	8005f20 <app_init+0x20>
    {
      // error
    }
  }
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	08006734 	.word	0x08006734
 8005f34:	08005ed1 	.word	0x08005ed1

08005f38 <euart_hal_receive>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void euart_hal_receive(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  HAL_UARTEx_ReceiveToIdle_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7fd fa8b 	bl	8003468 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <euart_hal_send>:

void euart_hal_send(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7fd fa35 	bl	80033de <HAL_UART_Transmit_IT>
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_error((void*)huart);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f88b 	bl	80060a0 <eboard_hal_port_uart_error>
  // TODO: ¿?
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	807b      	strh	r3, [r7, #2]
  eboard_hal_port_uart_rx_irq((void*)huart, size);
 8005f9e:	887b      	ldrh	r3, [r7, #2]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f886 	bl	80060b4 <eboard_hal_port_uart_rx_irq>
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_tx_irq((void*)huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f88d 	bl	80060d8 <eboard_hal_port_uart_tx_irq>
}
 8005fbe:	bf00      	nop
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <eboard_hal_port_gpio_read>:
  driver_gpio_descriptor_t_ *hgpio = (driver_gpio_descriptor_t_*)handle;
  HAL_GPIO_WritePin(hgpio->GPIOx, hgpio->GPIO_Pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

bool eboard_hal_port_gpio_read(void *handle)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  driver_gpio_descriptor_t_ *hgpio = (driver_gpio_descriptor_t_*)handle;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
  GPIO_PinState state = HAL_GPIO_ReadPin(hgpio->GPIOx, hgpio->GPIO_Pin);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	891b      	ldrh	r3, [r3, #8]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f7fb fa59 	bl	8001494 <HAL_GPIO_ReadPin>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	72fb      	strb	r3, [r7, #11]
  return (GPIO_PIN_SET == state);
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	bf0c      	ite	eq
 8005fec:	2301      	moveq	r3, #1
 8005fee:	2300      	movne	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <eboard_uart_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void eboard_uart_init(void* phuart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
  euart_init(pheuart_, phuart, tx_buffer_, RB_TX_BUFFER_SIZE_, rx_buffer_, RB_RX_BUFFER_SIZE_);
 8006004:	4807      	ldr	r0, [pc, #28]	; (8006024 <eboard_uart_init+0x28>)
 8006006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	4b06      	ldr	r3, [pc, #24]	; (8006028 <eboard_uart_init+0x2c>)
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006014:	4a05      	ldr	r2, [pc, #20]	; (800602c <eboard_uart_init+0x30>)
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	f000 f9e2 	bl	80063e0 <euart_init>
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20004c04 	.word	0x20004c04
 8006028:	20004b04 	.word	0x20004b04
 800602c:	20004704 	.word	0x20004704

08006030 <eboard_gpio_init>:

void eboard_gpio_init(eboard_gpio_idx_t idx, void* hgpio)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	6039      	str	r1, [r7, #0]
 800603a:	71fb      	strb	r3, [r7, #7]
	gpios_[idx].hgpio = hgpio;
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	4905      	ldr	r1, [pc, #20]	; (8006054 <eboard_gpio_init+0x24>)
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000044 	.word	0x20000044

08006058 <eboard_gpio_read>:

  eboard_hal_port_gpio_write((void*)hgpio->hgpio, value);
}

bool eboard_gpio_read(eboard_gpio_idx_t idx)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	71fb      	strb	r3, [r7, #7]
  if(EBOARD_GPIO__CNT <= idx)
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d901      	bls.n	800606c <eboard_gpio_read+0x14>
  {
    return false;
 8006068:	2300      	movs	r3, #0
 800606a:	e00a      	b.n	8006082 <eboard_gpio_read+0x2a>
  }

  eboard_gpio_descriptor_t_* hgpio = gpios_ + idx;
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	4a06      	ldr	r2, [pc, #24]	; (800608c <eboard_gpio_read+0x34>)
 8006072:	4413      	add	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  return eboard_hal_port_gpio_read((void*)hgpio->hgpio);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff ffa3 	bl	8005fc6 <eboard_hal_port_gpio_read>
 8006080:	4603      	mov	r3, r0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000044 	.word	0x20000044

08006090 <eboard_switch>:
{
  eboard_gpio_write(EBOARD_GPIO_LEDB, value);
}

bool eboard_switch(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  return eboard_gpio_read(EBOARD_GPIO_SW);
 8006094:	2003      	movs	r0, #3
 8006096:	f7ff ffdf 	bl	8006058 <eboard_gpio_read>
 800609a:	4603      	mov	r3, r0
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}

080060a0 <eboard_hal_port_uart_error>:
  eboard_uart_swrite_line((elog_msg_len < (ELOG_MAXLEN - 1)) ? "" : " ...");
}

// port uart
void eboard_hal_port_uart_error(void* huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  // TODO: ¿?
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <eboard_hal_port_uart_rx_irq>:

void eboard_hal_port_uart_rx_irq(void* huart, uint16_t size)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	807b      	strh	r3, [r7, #2]
  euart_rx_irq(pheuart_, huart, size);
 80060c0:	4804      	ldr	r0, [pc, #16]	; (80060d4 <eboard_hal_port_uart_rx_irq+0x20>)
 80060c2:	887b      	ldrh	r3, [r7, #2]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	f000 f9ac 	bl	8006424 <euart_rx_irq>
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20004c04 	.word	0x20004c04

080060d8 <eboard_hal_port_uart_tx_irq>:

void eboard_hal_port_uart_tx_irq(void* huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  euart_tx_irq(pheuart_, (void*)huart);
 80060e0:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <eboard_hal_port_uart_tx_irq+0x1c>)
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 f9bc 	bl	8006462 <euart_tx_irq>
}
 80060ea:	bf00      	nop
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20004c04 	.word	0x20004c04

080060f8 <eboard_init>:

void eboard_init(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
  eboard_uart_init((void*)p_huart_selected_);
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <eboard_init+0x48>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff ff7a 	bl	8005ffc <eboard_uart_init>

  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 8006108:	2300      	movs	r3, #0
 800610a:	71fb      	strb	r3, [r7, #7]
 800610c:	e00f      	b.n	800612e <eboard_init+0x36>
  {
    eboard_gpio_init(idx, (void*)(driver_gpios_ + idx));
 800610e:	79fa      	ldrb	r2, [r7, #7]
 8006110:	4613      	mov	r3, r2
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	461a      	mov	r2, r3
 800611a:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <eboard_init+0x4c>)
 800611c:	441a      	add	r2, r3
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	4611      	mov	r1, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff ff84 	bl	8006030 <eboard_gpio_init>
  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	3301      	adds	r3, #1
 800612c:	71fb      	strb	r3, [r7, #7]
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d9ec      	bls.n	800610e <eboard_init+0x16>
  }
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000040 	.word	0x20000040
 8006144:	20000010 	.word	0x20000010

08006148 <inc_idex_>:
 */

#include "eringbuffer.h"

inline static void inc_idex_(size_t *index, size_t size)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  *index += 1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	601a      	str	r2, [r3, #0]
  if(size <= *index)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d802      	bhi.n	800616c <inc_idex_+0x24>
  {
    *index = 0;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
  }
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <write_byte_>:

inline static void write_byte_(eringbuffer_t *rb, uint8_t byte)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  rb->buffer[rb->w] = byte;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4413      	add	r3, r2
 800618e:	78fa      	ldrb	r2, [r7, #3]
 8006190:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->w), rb->size);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f103 020c 	add.w	r2, r3, #12
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7ff ffd2 	bl	8006148 <inc_idex_>
  rb->len++;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <read_byte_>:

inline static void read_byte_(eringbuffer_t *rb, uint8_t *byte)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  *byte = rb->buffer[rb->r];
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	4413      	add	r3, r2
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->r), rb->size);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f103 0210 	add.w	r2, r3, #16
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	4619      	mov	r1, r3
 80061dc:	4610      	mov	r0, r2
 80061de:	f7ff ffb3 	bl	8006148 <inc_idex_>
  rb->len--;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	1e5a      	subs	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <eringbuffer_init>:

void eringbuffer_init(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  rb->buffer = buffer;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	601a      	str	r2, [r3, #0]
  rb->size = size;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	605a      	str	r2, [r3, #4]
  rb->len = 0;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	609a      	str	r2, [r3, #8]
  rb->w = 0;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	60da      	str	r2, [r3, #12]
  rb->r = 0;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	611a      	str	r2, [r3, #16]
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <eringbuffer_len>:
{
  return rb->size;
}

size_t eringbuffer_len(const eringbuffer_t *rb)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  return rb->len;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
}
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <eringbuffer_free>:

size_t eringbuffer_free(const eringbuffer_t *rb)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  return rb->size - rb->len;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	1ad3      	subs	r3, r2, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <eringbuffer_is_full>:

bool eringbuffer_is_full(const eringbuffer_t *rb)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_free(rb));
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff ffea 	bl	8006242 <eringbuffer_free>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	bf0c      	ite	eq
 8006274:	2301      	moveq	r3, #1
 8006276:	2300      	movne	r3, #0
 8006278:	b2db      	uxtb	r3, r3
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <eringbuffer_is_empty>:

bool eringbuffer_is_empty(const eringbuffer_t *rb)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_len(rb));
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ffcd 	bl	800622a <eringbuffer_len>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <eringbuffer_write_byte>:

size_t eringbuffer_write_byte(eringbuffer_t *rb, uint8_t byte)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
  if(eringbuffer_is_full(rb))
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff ffd5 	bl	8006260 <eringbuffer_is_full>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <eringbuffer_write_byte+0x1c>
  {
    return 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	e005      	b.n	80062cc <eringbuffer_write_byte+0x28>
  }
  write_byte_(rb, byte);
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff ff57 	bl	8006178 <write_byte_>
  return 1;
 80062ca:	2301      	movs	r3, #1
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <eringbuffer_write>:

size_t eringbuffer_write(eringbuffer_t *rb, const uint8_t *buffer, size_t size)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e00d      	b.n	8006302 <eringbuffer_write+0x2e>
  {
    if(0 == eringbuffer_write_byte(rb, buffer[i]))
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4413      	add	r3, r2
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	4619      	mov	r1, r3
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f7ff ffd7 	bl	80062a4 <eringbuffer_write_byte>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <eringbuffer_write+0x38>
  for(i = 0; i < size; ++i)
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	3301      	adds	r3, #1
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	429a      	cmp	r2, r3
 8006308:	d3ed      	bcc.n	80062e6 <eringbuffer_write+0x12>
 800630a:	e000      	b.n	800630e <eringbuffer_write+0x3a>
    {
      break;
 800630c:	bf00      	nop
    }
  }
  return i;
 800630e:	697b      	ldr	r3, [r7, #20]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <eringbuffer_read_byte>:

size_t eringbuffer_read_byte(eringbuffer_t *rb, uint8_t *byte)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  if(eringbuffer_is_empty(rb))
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff ffad 	bl	8006282 <eringbuffer_is_empty>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <eringbuffer_read_byte+0x1a>
  {
    return 0;
 800632e:	2300      	movs	r3, #0
 8006330:	e004      	b.n	800633c <eringbuffer_read_byte+0x24>
  }
  read_byte_(rb, byte);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff ff3e 	bl	80061b6 <read_byte_>
  return 1;
 800633a:	2301      	movs	r3, #1
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <eringbuffer_read>:

size_t eringbuffer_read(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	e00c      	b.n	8006370 <eringbuffer_read+0x2c>
  {
    if(0 == eringbuffer_read_byte(rb, buffer + i))
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4413      	add	r3, r2
 800635c:	4619      	mov	r1, r3
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7ff ffda 	bl	8006318 <eringbuffer_read_byte>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <eringbuffer_read+0x36>
  for(i = 0; i < size; ++i)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	3301      	adds	r3, #1
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	429a      	cmp	r2, r3
 8006376:	d3ee      	bcc.n	8006356 <eringbuffer_read+0x12>
 8006378:	e000      	b.n	800637c <eringbuffer_read+0x38>
    {
      break;
 800637a:	bf00      	nop
    }
  }
  return i;
 800637c:	697b      	ldr	r3, [r7, #20]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <hal_receive_>:
#define pTX_BUFFER      (phandle->tx.pbuffer)
#define pRX_RB          (&(phandle->rx.rb))
#define pRX_BUFFER      (phandle->rx.pbuffer)

void hal_receive_(euart_t *phandle)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  euart_hal_receive(phandle->phardware_handle, pRX_BUFFER, EUART_HAL_BUFFER_SIZE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3340      	adds	r3, #64	; 0x40
 8006396:	2210      	movs	r2, #16
 8006398:	4619      	mov	r1, r3
 800639a:	f7ff fdcd 	bl	8005f38 <euart_hal_receive>
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <hal_send_>:

void hal_send_(euart_t *phandle)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  size_t tx_len = eringbuffer_read(pTX_RB, pTX_BUFFER, EUART_HAL_BUFFER_SIZE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f103 0008 	add.w	r0, r3, #8
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	331c      	adds	r3, #28
 80063b8:	2210      	movs	r2, #16
 80063ba:	4619      	mov	r1, r3
 80063bc:	f7ff ffc2 	bl	8006344 <eringbuffer_read>
 80063c0:	60f8      	str	r0, [r7, #12]
  euart_hal_send(phandle->phardware_handle, pTX_BUFFER, tx_len);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	331c      	adds	r3, #28
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4619      	mov	r1, r3
 80063ce:	f7ff fdc4 	bl	8005f5a <euart_hal_send>
  phandle->tx_free = false;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	711a      	strb	r2, [r3, #4]
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <euart_init>:

void euart_init(euart_t *phandle, void* phardware_handle, uint8_t* ptx_buffer, size_t tx_buffer_size, uint8_t* prx_buffer, size_t rx_buffer_size)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
  phandle->phardware_handle = phardware_handle;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	601a      	str	r2, [r3, #0]
  eringbuffer_init(pTX_RB, ptx_buffer, tx_buffer_size);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3308      	adds	r3, #8
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fef9 	bl	80061f4 <eringbuffer_init>
  eringbuffer_init(pRX_RB, prx_buffer, rx_buffer_size);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	332c      	adds	r3, #44	; 0x2c
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fef2 	bl	80061f4 <eringbuffer_init>
  phandle->tx_free = true;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	711a      	strb	r2, [r3, #4]

  hal_receive_(phandle);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff ffb5 	bl	8006386 <hal_receive_>
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <euart_rx_irq>:
{
  return eringbuffer_read(pRX_RB, buffer, size);
}

void euart_rx_irq(euart_t *phandle, void *phardware_handle, size_t size)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  if(phandle->phardware_handle != phardware_handle)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	429a      	cmp	r2, r3
 8006438:	d10f      	bne.n	800645a <euart_rx_irq+0x36>
  {
    return;
  }

  if(0 < size)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <euart_rx_irq+0x2e>
  {
    eringbuffer_write(pRX_RB, pRX_BUFFER, size);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3340      	adds	r3, #64	; 0x40
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4619      	mov	r1, r3
 800644e:	f7ff ff41 	bl	80062d4 <eringbuffer_write>
  }
  hal_receive_(phandle);
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7ff ff97 	bl	8006386 <hal_receive_>
 8006458:	e000      	b.n	800645c <euart_rx_irq+0x38>
    return;
 800645a:	bf00      	nop
}
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <euart_tx_irq>:

void euart_tx_irq(euart_t *phandle, void *phardware_handle)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  phandle->tx_free = true;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	711a      	strb	r2, [r3, #4]
  if(phandle->phardware_handle != phardware_handle)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d10e      	bne.n	800649a <euart_tx_irq+0x38>
  {
    return;
  }

  if(!eringbuffer_is_empty(pTX_RB))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3308      	adds	r3, #8
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fefe 	bl	8006282 <eringbuffer_is_empty>
 8006486:	4603      	mov	r3, r0
 8006488:	f083 0301 	eor.w	r3, r3, #1
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <euart_tx_irq+0x3a>
  {
    hal_send_(phandle);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff ff87 	bl	80063a6 <hal_send_>
 8006498:	e000      	b.n	800649c <euart_tx_irq+0x3a>
    return;
 800649a:	bf00      	nop
  }
}
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <__libc_init_array>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	4d0d      	ldr	r5, [pc, #52]	; (80064dc <__libc_init_array+0x38>)
 80064a8:	4c0d      	ldr	r4, [pc, #52]	; (80064e0 <__libc_init_array+0x3c>)
 80064aa:	1b64      	subs	r4, r4, r5
 80064ac:	10a4      	asrs	r4, r4, #2
 80064ae:	2600      	movs	r6, #0
 80064b0:	42a6      	cmp	r6, r4
 80064b2:	d109      	bne.n	80064c8 <__libc_init_array+0x24>
 80064b4:	4d0b      	ldr	r5, [pc, #44]	; (80064e4 <__libc_init_array+0x40>)
 80064b6:	4c0c      	ldr	r4, [pc, #48]	; (80064e8 <__libc_init_array+0x44>)
 80064b8:	f000 f8e4 	bl	8006684 <_init>
 80064bc:	1b64      	subs	r4, r4, r5
 80064be:	10a4      	asrs	r4, r4, #2
 80064c0:	2600      	movs	r6, #0
 80064c2:	42a6      	cmp	r6, r4
 80064c4:	d105      	bne.n	80064d2 <__libc_init_array+0x2e>
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064cc:	4798      	blx	r3
 80064ce:	3601      	adds	r6, #1
 80064d0:	e7ee      	b.n	80064b0 <__libc_init_array+0xc>
 80064d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d6:	4798      	blx	r3
 80064d8:	3601      	adds	r6, #1
 80064da:	e7f2      	b.n	80064c2 <__libc_init_array+0x1e>
 80064dc:	080067c4 	.word	0x080067c4
 80064e0:	080067c4 	.word	0x080067c4
 80064e4:	080067c4 	.word	0x080067c4
 80064e8:	080067c8 	.word	0x080067c8

080064ec <__retarget_lock_acquire_recursive>:
 80064ec:	4770      	bx	lr

080064ee <__retarget_lock_release_recursive>:
 80064ee:	4770      	bx	lr

080064f0 <memset>:
 80064f0:	4402      	add	r2, r0
 80064f2:	4603      	mov	r3, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <_free_r>:
 8006500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006502:	2900      	cmp	r1, #0
 8006504:	d044      	beq.n	8006590 <_free_r+0x90>
 8006506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650a:	9001      	str	r0, [sp, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f1a1 0404 	sub.w	r4, r1, #4
 8006512:	bfb8      	it	lt
 8006514:	18e4      	addlt	r4, r4, r3
 8006516:	f000 f8a9 	bl	800666c <__malloc_lock>
 800651a:	4a1e      	ldr	r2, [pc, #120]	; (8006594 <_free_r+0x94>)
 800651c:	9801      	ldr	r0, [sp, #4]
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	b933      	cbnz	r3, 8006530 <_free_r+0x30>
 8006522:	6063      	str	r3, [r4, #4]
 8006524:	6014      	str	r4, [r2, #0]
 8006526:	b003      	add	sp, #12
 8006528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800652c:	f000 b8a4 	b.w	8006678 <__malloc_unlock>
 8006530:	42a3      	cmp	r3, r4
 8006532:	d908      	bls.n	8006546 <_free_r+0x46>
 8006534:	6825      	ldr	r5, [r4, #0]
 8006536:	1961      	adds	r1, r4, r5
 8006538:	428b      	cmp	r3, r1
 800653a:	bf01      	itttt	eq
 800653c:	6819      	ldreq	r1, [r3, #0]
 800653e:	685b      	ldreq	r3, [r3, #4]
 8006540:	1949      	addeq	r1, r1, r5
 8006542:	6021      	streq	r1, [r4, #0]
 8006544:	e7ed      	b.n	8006522 <_free_r+0x22>
 8006546:	461a      	mov	r2, r3
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	b10b      	cbz	r3, 8006550 <_free_r+0x50>
 800654c:	42a3      	cmp	r3, r4
 800654e:	d9fa      	bls.n	8006546 <_free_r+0x46>
 8006550:	6811      	ldr	r1, [r2, #0]
 8006552:	1855      	adds	r5, r2, r1
 8006554:	42a5      	cmp	r5, r4
 8006556:	d10b      	bne.n	8006570 <_free_r+0x70>
 8006558:	6824      	ldr	r4, [r4, #0]
 800655a:	4421      	add	r1, r4
 800655c:	1854      	adds	r4, r2, r1
 800655e:	42a3      	cmp	r3, r4
 8006560:	6011      	str	r1, [r2, #0]
 8006562:	d1e0      	bne.n	8006526 <_free_r+0x26>
 8006564:	681c      	ldr	r4, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	6053      	str	r3, [r2, #4]
 800656a:	4421      	add	r1, r4
 800656c:	6011      	str	r1, [r2, #0]
 800656e:	e7da      	b.n	8006526 <_free_r+0x26>
 8006570:	d902      	bls.n	8006578 <_free_r+0x78>
 8006572:	230c      	movs	r3, #12
 8006574:	6003      	str	r3, [r0, #0]
 8006576:	e7d6      	b.n	8006526 <_free_r+0x26>
 8006578:	6825      	ldr	r5, [r4, #0]
 800657a:	1961      	adds	r1, r4, r5
 800657c:	428b      	cmp	r3, r1
 800657e:	bf04      	itt	eq
 8006580:	6819      	ldreq	r1, [r3, #0]
 8006582:	685b      	ldreq	r3, [r3, #4]
 8006584:	6063      	str	r3, [r4, #4]
 8006586:	bf04      	itt	eq
 8006588:	1949      	addeq	r1, r1, r5
 800658a:	6021      	streq	r1, [r4, #0]
 800658c:	6054      	str	r4, [r2, #4]
 800658e:	e7ca      	b.n	8006526 <_free_r+0x26>
 8006590:	b003      	add	sp, #12
 8006592:	bd30      	pop	{r4, r5, pc}
 8006594:	20004c58 	.word	0x20004c58

08006598 <cleanup_glue>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	460c      	mov	r4, r1
 800659c:	6809      	ldr	r1, [r1, #0]
 800659e:	4605      	mov	r5, r0
 80065a0:	b109      	cbz	r1, 80065a6 <cleanup_glue+0xe>
 80065a2:	f7ff fff9 	bl	8006598 <cleanup_glue>
 80065a6:	4621      	mov	r1, r4
 80065a8:	4628      	mov	r0, r5
 80065aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ae:	f7ff bfa7 	b.w	8006500 <_free_r>
	...

080065b4 <_reclaim_reent>:
 80065b4:	4b2c      	ldr	r3, [pc, #176]	; (8006668 <_reclaim_reent+0xb4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4283      	cmp	r3, r0
 80065ba:	b570      	push	{r4, r5, r6, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	d051      	beq.n	8006664 <_reclaim_reent+0xb0>
 80065c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80065c2:	b143      	cbz	r3, 80065d6 <_reclaim_reent+0x22>
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d14a      	bne.n	8006660 <_reclaim_reent+0xac>
 80065ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065cc:	6819      	ldr	r1, [r3, #0]
 80065ce:	b111      	cbz	r1, 80065d6 <_reclaim_reent+0x22>
 80065d0:	4620      	mov	r0, r4
 80065d2:	f7ff ff95 	bl	8006500 <_free_r>
 80065d6:	6961      	ldr	r1, [r4, #20]
 80065d8:	b111      	cbz	r1, 80065e0 <_reclaim_reent+0x2c>
 80065da:	4620      	mov	r0, r4
 80065dc:	f7ff ff90 	bl	8006500 <_free_r>
 80065e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065e2:	b111      	cbz	r1, 80065ea <_reclaim_reent+0x36>
 80065e4:	4620      	mov	r0, r4
 80065e6:	f7ff ff8b 	bl	8006500 <_free_r>
 80065ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80065ec:	b111      	cbz	r1, 80065f4 <_reclaim_reent+0x40>
 80065ee:	4620      	mov	r0, r4
 80065f0:	f7ff ff86 	bl	8006500 <_free_r>
 80065f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80065f6:	b111      	cbz	r1, 80065fe <_reclaim_reent+0x4a>
 80065f8:	4620      	mov	r0, r4
 80065fa:	f7ff ff81 	bl	8006500 <_free_r>
 80065fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006600:	b111      	cbz	r1, 8006608 <_reclaim_reent+0x54>
 8006602:	4620      	mov	r0, r4
 8006604:	f7ff ff7c 	bl	8006500 <_free_r>
 8006608:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800660a:	b111      	cbz	r1, 8006612 <_reclaim_reent+0x5e>
 800660c:	4620      	mov	r0, r4
 800660e:	f7ff ff77 	bl	8006500 <_free_r>
 8006612:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006614:	b111      	cbz	r1, 800661c <_reclaim_reent+0x68>
 8006616:	4620      	mov	r0, r4
 8006618:	f7ff ff72 	bl	8006500 <_free_r>
 800661c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800661e:	b111      	cbz	r1, 8006626 <_reclaim_reent+0x72>
 8006620:	4620      	mov	r0, r4
 8006622:	f7ff ff6d 	bl	8006500 <_free_r>
 8006626:	69a3      	ldr	r3, [r4, #24]
 8006628:	b1e3      	cbz	r3, 8006664 <_reclaim_reent+0xb0>
 800662a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800662c:	4620      	mov	r0, r4
 800662e:	4798      	blx	r3
 8006630:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006632:	b1b9      	cbz	r1, 8006664 <_reclaim_reent+0xb0>
 8006634:	4620      	mov	r0, r4
 8006636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800663a:	f7ff bfad 	b.w	8006598 <cleanup_glue>
 800663e:	5949      	ldr	r1, [r1, r5]
 8006640:	b941      	cbnz	r1, 8006654 <_reclaim_reent+0xa0>
 8006642:	3504      	adds	r5, #4
 8006644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006646:	2d80      	cmp	r5, #128	; 0x80
 8006648:	68d9      	ldr	r1, [r3, #12]
 800664a:	d1f8      	bne.n	800663e <_reclaim_reent+0x8a>
 800664c:	4620      	mov	r0, r4
 800664e:	f7ff ff57 	bl	8006500 <_free_r>
 8006652:	e7ba      	b.n	80065ca <_reclaim_reent+0x16>
 8006654:	680e      	ldr	r6, [r1, #0]
 8006656:	4620      	mov	r0, r4
 8006658:	f7ff ff52 	bl	8006500 <_free_r>
 800665c:	4631      	mov	r1, r6
 800665e:	e7ef      	b.n	8006640 <_reclaim_reent+0x8c>
 8006660:	2500      	movs	r5, #0
 8006662:	e7ef      	b.n	8006644 <_reclaim_reent+0x90>
 8006664:	bd70      	pop	{r4, r5, r6, pc}
 8006666:	bf00      	nop
 8006668:	20000064 	.word	0x20000064

0800666c <__malloc_lock>:
 800666c:	4801      	ldr	r0, [pc, #4]	; (8006674 <__malloc_lock+0x8>)
 800666e:	f7ff bf3d 	b.w	80064ec <__retarget_lock_acquire_recursive>
 8006672:	bf00      	nop
 8006674:	20004c54 	.word	0x20004c54

08006678 <__malloc_unlock>:
 8006678:	4801      	ldr	r0, [pc, #4]	; (8006680 <__malloc_unlock+0x8>)
 800667a:	f7ff bf38 	b.w	80064ee <__retarget_lock_release_recursive>
 800667e:	bf00      	nop
 8006680:	20004c54 	.word	0x20004c54

08006684 <_init>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr

08006690 <_fini>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr
