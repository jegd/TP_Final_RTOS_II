
RTOSII_tpfinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800967c  0800967c  0001967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009820  08009820  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009828  08009828  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08009830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d0c  200000c8  080098f8  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dd4  080098f8  00024dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fa1e  00000000  00000000  0002013b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048a3  00000000  00000000  0003fb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b68  00000000  00000000  00044400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000153e  00000000  00000000  00045f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027076  00000000  00000000  000474a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021f25  00000000  00000000  0006e51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0bfa  00000000  00000000  00090441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a84  00000000  00000000  0017103c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00178ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009664 	.word	0x08009664

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	08009664 	.word	0x08009664

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000e4 	.word	0x200000e4
 80005dc:	20000194 	.word	0x20000194

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fd73 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f829 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f965 	bl	80008bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f90b 	bl	800080c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 f933 	bl	8000860 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005fa:	f000 f8bb 	bl	8000774 <MX_TIM2_Init>
  MX_I2C1_Init();
 80005fe:	f000 f88b 	bl	8000718 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 8000602:	480c      	ldr	r0, [pc, #48]	; (8000634 <main+0x54>)
 8000604:	f004 fa8e 	bl	8004b24 <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 8000608:	f007 fd7e 	bl	8008108 <app_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0x58>)
 800060e:	1d3c      	adds	r4, r7, #4
 8000610:	461d      	mov	r5, r3
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 faa7 	bl	8006b76 <osThreadCreate>
 8000628:	4603      	mov	r3, r0
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <main+0x5c>)
 800062c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800062e:	f006 fa9b 	bl	8006b68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000632:	e7fe      	b.n	8000632 <main+0x52>
 8000634:	200003e8 	.word	0x200003e8
 8000638:	08009688 	.word	0x08009688
 800063c:	20000980 	.word	0x20000980

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2234      	movs	r2, #52	; 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f008 fa3f 	bl	8008ad2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a28      	ldr	r2, [pc, #160]	; (8000710 <SystemClock_Config+0xd0>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b26      	ldr	r3, [pc, #152]	; (8000710 <SystemClock_Config+0xd0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SystemClock_Config+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <SystemClock_Config+0xd4>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <SystemClock_Config+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	; 0xa8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 ff3d 	bl	8004548 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d4:	f000 f9e8 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 f880 	bl	80037fc <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000702:	f000 f9d1 	bl	8000aa8 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C1_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <MX_I2C1_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_I2C1_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_I2C1_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_I2C1_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C1_Init+0x50>)
 8000756:	f001 f875 	bl	8001844 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f9a2 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000394 	.word	0x20000394
 800076c:	40005400 	.word	0x40005400
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_TIM2_Init+0x94>)
 8000792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_TIM2_Init+0x94>)
 800079a:	2201      	movs	r2, #1
 800079c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_TIM2_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42-1;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_TIM2_Init+0x94>)
 80007a6:	2229      	movs	r2, #41	; 0x29
 80007a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_TIM2_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_TIM2_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b6:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_TIM2_Init+0x94>)
 80007b8:	f004 f964 	bl	8004a84 <HAL_TIM_Base_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f971 	bl	8000aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	4619      	mov	r1, r3
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_TIM2_Init+0x94>)
 80007d4:	f004 fb1e 	bl	8004e14 <HAL_TIM_ConfigClockSource>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 f963 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_TIM2_Init+0x94>)
 80007f0:	f004 fd3a 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007fa:	f000 f955 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200003e8 	.word	0x200003e8

0800080c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART3_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000844:	f004 fda0 	bl	8005388 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f92b 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000430 	.word	0x20000430
 800085c:	40004800 	.word	0x40004800

08000860 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800086a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2206      	movs	r2, #6
 8000870:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2202      	movs	r2, #2
 8000876:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2202      	movs	r2, #2
 8000882:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2201      	movs	r2, #1
 8000888:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2201      	movs	r2, #1
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	f002 fe61 	bl	800356a <HAL_PCD_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 f8fb 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000474 	.word	0x20000474

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b50      	ldr	r3, [pc, #320]	; (8000a18 <MX_GPIO_Init+0x15c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a4f      	ldr	r2, [pc, #316]	; (8000a18 <MX_GPIO_Init+0x15c>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b4d      	ldr	r3, [pc, #308]	; (8000a18 <MX_GPIO_Init+0x15c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b49      	ldr	r3, [pc, #292]	; (8000a18 <MX_GPIO_Init+0x15c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a48      	ldr	r2, [pc, #288]	; (8000a18 <MX_GPIO_Init+0x15c>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b46      	ldr	r3, [pc, #280]	; (8000a18 <MX_GPIO_Init+0x15c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <MX_GPIO_Init+0x15c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a41      	ldr	r2, [pc, #260]	; (8000a18 <MX_GPIO_Init+0x15c>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b3f      	ldr	r3, [pc, #252]	; (8000a18 <MX_GPIO_Init+0x15c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b3b      	ldr	r3, [pc, #236]	; (8000a18 <MX_GPIO_Init+0x15c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a3a      	ldr	r2, [pc, #232]	; (8000a18 <MX_GPIO_Init+0x15c>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <MX_GPIO_Init+0x15c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <MX_GPIO_Init+0x15c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a33      	ldr	r2, [pc, #204]	; (8000a18 <MX_GPIO_Init+0x15c>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <MX_GPIO_Init+0x15c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <MX_GPIO_Init+0x15c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a2c      	ldr	r2, [pc, #176]	; (8000a18 <MX_GPIO_Init+0x15c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <MX_GPIO_Init+0x15c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000980:	4826      	ldr	r0, [pc, #152]	; (8000a1c <MX_GPIO_Init+0x160>)
 8000982:	f000 ff21 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	; 0x40
 800098a:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_GPIO_Init+0x164>)
 800098c:	f000 ff1c 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000996:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481f      	ldr	r0, [pc, #124]	; (8000a24 <MX_GPIO_Init+0x168>)
 80009a8:	f000 fd7a 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <MX_GPIO_Init+0x160>)
 80009c6:	f000 fd6b 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ca:	2340      	movs	r3, #64	; 0x40
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	480f      	ldr	r0, [pc, #60]	; (8000a20 <MX_GPIO_Init+0x164>)
 80009e2:	f000 fd5d 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <MX_GPIO_Init+0x164>)
 80009fa:	f000 fd51 	bl	80014a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2105      	movs	r1, #5
 8000a02:	2028      	movs	r0, #40	; 0x28
 8000a04:	f000 fc82 	bl	800130c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a08:	2028      	movs	r0, #40	; 0x28
 8000a0a:	f000 fc9b 	bl	8001344 <HAL_NVIC_EnableIRQ>

}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40021800 	.word	0x40021800
 8000a24:	40020800 	.word	0x40020800

08000a28 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <configureTimerForRunTimeStats+0x14>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20000984 	.word	0x20000984

08000a40 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <getRunTimeCounterValue+0x14>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000984 	.word	0x20000984

08000a58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(0xFFFFFFFF);		/* Miximum delay = (2**32-1) tick */
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f006 f8d3 	bl	8006c0e <osDelay>
 8000a68:	e7fa      	b.n	8000a60 <StartDefaultTask+0x8>
	...

08000a6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d101      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7e:	f000 fb49 	bl	8001114 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a8a:	d104      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a94:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40010000 	.word	0x40010000
 8000aa4:	20000984 	.word	0x20000984

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_MspInit+0x54>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <HAL_MspInit+0x54>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x54>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_MspInit+0x54>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_MspInit+0x54>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_MspInit+0x54>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	210f      	movs	r1, #15
 8000af6:	f06f 0001 	mvn.w	r0, #1
 8000afa:	f000 fc07 	bl	800130c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <HAL_I2C_MspInit+0xa4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d13c      	bne.n	8000ba8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <HAL_I2C_MspInit+0xa8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <HAL_I2C_MspInit+0xa8>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_I2C_MspInit+0xa8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b50:	2312      	movs	r3, #18
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <HAL_I2C_MspInit+0xac>)
 8000b68:	f000 fc9a 	bl	80014a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_I2C_MspInit+0xa8>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <HAL_I2C_MspInit+0xa8>)
 8000b76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_I2C_MspInit+0xa8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2105      	movs	r1, #5
 8000b8c:	201f      	movs	r0, #31
 8000b8e:	f000 fbbd 	bl	800130c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b92:	201f      	movs	r0, #31
 8000b94:	f000 fbd6 	bl	8001344 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2105      	movs	r1, #5
 8000b9c:	2020      	movs	r0, #32
 8000b9e:	f000 fbb5 	bl	800130c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ba2:	2020      	movs	r0, #32
 8000ba4:	f000 fbce 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020400 	.word	0x40020400

08000bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bcc:	d115      	bne.n	8000bfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2105      	movs	r1, #5
 8000bee:	201c      	movs	r0, #28
 8000bf0:	f000 fb8c 	bl	800130c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf4:	201c      	movs	r0, #28
 8000bf6:	f000 fba5 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <HAL_UART_MspInit+0x94>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d134      	bne.n	8000c94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c74:	2307      	movs	r3, #7
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <HAL_UART_MspInit+0x9c>)
 8000c80:	f000 fc0e 	bl	80014a0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2105      	movs	r1, #5
 8000c88:	2027      	movs	r0, #39	; 0x27
 8000c8a:	f000 fb3f 	bl	800130c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c8e:	2027      	movs	r0, #39	; 0x27
 8000c90:	f000 fb58 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40004800 	.word	0x40004800
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020c00 	.word	0x40020c00

08000ca8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0a0      	sub	sp, #128	; 0x80
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	225c      	movs	r2, #92	; 0x5c
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f007 ff02 	bl	8008ad2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cd6:	d14e      	bne.n	8000d76 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cdc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f002 fed4 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000cf2:	f7ff fed9 	bl	8000aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_PCD_MspInit+0xd8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a20      	ldr	r2, [pc, #128]	; (8000d80 <HAL_PCD_MspInit+0xd8>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <HAL_PCD_MspInit+0xd8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d24:	230a      	movs	r3, #10
 8000d26:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4815      	ldr	r0, [pc, #84]	; (8000d84 <HAL_PCD_MspInit+0xdc>)
 8000d30:	f000 fbb6 	bl	80014a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d38:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d46:	4619      	mov	r1, r3
 8000d48:	480e      	ldr	r0, [pc, #56]	; (8000d84 <HAL_PCD_MspInit+0xdc>)
 8000d4a:	f000 fba9 	bl	80014a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_PCD_MspInit+0xd8>)
 8000d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_PCD_MspInit+0xd8>)
 8000d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d58:	6353      	str	r3, [r2, #52]	; 0x34
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_PCD_MspInit+0xd8>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_PCD_MspInit+0xd8>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_PCD_MspInit+0xd8>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3780      	adds	r7, #128	; 0x80
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <HAL_InitTick+0xd4>)
 8000d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da0:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <HAL_InitTick+0xd4>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6453      	str	r3, [r2, #68]	; 0x44
 8000da8:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <HAL_InitTick+0xd4>)
 8000daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db4:	f107 020c 	add.w	r2, r7, #12
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fe36 	bl	8003a30 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000dc4:	f002 fe20 	bl	8003a08 <HAL_RCC_GetPCLK2Freq>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd0:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <HAL_InitTick+0xd8>)
 8000dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd6:	0c9b      	lsrs	r3, r3, #18
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_InitTick+0xdc>)
 8000dde:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <HAL_InitTick+0xe0>)
 8000de0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <HAL_InitTick+0xdc>)
 8000de4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dea:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <HAL_InitTick+0xdc>)
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_InitTick+0xdc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_InitTick+0xdc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_InitTick+0xdc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <HAL_InitTick+0xdc>)
 8000e04:	f003 fe3e 	bl	8004a84 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d11b      	bne.n	8000e4e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e16:	4813      	ldr	r0, [pc, #76]	; (8000e64 <HAL_InitTick+0xdc>)
 8000e18:	f003 fe84 	bl	8004b24 <HAL_TIM_Base_Start_IT>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d111      	bne.n	8000e4e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e2a:	2019      	movs	r0, #25
 8000e2c:	f000 fa8a 	bl	8001344 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	d808      	bhi.n	8000e48 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e36:	2200      	movs	r2, #0
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	2019      	movs	r0, #25
 8000e3c:	f000 fa66 	bl	800130c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_InitTick+0xe4>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e002      	b.n	8000e4e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3730      	adds	r7, #48	; 0x30
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	431bde83 	.word	0x431bde83
 8000e64:	20000988 	.word	0x20000988
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ea2:	f003 feaf 	bl	8004c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000988 	.word	0x20000988

08000eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <TIM2_IRQHandler+0x10>)
 8000eb6:	f003 fea5 	bl	8004c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200003e8 	.word	0x200003e8

08000ec4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <I2C1_EV_IRQHandler+0x10>)
 8000eca:	f000 fea5 	bl	8001c18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000394 	.word	0x20000394

08000ed8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <I2C1_ER_IRQHandler+0x10>)
 8000ede:	f000 ffee 	bl	8001ebe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000394 	.word	0x20000394

08000eec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <USART3_IRQHandler+0x10>)
 8000ef2:	f004 fbd3 	bl	800569c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000430 	.word	0x20000430

08000f00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f08:	f000 fc78 	bl	80017fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e00a      	b.n	8000f38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f22:	f3af 8000 	nop.w
 8000f26:	4601      	mov	r1, r0
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	b2ca      	uxtb	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf0      	blt.n	8000f22 <_read+0x12>
	}

return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e009      	b.n	8000f70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f007 f891 	bl	800808c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf1      	blt.n	8000f5c <_write+0x12>
	}
	return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_close>:

int _close(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
	return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000faa:	605a      	str	r2, [r3, #4]
	return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_isatty>:

int _isatty(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	return 0;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f007 fdfe 	bl	8008c1c <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20020000 	.word	0x20020000
 800104c:	00000400 	.word	0x00000400
 8001050:	200009d0 	.word	0x200009d0
 8001054:	20004dd8 	.word	0x20004dd8

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a6:	f7ff ffd7 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f007 fdbd 	bl	8008c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fa97 	bl	80005e0 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80010c0:	08009830 	.word	0x08009830
  ldr r2, =_sbss
 80010c4:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80010c8:	20004dd4 	.word	0x20004dd4

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f8fc 	bl	80012f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	200f      	movs	r0, #15
 8001100:	f7ff fe42 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fcd6 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	200009d4 	.word	0x200009d4

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	200009d4 	.word	0x200009d4

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff4c 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131e:	f7ff ff61 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001322:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	6978      	ldr	r0, [r7, #20]
 800132a:	f7ff ffb1 	bl	8001290 <NVIC_EncodePriority>
 800132e:	4602      	mov	r2, r0
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff80 	bl	800123c <__NVIC_SetPriority>
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff54 	bl	8001200 <__NVIC_EnableIRQ>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800136e:	f7ff fee5 	bl	800113c <HAL_GetTick>
 8001372:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d008      	beq.n	8001392 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e052      	b.n	8001438 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0216 	bic.w	r2, r2, #22
 80013a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <HAL_DMA_Abort+0x62>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0208 	bic.w	r2, r2, #8
 80013d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e2:	e013      	b.n	800140c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013e4:	f7ff feaa 	bl	800113c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d90c      	bls.n	800140c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2220      	movs	r2, #32
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2203      	movs	r2, #3
 80013fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e015      	b.n	8001438 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1e4      	bne.n	80013e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	223f      	movs	r2, #63	; 0x3f
 8001420:	409a      	lsls	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d004      	beq.n	800145e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00c      	b.n	8001478 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2205      	movs	r2, #5
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001492:	b2db      	uxtb	r3, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	e165      	b.n	8001788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 8154 	bne.w	8001782 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d005      	beq.n	80014f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d130      	bne.n	8001554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001528:	2201      	movs	r2, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	f003 0201 	and.w	r2, r3, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b03      	cmp	r3, #3
 800155e:	d017      	beq.n	8001590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d123      	bne.n	80015e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	69b9      	ldr	r1, [r7, #24]
 80015e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0203 	and.w	r2, r3, #3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80ae 	beq.w	8001782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_GPIO_Init+0x300>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a5c      	ldr	r2, [pc, #368]	; (80017a0 <HAL_GPIO_Init+0x300>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <HAL_GPIO_Init+0x300>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001642:	4a58      	ldr	r2, [pc, #352]	; (80017a4 <HAL_GPIO_Init+0x304>)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4f      	ldr	r2, [pc, #316]	; (80017a8 <HAL_GPIO_Init+0x308>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d025      	beq.n	80016ba <HAL_GPIO_Init+0x21a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <HAL_GPIO_Init+0x30c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d01f      	beq.n	80016b6 <HAL_GPIO_Init+0x216>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <HAL_GPIO_Init+0x310>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d019      	beq.n	80016b2 <HAL_GPIO_Init+0x212>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_GPIO_Init+0x314>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x20e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4b      	ldr	r2, [pc, #300]	; (80017b8 <HAL_GPIO_Init+0x318>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x20a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <HAL_GPIO_Init+0x31c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x206>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a49      	ldr	r2, [pc, #292]	; (80017c0 <HAL_GPIO_Init+0x320>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x202>
 800169e:	2306      	movs	r3, #6
 80016a0:	e00c      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016a2:	2307      	movs	r3, #7
 80016a4:	e00a      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016a6:	2305      	movs	r3, #5
 80016a8:	e008      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e004      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016ba:	2300      	movs	r3, #0
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	f002 0203 	and.w	r2, r2, #3
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	4093      	lsls	r3, r2
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016cc:	4935      	ldr	r1, [pc, #212]	; (80017a4 <HAL_GPIO_Init+0x304>)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3302      	adds	r3, #2
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016da:	4b3a      	ldr	r3, [pc, #232]	; (80017c4 <HAL_GPIO_Init+0x324>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fe:	4a31      	ldr	r2, [pc, #196]	; (80017c4 <HAL_GPIO_Init+0x324>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001704:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_GPIO_Init+0x324>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001728:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <HAL_GPIO_Init+0x324>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <HAL_GPIO_Init+0x324>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <HAL_GPIO_Init+0x324>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_GPIO_Init+0x324>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800177c:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <HAL_GPIO_Init+0x324>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	2b0f      	cmp	r3, #15
 800178c:	f67f ae96 	bls.w	80014bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40013800 	.word	0x40013800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40020c00 	.word	0x40020c00
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40021400 	.word	0x40021400
 80017c0:	40021800 	.word	0x40021800
 80017c4:	40013c00 	.word	0x40013c00

080017c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e4:	e003      	b.n	80017ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	041a      	lsls	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	619a      	str	r2, [r3, #24]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	4013      	ands	r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f806 	bl	800182c <HAL_GPIO_EXTI_Callback>
  }
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40013c00 	.word	0x40013c00

0800182c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e12b      	b.n	8001aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff f94e 	bl	8000b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2224      	movs	r2, #36	; 0x24
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018a8:	f002 f89a 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 80018ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4a81      	ldr	r2, [pc, #516]	; (8001ab8 <HAL_I2C_Init+0x274>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d807      	bhi.n	80018c8 <HAL_I2C_Init+0x84>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4a80      	ldr	r2, [pc, #512]	; (8001abc <HAL_I2C_Init+0x278>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	bf94      	ite	ls
 80018c0:	2301      	movls	r3, #1
 80018c2:	2300      	movhi	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	e006      	b.n	80018d6 <HAL_I2C_Init+0x92>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4a7d      	ldr	r2, [pc, #500]	; (8001ac0 <HAL_I2C_Init+0x27c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	bf94      	ite	ls
 80018d0:	2301      	movls	r3, #1
 80018d2:	2300      	movhi	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0e7      	b.n	8001aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4a78      	ldr	r2, [pc, #480]	; (8001ac4 <HAL_I2C_Init+0x280>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	0c9b      	lsrs	r3, r3, #18
 80018e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4a6a      	ldr	r2, [pc, #424]	; (8001ab8 <HAL_I2C_Init+0x274>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d802      	bhi.n	8001918 <HAL_I2C_Init+0xd4>
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	3301      	adds	r3, #1
 8001916:	e009      	b.n	800192c <HAL_I2C_Init+0xe8>
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	4a69      	ldr	r2, [pc, #420]	; (8001ac8 <HAL_I2C_Init+0x284>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	099b      	lsrs	r3, r3, #6
 800192a:	3301      	adds	r3, #1
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	430b      	orrs	r3, r1
 8001932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800193e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	495c      	ldr	r1, [pc, #368]	; (8001ab8 <HAL_I2C_Init+0x274>)
 8001948:	428b      	cmp	r3, r1
 800194a:	d819      	bhi.n	8001980 <HAL_I2C_Init+0x13c>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1e59      	subs	r1, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fbb1 f3f3 	udiv	r3, r1, r3
 800195a:	1c59      	adds	r1, r3, #1
 800195c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001960:	400b      	ands	r3, r1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00a      	beq.n	800197c <HAL_I2C_Init+0x138>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1e59      	subs	r1, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fbb1 f3f3 	udiv	r3, r1, r3
 8001974:	3301      	adds	r3, #1
 8001976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197a:	e051      	b.n	8001a20 <HAL_I2C_Init+0x1dc>
 800197c:	2304      	movs	r3, #4
 800197e:	e04f      	b.n	8001a20 <HAL_I2C_Init+0x1dc>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d111      	bne.n	80019ac <HAL_I2C_Init+0x168>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1e58      	subs	r0, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	440b      	add	r3, r1
 8001996:	fbb0 f3f3 	udiv	r3, r0, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	e012      	b.n	80019d2 <HAL_I2C_Init+0x18e>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1e58      	subs	r0, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	0099      	lsls	r1, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Init+0x196>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e022      	b.n	8001a20 <HAL_I2C_Init+0x1dc>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10e      	bne.n	8001a00 <HAL_I2C_Init+0x1bc>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1e58      	subs	r0, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6859      	ldr	r1, [r3, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	440b      	add	r3, r1
 80019f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fe:	e00f      	b.n	8001a20 <HAL_I2C_Init+0x1dc>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e58      	subs	r0, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	0099      	lsls	r1, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	6809      	ldr	r1, [r1, #0]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6911      	ldr	r1, [r2, #16]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68d2      	ldr	r2, [r2, #12]
 8001a5a:	4311      	orrs	r1, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	000186a0 	.word	0x000186a0
 8001abc:	001e847f 	.word	0x001e847f
 8001ac0:	003d08ff 	.word	0x003d08ff
 8001ac4:	431bde83 	.word	0x431bde83
 8001ac8:	10624dd3 	.word	0x10624dd3

08001acc <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	460b      	mov	r3, r1
 8001ada:	817b      	strh	r3, [r7, #10]
 8001adc:	4613      	mov	r3, r2
 8001ade:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	f040 8085 	bne.w	8001bfc <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001af2:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_I2C_Master_Transmit_IT+0x140>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	4a45      	ldr	r2, [pc, #276]	; (8001c10 <HAL_I2C_Master_Transmit_IT+0x144>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0a1a      	lsrs	r2, r3, #8
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009a      	lsls	r2, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d116      	bne.n	8001b46 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2220      	movs	r2, #32
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f043 0220 	orr.w	r2, r3, #32
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e05b      	b.n	8001bfe <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d0db      	beq.n	8001b0c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_I2C_Master_Transmit_IT+0x96>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e04d      	b.n	8001bfe <HAL_I2C_Master_Transmit_IT+0x132>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d007      	beq.n	8001b88 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2221      	movs	r2, #33	; 0x21
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	893a      	ldrh	r2, [r7, #8]
 8001bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_I2C_Master_Transmit_IT+0x148>)
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001bca:	897a      	ldrh	r2, [r7, #10]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001be6:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e000      	b.n	8001bfe <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
  }
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	14f8b589 	.word	0x14f8b589
 8001c14:	ffff0000 	.word	0xffff0000

08001c18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c40:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d003      	beq.n	8001c50 <HAL_I2C_EV_IRQHandler+0x38>
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	f040 80b1 	bne.w	8001db2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <HAL_I2C_EV_IRQHandler+0x6e>
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001c70:	d003      	beq.n	8001c7a <HAL_I2C_EV_IRQHandler+0x62>
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001c78:	d101      	bne.n	8001c7e <HAL_I2C_EV_IRQHandler+0x66>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_I2C_EV_IRQHandler+0x68>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	f000 8114 	beq.w	8001eae <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_I2C_EV_IRQHandler+0x90>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f001 fc4a 	bl	8003534 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 fd54 	bl	800274e <I2C_Master_SB>
 8001ca6:	e083      	b.n	8001db0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_I2C_EV_IRQHandler+0xac>
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fdcc 	bl	800285a <I2C_Master_ADD10>
 8001cc2:	e075      	b.n	8001db0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_I2C_EV_IRQHandler+0xc8>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fde8 	bl	80028ae <I2C_Master_ADDR>
 8001cde:	e067      	b.n	8001db0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d036      	beq.n	8001d58 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf8:	f000 80db 	beq.w	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <HAL_I2C_EV_IRQHandler+0x10a>
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_I2C_EV_IRQHandler+0x10a>
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f9cc 	bl	80020b8 <I2C_MasterTransmit_TXE>
 8001d20:	e046      	b.n	8001db0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80c2 	beq.w	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80bc 	beq.w	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d3a:	7bbb      	ldrb	r3, [r7, #14]
 8001d3c:	2b21      	cmp	r3, #33	; 0x21
 8001d3e:	d103      	bne.n	8001d48 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fa55 	bl	80021f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d46:	e0b4      	b.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	2b40      	cmp	r3, #64	; 0x40
 8001d4c:	f040 80b1 	bne.w	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fac3 	bl	80022dc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d56:	e0ac      	b.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d66:	f000 80a4 	beq.w	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00d      	beq.n	8001d90 <HAL_I2C_EV_IRQHandler+0x178>
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_I2C_EV_IRQHandler+0x178>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d103      	bne.n	8001d90 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fb3b 	bl	8002404 <I2C_MasterReceive_RXNE>
 8001d8e:	e00f      	b.n	8001db0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 808b 	beq.w	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8085 	beq.w	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fbe6 	bl	800257a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dae:	e080      	b.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
 8001db0:	e07f      	b.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	e007      	b.n	8001dd4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d011      	beq.n	8001e02 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00c      	beq.n	8001e02 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001df8:	69b9      	ldr	r1, [r7, #24]
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 ffa6 	bl	8002d4c <I2C_Slave_ADDR>
 8001e00:	e05a      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_I2C_EV_IRQHandler+0x206>
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 ffe0 	bl	8002ddc <I2C_Slave_STOPF>
 8001e1c:	e04c      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e1e:	7bbb      	ldrb	r3, [r7, #14]
 8001e20:	2b21      	cmp	r3, #33	; 0x21
 8001e22:	d002      	beq.n	8001e2a <HAL_I2C_EV_IRQHandler+0x212>
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	2b29      	cmp	r3, #41	; 0x29
 8001e28:	d120      	bne.n	8001e6c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00d      	beq.n	8001e50 <HAL_I2C_EV_IRQHandler+0x238>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <HAL_I2C_EV_IRQHandler+0x238>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d103      	bne.n	8001e50 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fec1 	bl	8002bd0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e4e:	e032      	b.n	8001eb6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d02d      	beq.n	8001eb6 <HAL_I2C_EV_IRQHandler+0x29e>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d028      	beq.n	8001eb6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fef0 	bl	8002c4a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e6a:	e024      	b.n	8001eb6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00d      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0x27a>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0x27a>
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fefe 	bl	8002c8c <I2C_SlaveReceive_RXNE>
 8001e90:	e012      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 ff2e 	bl	8002d08 <I2C_SlaveReceive_BTF>
 8001eac:	e004      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001eae:	bf00      	nop
 8001eb0:	e002      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eb2:	bf00      	nop
 8001eb4:	e000      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b08a      	sub	sp, #40	; 0x28
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ee0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00d      	beq.n	8001f08 <HAL_I2C_ER_IRQHandler+0x4a>
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f06:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00d      	beq.n	8001f2e <HAL_I2C_ER_IRQHandler+0x70>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001f2c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d03e      	beq.n	8001fb6 <HAL_I2C_ER_IRQHandler+0xf8>
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d039      	beq.n	8001fb6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001f42:	7efb      	ldrb	r3, [r7, #27]
 8001f44:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f54:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001f5c:	7ebb      	ldrb	r3, [r7, #26]
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d112      	bne.n	8001f88 <HAL_I2C_ER_IRQHandler+0xca>
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10f      	bne.n	8001f88 <HAL_I2C_ER_IRQHandler+0xca>
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	2b21      	cmp	r3, #33	; 0x21
 8001f6c:	d008      	beq.n	8001f80 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001f6e:	7cfb      	ldrb	r3, [r7, #19]
 8001f70:	2b29      	cmp	r3, #41	; 0x29
 8001f72:	d005      	beq.n	8001f80 <HAL_I2C_ER_IRQHandler+0xc2>
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b28      	cmp	r3, #40	; 0x28
 8001f78:	d106      	bne.n	8001f88 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b21      	cmp	r3, #33	; 0x21
 8001f7e:	d103      	bne.n	8001f88 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f001 f85b 	bl	800303c <I2C_Slave_AF>
 8001f86:	e016      	b.n	8001fb6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f90:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f9a:	7efb      	ldrb	r3, [r7, #27]
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d002      	beq.n	8001fa6 <HAL_I2C_ER_IRQHandler+0xe8>
 8001fa0:	7efb      	ldrb	r3, [r7, #27]
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d107      	bne.n	8001fb6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <HAL_I2C_ER_IRQHandler+0x11e>
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d008      	beq.n	8001fdc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001fda:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f001 f894 	bl	800311c <I2C_ITError>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	; 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
 8002044:	4613      	mov	r3, r2
 8002046:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d150      	bne.n	8002180 <I2C_MasterTransmit_TXE+0xc8>
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	2b21      	cmp	r3, #33	; 0x21
 80020e2:	d14d      	bne.n	8002180 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d01d      	beq.n	8002126 <I2C_MasterTransmit_TXE+0x6e>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d01a      	beq.n	8002126 <I2C_MasterTransmit_TXE+0x6e>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020f6:	d016      	beq.n	8002126 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002106:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2211      	movs	r2, #17
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f006 f822 	bl	8008168 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002124:	e060      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002134:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002144:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d107      	bne.n	8002170 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff7d 	bl	8002068 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800216e:	e03b      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f005 fff5 	bl	8008168 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800217e:	e033      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b21      	cmp	r3, #33	; 0x21
 8002184:	d005      	beq.n	8002192 <I2C_MasterTransmit_TXE+0xda>
 8002186:	7bbb      	ldrb	r3, [r7, #14]
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d12d      	bne.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	2b22      	cmp	r3, #34	; 0x22
 8002190:	d12a      	bne.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d108      	bne.n	80021ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80021ac:	e01c      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b40      	cmp	r3, #64	; 0x40
 80021b8:	d103      	bne.n	80021c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f88e 	bl	80022dc <I2C_MemoryTransmit_TXE_BTF>
}
 80021c0:	e012      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021e6:	e7ff      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b21      	cmp	r3, #33	; 0x21
 8002208:	d164      	bne.n	80022d4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d012      	beq.n	800223a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002238:	e04c      	b.n	80022d4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d01d      	beq.n	800227c <I2C_MasterTransmit_BTF+0x8c>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b20      	cmp	r3, #32
 8002244:	d01a      	beq.n	800227c <I2C_MasterTransmit_BTF+0x8c>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800224c:	d016      	beq.n	800227c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800225c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2211      	movs	r2, #17
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f005 ff77 	bl	8008168 <HAL_I2C_MasterTxCpltCallback>
}
 800227a:	e02b      	b.n	80022d4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800228a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d107      	bne.n	80022c6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fed2 	bl	8002068 <HAL_I2C_MemTxCpltCallback>
}
 80022c4:	e006      	b.n	80022d4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f005 ff4a 	bl	8008168 <HAL_I2C_MasterTxCpltCallback>
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d11d      	bne.n	8002330 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10b      	bne.n	8002314 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002300:	b2da      	uxtb	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	1c9a      	adds	r2, r3, #2
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002312:	e073      	b.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002318:	b29b      	uxth	r3, r3
 800231a:	121b      	asrs	r3, r3, #8
 800231c:	b2da      	uxtb	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800232e:	e065      	b.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002334:	2b01      	cmp	r3, #1
 8002336:	d10b      	bne.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233c:	b2da      	uxtb	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800234e:	e055      	b.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002354:	2b02      	cmp	r3, #2
 8002356:	d151      	bne.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b22      	cmp	r3, #34	; 0x22
 800235c:	d10d      	bne.n	800237a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800236c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002378:	e040      	b.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b21      	cmp	r3, #33	; 0x21
 8002388:	d112      	bne.n	80023b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023ae:	e025      	b.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d120      	bne.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	2b21      	cmp	r3, #33	; 0x21
 80023be:	d11d      	bne.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023ce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fe36 	bl	8002068 <HAL_I2C_MemTxCpltCallback>
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b22      	cmp	r3, #34	; 0x22
 8002416:	f040 80ac 	bne.w	8002572 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d921      	bls.n	800246c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b03      	cmp	r3, #3
 8002456:	f040 808c 	bne.w	8002572 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002468:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800246a:	e082      	b.n	8002572 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	2b02      	cmp	r3, #2
 8002472:	d075      	beq.n	8002560 <I2C_MasterReceive_RXNE+0x15c>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d002      	beq.n	8002480 <I2C_MasterReceive_RXNE+0x7c>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d16f      	bne.n	8002560 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f001 f825 	bl	80034d0 <I2C_WaitOnSTOPRequestThroughIT>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d142      	bne.n	8002512 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d10a      	bne.n	80024fc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fdc1 	bl	800207c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024fa:	e03a      	b.n	8002572 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2212      	movs	r2, #18
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fd76 	bl	8001ffc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002510:	e02f      	b.n	8002572 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002520:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fd99 	bl	8002090 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800255e:	e008      	b.n	8002572 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256e:	605a      	str	r2, [r3, #4]
}
 8002570:	e7ff      	b.n	8002572 <I2C_MasterReceive_RXNE+0x16e>
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b04      	cmp	r3, #4
 8002590:	d11b      	bne.n	80025ca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80025c8:	e0bd      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d129      	bne.n	8002628 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00a      	beq.n	8002600 <I2C_MasterReceive_BTF+0x86>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d007      	beq.n	8002600 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002626:	e08e      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d176      	bne.n	8002720 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d002      	beq.n	800263e <I2C_MasterReceive_BTF+0xc4>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b10      	cmp	r3, #16
 800263c:	d108      	bne.n	8002650 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e019      	b.n	8002684 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d002      	beq.n	800265c <I2C_MasterReceive_BTF+0xe2>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d108      	bne.n	800266e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e00a      	b.n	8002684 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b10      	cmp	r3, #16
 8002672:	d007      	beq.n	8002684 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d10a      	bne.n	800270a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fcba 	bl	800207c <HAL_I2C_MemRxCpltCallback>
}
 8002708:	e01d      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2212      	movs	r2, #18
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fc6f 	bl	8001ffc <HAL_I2C_MasterRxCpltCallback>
}
 800271e:	e012      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	d117      	bne.n	8002792 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800277a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800277c:	e067      	b.n	800284e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]
}
 8002790:	e05d      	b.n	800284e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800279a:	d133      	bne.n	8002804 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b21      	cmp	r3, #33	; 0x21
 80027a6:	d109      	bne.n	80027bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	e008      	b.n	80027ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d004      	beq.n	80027e0 <I2C_Master_SB+0x92>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d108      	bne.n	80027f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d032      	beq.n	800284e <I2C_Master_SB+0x100>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02d      	beq.n	800284e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002800:	605a      	str	r2, [r3, #4]
}
 8002802:	e024      	b.n	800284e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10e      	bne.n	800282a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	b29b      	uxth	r3, r3
 8002812:	11db      	asrs	r3, r3, #7
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0306 	and.w	r3, r3, #6
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f063 030f 	orn	r3, r3, #15
 8002820:	b2da      	uxtb	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]
}
 8002828:	e011      	b.n	800284e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10d      	bne.n	800284e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	b29b      	uxth	r3, r3
 8002838:	11db      	asrs	r3, r3, #7
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f003 0306 	and.w	r3, r3, #6
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f063 030e 	orn	r3, r3, #14
 8002846:	b2da      	uxtb	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	b2da      	uxtb	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <I2C_Master_ADD10+0x26>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d108      	bne.n	8002892 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00c      	beq.n	80028a2 <I2C_Master_ADD10+0x48>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a0:	605a      	str	r2, [r3, #4]
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b091      	sub	sp, #68	; 0x44
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b22      	cmp	r3, #34	; 0x22
 80028d6:	f040 8169 	bne.w	8002bac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <I2C_Master_ADDR+0x54>
 80028e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d10b      	bne.n	8002902 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	633b      	str	r3, [r7, #48]	; 0x30
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	e160      	b.n	8002bc4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002906:	2b00      	cmp	r3, #0
 8002908:	d11d      	bne.n	8002946 <I2C_Master_ADDR+0x98>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002912:	d118      	bne.n	8002946 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002938:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	651a      	str	r2, [r3, #80]	; 0x50
 8002944:	e13e      	b.n	8002bc4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d113      	bne.n	8002978 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002950:	2300      	movs	r3, #0
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e115      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	f040 808a 	bne.w	8002a98 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800298a:	d137      	bne.n	80029fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029aa:	d113      	bne.n	80029d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029bc:	2300      	movs	r3, #0
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	e0e7      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e0d3      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d02e      	beq.n	8002a60 <I2C_Master_ADDR+0x1b2>
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d02b      	beq.n	8002a60 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	2b12      	cmp	r3, #18
 8002a0c:	d102      	bne.n	8002a14 <I2C_Master_ADDR+0x166>
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d125      	bne.n	8002a60 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00e      	beq.n	8002a38 <I2C_Master_ADDR+0x18a>
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d00b      	beq.n	8002a38 <I2C_Master_ADDR+0x18a>
 8002a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d008      	beq.n	8002a38 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e007      	b.n	8002a48 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a46:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	e0a1      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e085      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d14d      	bne.n	8002b3e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d016      	beq.n	8002ad6 <I2C_Master_ADDR+0x228>
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d013      	beq.n	8002ad6 <I2C_Master_ADDR+0x228>
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d010      	beq.n	8002ad6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e007      	b.n	8002ae6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af4:	d117      	bne.n	8002b26 <I2C_Master_ADDR+0x278>
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002afc:	d00b      	beq.n	8002b16 <I2C_Master_ADDR+0x268>
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d008      	beq.n	8002b16 <I2C_Master_ADDR+0x268>
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d005      	beq.n	8002b16 <I2C_Master_ADDR+0x268>
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d002      	beq.n	8002b16 <I2C_Master_ADDR+0x268>
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d107      	bne.n	8002b26 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b24:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	e032      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b4c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5c:	d117      	bne.n	8002b8e <I2C_Master_ADDR+0x2e0>
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b64:	d00b      	beq.n	8002b7e <I2C_Master_ADDR+0x2d0>
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d008      	beq.n	8002b7e <I2C_Master_ADDR+0x2d0>
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d005      	beq.n	8002b7e <I2C_Master_ADDR+0x2d0>
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d002      	beq.n	8002b7e <I2C_Master_ADDR+0x2d0>
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d107      	bne.n	8002b8e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002baa:	e00b      	b.n	8002bc4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
}
 8002bc2:	e7ff      	b.n	8002bc4 <I2C_Master_ADDR+0x316>
 8002bc4:	bf00      	nop
 8002bc6:	3744      	adds	r7, #68	; 0x44
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02b      	beq.n	8002c42 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	781a      	ldrb	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d114      	bne.n	8002c42 <I2C_SlaveTransmit_TXE+0x72>
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b29      	cmp	r3, #41	; 0x29
 8002c1c:	d111      	bne.n	8002c42 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2221      	movs	r2, #33	; 0x21
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2228      	movs	r2, #40	; 0x28
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff f9e7 	bl	8002010 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d011      	beq.n	8002c80 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d02c      	beq.n	8002d00 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d114      	bne.n	8002d00 <I2C_SlaveReceive_RXNE+0x74>
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002cda:	d111      	bne.n	8002d00 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2222      	movs	r2, #34	; 0x22
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2228      	movs	r2, #40	; 0x28
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff f992 	bl	8002024 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d012      	beq.n	8002d40 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d66:	2b28      	cmp	r3, #40	; 0x28
 8002d68:	d125      	bne.n	8002db6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d78:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	81bb      	strh	r3, [r7, #12]
 8002d98:	e002      	b.n	8002da0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002da8:	89ba      	ldrh	r2, [r7, #12]
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff f942 	bl	8002038 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002db4:	e00e      	b.n	8002dd4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e28:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e38:	d172      	bne.n	8002f20 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b22      	cmp	r3, #34	; 0x22
 8002e3e:	d002      	beq.n	8002e46 <I2C_Slave_STOPF+0x6a>
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b2a      	cmp	r3, #42	; 0x2a
 8002e44:	d135      	bne.n	8002eb2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f043 0204 	orr.w	r2, r3, #4
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fb00 	bl	8001484 <HAL_DMA_GetState>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d049      	beq.n	8002f1e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	4a69      	ldr	r2, [pc, #420]	; (8003034 <I2C_Slave_STOPF+0x258>)
 8002e90:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fad2 	bl	8001440 <HAL_DMA_Abort_IT>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d03d      	beq.n	8002f1e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eac:	4610      	mov	r0, r2
 8002eae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eb0:	e035      	b.n	8002f1e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe faca 	bl	8001484 <HAL_DMA_GetState>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d014      	beq.n	8002f20 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	4a4e      	ldr	r2, [pc, #312]	; (8003034 <I2C_Slave_STOPF+0x258>)
 8002efc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fa9c 	bl	8001440 <HAL_DMA_Abort_IT>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4798      	blx	r3
 8002f1c:	e000      	b.n	8002f20 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f1e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d03e      	beq.n	8002fa8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d112      	bne.n	8002f5e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	d112      	bne.n	8002f92 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f8b3 	bl	800311c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002fb6:	e039      	b.n	800302c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b2a      	cmp	r3, #42	; 0x2a
 8002fbc:	d109      	bne.n	8002fd2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2228      	movs	r2, #40	; 0x28
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff f829 	bl	8002024 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b28      	cmp	r3, #40	; 0x28
 8002fdc:	d111      	bne.n	8003002 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <I2C_Slave_STOPF+0x25c>)
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff f82a 	bl	8002054 <HAL_I2C_ListenCpltCallback>
}
 8003000:	e014      	b.n	800302c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	2b22      	cmp	r3, #34	; 0x22
 8003008:	d002      	beq.n	8003010 <I2C_Slave_STOPF+0x234>
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b22      	cmp	r3, #34	; 0x22
 800300e:	d10d      	bne.n	800302c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fffc 	bl	8002024 <HAL_I2C_SlaveRxCpltCallback>
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	08003381 	.word	0x08003381
 8003038:	ffff0000 	.word	0xffff0000

0800303c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d002      	beq.n	800305e <I2C_Slave_AF+0x22>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b20      	cmp	r3, #32
 800305c:	d129      	bne.n	80030b2 <I2C_Slave_AF+0x76>
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b28      	cmp	r3, #40	; 0x28
 8003062:	d126      	bne.n	80030b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a2c      	ldr	r2, [pc, #176]	; (8003118 <I2C_Slave_AF+0xdc>)
 8003068:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003078:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003082:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fe ffd2 	bl	8002054 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80030b0:	e02e      	b.n	8003110 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b21      	cmp	r3, #33	; 0x21
 80030b6:	d126      	bne.n	8003106 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a17      	ldr	r2, [pc, #92]	; (8003118 <I2C_Slave_AF+0xdc>)
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2221      	movs	r2, #33	; 0x21
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe ff86 	bl	8002010 <HAL_I2C_SlaveTxCpltCallback>
}
 8003104:	e004      	b.n	8003110 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800310e:	615a      	str	r2, [r3, #20]
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	ffff0000 	.word	0xffff0000

0800311c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003132:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003134:	7bbb      	ldrb	r3, [r7, #14]
 8003136:	2b10      	cmp	r3, #16
 8003138:	d002      	beq.n	8003140 <I2C_ITError+0x24>
 800313a:	7bbb      	ldrb	r3, [r7, #14]
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d10a      	bne.n	8003156 <I2C_ITError+0x3a>
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b22      	cmp	r3, #34	; 0x22
 8003144:	d107      	bne.n	8003156 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003154:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800315c:	2b28      	cmp	r3, #40	; 0x28
 800315e:	d107      	bne.n	8003170 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2228      	movs	r2, #40	; 0x28
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800316e:	e015      	b.n	800319c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317e:	d00a      	beq.n	8003196 <I2C_ITError+0x7a>
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b60      	cmp	r3, #96	; 0x60
 8003184:	d007      	beq.n	8003196 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031aa:	d162      	bne.n	8003272 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d020      	beq.n	800320c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	4a6a      	ldr	r2, [pc, #424]	; (8003378 <I2C_ITError+0x25c>)
 80031d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe f932 	bl	8001440 <HAL_DMA_Abort_IT>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8089 	beq.w	80032f6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003206:	4610      	mov	r0, r2
 8003208:	4798      	blx	r3
 800320a:	e074      	b.n	80032f6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	4a59      	ldr	r2, [pc, #356]	; (8003378 <I2C_ITError+0x25c>)
 8003212:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe f911 	bl	8001440 <HAL_DMA_Abort_IT>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d068      	beq.n	80032f6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d10b      	bne.n	800324a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800326c:	4610      	mov	r0, r2
 800326e:	4798      	blx	r3
 8003270:	e041      	b.n	80032f6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b60      	cmp	r3, #96	; 0x60
 800327c:	d125      	bne.n	80032ca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d10b      	bne.n	80032b2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe feee 	bl	80020a4 <HAL_I2C_AbortCpltCallback>
 80032c8:	e015      	b.n	80032f6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d4:	2b40      	cmp	r3, #64	; 0x40
 80032d6:	d10b      	bne.n	80032f0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fe fecd 	bl	8002090 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10e      	bne.n	8003324 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003316:	2b00      	cmp	r3, #0
 8003318:	d104      	bne.n	8003324 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003332:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b04      	cmp	r3, #4
 8003346:	d113      	bne.n	8003370 <I2C_ITError+0x254>
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	2b28      	cmp	r3, #40	; 0x28
 800334c:	d110      	bne.n	8003370 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a0a      	ldr	r2, [pc, #40]	; (800337c <I2C_ITError+0x260>)
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fe fe72 	bl	8002054 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	08003381 	.word	0x08003381
 800337c:	ffff0000 	.word	0xffff0000

08003380 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800339a:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <I2C_DMAAbort+0x148>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	08db      	lsrs	r3, r3, #3
 80033a0:	4a4a      	ldr	r2, [pc, #296]	; (80034cc <I2C_DMAAbort+0x14c>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	0a1a      	lsrs	r2, r3, #8
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	00da      	lsls	r2, r3, #3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80033c6:	e00a      	b.n	80033de <I2C_DMAAbort+0x5e>
    }
    count--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033dc:	d0ea      	beq.n	80033b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	2200      	movs	r2, #0
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	2200      	movs	r2, #0
 80033fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2200      	movs	r2, #0
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	2200      	movs	r2, #0
 8003422:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	2200      	movs	r2, #0
 8003432:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b60      	cmp	r3, #96	; 0x60
 800344e:	d10e      	bne.n	800346e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2200      	movs	r2, #0
 8003464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7fe fe1c 	bl	80020a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800346c:	e027      	b.n	80034be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003474:	2b28      	cmp	r3, #40	; 0x28
 8003476:	d117      	bne.n	80034a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003496:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2228      	movs	r2, #40	; 0x28
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034a6:	e007      	b.n	80034b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80034b8:	6978      	ldr	r0, [r7, #20]
 80034ba:	f7fe fde9 	bl	8002090 <HAL_I2C_ErrorCallback>
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000000 	.word	0x20000000
 80034cc:	14f8b589 	.word	0x14f8b589

080034d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	08db      	lsrs	r3, r3, #3
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80034e4:	fba2 2303 	umull	r2, r3, r2, r3
 80034e8:	0a1a      	lsrs	r2, r3, #8
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d107      	bne.n	800350e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e008      	b.n	8003520 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351c:	d0e9      	beq.n	80034f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	20000000 	.word	0x20000000
 8003530:	14f8b589 	.word	0x14f8b589

08003534 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003544:	d103      	bne.n	800354e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800354c:	e007      	b.n	800355e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003556:	d102      	bne.n	800355e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2208      	movs	r2, #8
 800355c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800356a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356c:	b08f      	sub	sp, #60	; 0x3c
 800356e:	af0a      	add	r7, sp, #40	; 0x28
 8003570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e116      	b.n	80037aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fb86 	bl	8000ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 f821 	bl	8006602 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	687e      	ldr	r6, [r7, #4]
 80035c8:	466d      	mov	r5, sp
 80035ca:	f106 0410 	add.w	r4, r6, #16
 80035ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035da:	e885 0003 	stmia.w	r5, {r0, r1}
 80035de:	1d33      	adds	r3, r6, #4
 80035e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035e2:	6838      	ldr	r0, [r7, #0]
 80035e4:	f002 ffac 	bl	8006540 <USB_CoreInit>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0d7      	b.n	80037aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f003 f80f 	bl	8006624 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	e04a      	b.n	80036a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	333d      	adds	r3, #61	; 0x3d
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	333c      	adds	r3, #60	; 0x3c
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	b298      	uxth	r0, r3
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3344      	adds	r3, #68	; 0x44
 8003648:	4602      	mov	r2, r0
 800364a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	3340      	adds	r3, #64	; 0x40
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	3348      	adds	r3, #72	; 0x48
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	334c      	adds	r3, #76	; 0x4c
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3354      	adds	r3, #84	; 0x54
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	3301      	adds	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3af      	bcc.n	800360c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e044      	b.n	800373c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036de:	7bfa      	ldrb	r2, [r7, #15]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	3301      	adds	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d3b5      	bcc.n	80036b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	687e      	ldr	r6, [r7, #4]
 800374e:	466d      	mov	r5, sp
 8003750:	f106 0410 	add.w	r4, r6, #16
 8003754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800375a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800375c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003760:	e885 0003 	stmia.w	r5, {r0, r1}
 8003764:	1d33      	adds	r3, r6, #4
 8003766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003768:	6838      	ldr	r0, [r7, #0]
 800376a:	f002 ffa7 	bl	80066bc <USB_DevInit>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e014      	b.n	80037aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b01      	cmp	r3, #1
 8003796:	d102      	bne.n	800379e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f80a 	bl	80037b2 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f003 f965 	bl	8006a72 <USB_DevDisconnect>

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e4:	f043 0303 	orr.w	r3, r3, #3
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0cc      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b68      	ldr	r3, [pc, #416]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d90c      	bls.n	8003838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b65      	ldr	r3, [pc, #404]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b63      	ldr	r3, [pc, #396]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0b8      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003850:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800385a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003868:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a52      	ldr	r2, [pc, #328]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	494d      	ldr	r1, [pc, #308]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d044      	beq.n	800391c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b47      	ldr	r3, [pc, #284]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d119      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e07f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d003      	beq.n	80038ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e06f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b3b      	ldr	r3, [pc, #236]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e067      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038da:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4934      	ldr	r1, [pc, #208]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ec:	f7fd fc26 	bl	800113c <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	e00a      	b.n	800390a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f4:	f7fd fc22 	bl	800113c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e04f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 020c 	and.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d1eb      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d20c      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e032      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003950:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4916      	ldr	r1, [pc, #88]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396e:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	490e      	ldr	r1, [pc, #56]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003982:	f000 fbb1 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 8003986:	4602      	mov	r2, r0
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	490a      	ldr	r1, [pc, #40]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	5ccb      	ldrb	r3, [r1, r3]
 8003996:	fa22 f303 	lsr.w	r3, r2, r3
 800399a:	4a09      	ldr	r2, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd f9f0 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023c00 	.word	0x40023c00
 80039b8:	40023800 	.word	0x40023800
 80039bc:	080097d4 	.word	0x080097d4
 80039c0:	20000000 	.word	0x20000000
 80039c4:	20000004 	.word	0x20000004

080039c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000000 	.word	0x20000000

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039e4:	f7ff fff0 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0a9b      	lsrs	r3, r3, #10
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40023800 	.word	0x40023800
 8003a04:	080097e4 	.word	0x080097e4

08003a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a0c:	f7ff ffdc 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	0b5b      	lsrs	r3, r3, #13
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4903      	ldr	r1, [pc, #12]	; (8003a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	080097e4 	.word	0x080097e4

08003a30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <HAL_RCC_GetClockConfig+0x5c>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0203 	and.w	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <HAL_RCC_GetClockConfig+0x5c>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <HAL_RCC_GetClockConfig+0x5c>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_GetClockConfig+0x5c>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	08db      	lsrs	r3, r3, #3
 8003a6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <HAL_RCC_GetClockConfig+0x60>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 020f 	and.w	r2, r3, #15
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40023c00 	.word	0x40023c00

08003a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	; 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d010      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003acc:	4b6f      	ldr	r3, [pc, #444]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	496c      	ldr	r1, [pc, #432]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003aea:	2301      	movs	r3, #1
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d010      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003afa:	4b64      	ldr	r3, [pc, #400]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b00:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	4960      	ldr	r1, [pc, #384]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d017      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b28:	4b58      	ldr	r3, [pc, #352]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4955      	ldr	r1, [pc, #340]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b46:	d101      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003b54:	2301      	movs	r3, #1
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d017      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b64:	4b49      	ldr	r3, [pc, #292]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b72:	4946      	ldr	r1, [pc, #280]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b82:	d101      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003b84:	2301      	movs	r3, #1
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003b90:	2301      	movs	r3, #1
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 808a 	beq.w	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	4a38      	ldr	r2, [pc, #224]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb2:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a33      	ldr	r2, [pc, #204]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bca:	f7fd fab7 	bl	800113c <HAL_GetTick>
 8003bce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fd fab3 	bl	800113c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e278      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003be4:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf0:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d02f      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d028      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c0e:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c16:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c24:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c2a:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d114      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fd fa81 	bl	800113c <HAL_GetTick>
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd fa7d 	bl	800113c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e240      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c54:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ee      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6c:	d114      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	4902      	ldr	r1, [pc, #8]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]
 8003c88:	e00c      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40007000 	.word	0x40007000
 8003c94:	42470e40 	.word	0x42470e40
 8003c98:	4b4a      	ldr	r3, [pc, #296]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a49      	ldr	r2, [pc, #292]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ca2:	6093      	str	r3, [r2, #8]
 8003ca4:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb0:	4944      	ldr	r1, [pc, #272]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003cc8:	4b3f      	ldr	r3, [pc, #252]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003cca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003cd8:	4b3a      	ldr	r3, [pc, #232]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	4937      	ldr	r1, [pc, #220]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cfa:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d00:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d08:	492e      	ldr	r1, [pc, #184]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d011      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d1c:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d22:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	4926      	ldr	r1, [pc, #152]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	491a      	ldr	r1, [pc, #104]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d011      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d74:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7c:	4911      	ldr	r1, [pc, #68]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d005      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da0:	f040 80ff 	bne.w	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003daa:	f7fd f9c7 	bl	800113c <HAL_GetTick>
 8003dae:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003db0:	e00e      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003db2:	f7fd f9c3 	bl	800113c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d907      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e188      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	424711e0 	.word	0x424711e0
 8003dcc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dd0:	4b7e      	ldr	r3, [pc, #504]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1ea      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d028      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d124      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e04:	4b71      	ldr	r3, [pc, #452]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	3301      	adds	r3, #1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e16:	4b6d      	ldr	r3, [pc, #436]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1c:	0e1b      	lsrs	r3, r3, #24
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	019b      	lsls	r3, r3, #6
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	3b01      	subs	r3, #1
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	071b      	lsls	r3, r3, #28
 8003e46:	4961      	ldr	r1, [pc, #388]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d004      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d035      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e78:	d130      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e7a:	4b54      	ldr	r3, [pc, #336]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e8c:	4b4f      	ldr	r3, [pc, #316]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e92:	0f1b      	lsrs	r3, r3, #28
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	019b      	lsls	r3, r3, #6
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	071b      	lsls	r3, r3, #28
 8003ebc:	4943      	ldr	r1, [pc, #268]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ec4:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eca:	f023 021f 	bic.w	r2, r3, #31
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	493d      	ldr	r1, [pc, #244]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d029      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef0:	d124      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ef2:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	3301      	adds	r3, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f04:	4b31      	ldr	r3, [pc, #196]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0a:	0f1b      	lsrs	r3, r3, #28
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	019b      	lsls	r3, r3, #6
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	3b01      	subs	r3, #1
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	071b      	lsls	r3, r3, #28
 8003f34:	4925      	ldr	r1, [pc, #148]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	019b      	lsls	r3, r3, #6
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	071b      	lsls	r3, r3, #28
 8003f6e:	4917      	ldr	r1, [pc, #92]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f76:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f7c:	f7fd f8de 	bl	800113c <HAL_GetTick>
 8003f80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f84:	f7fd f8da 	bl	800113c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e09f      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 8095 	bne.w	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fb0:	f7fd f8c4 	bl	800113c <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fb6:	e00f      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003fb8:	f7fd f8c0 	bl	800113c <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d908      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e085      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	42470068 	.word	0x42470068
 8003fd4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fd8:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe4:	d0e8      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02b      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400a:	2b00      	cmp	r3, #0
 800400c:	d127      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800400e:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	3301      	adds	r3, #1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	019b      	lsls	r3, r3, #6
 800402a:	431a      	orrs	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	3b01      	subs	r3, #1
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	061b      	lsls	r3, r3, #24
 800403c:	4928      	ldr	r1, [pc, #160]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004044:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	3b01      	subs	r3, #1
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	4922      	ldr	r1, [pc, #136]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01d      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004072:	d118      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004074:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	0e1b      	lsrs	r3, r3, #24
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	019b      	lsls	r3, r3, #6
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	431a      	orrs	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	4910      	ldr	r1, [pc, #64]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040a6:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040ac:	f7fd f846 	bl	800113c <HAL_GetTick>
 80040b0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80040b4:	f7fd f842 	bl	800113c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e007      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d2:	d1ef      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3730      	adds	r7, #48	; 0x30
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	42470070 	.word	0x42470070

080040e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b0ae      	sub	sp, #184	; 0xb8
 80040ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800410e:	4bcb      	ldr	r3, [pc, #812]	; (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b0c      	cmp	r3, #12
 8004118:	f200 8206 	bhi.w	8004528 <HAL_RCC_GetSysClockFreq+0x440>
 800411c:	a201      	add	r2, pc, #4	; (adr r2, 8004124 <HAL_RCC_GetSysClockFreq+0x3c>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004159 	.word	0x08004159
 8004128:	08004529 	.word	0x08004529
 800412c:	08004529 	.word	0x08004529
 8004130:	08004529 	.word	0x08004529
 8004134:	08004161 	.word	0x08004161
 8004138:	08004529 	.word	0x08004529
 800413c:	08004529 	.word	0x08004529
 8004140:	08004529 	.word	0x08004529
 8004144:	08004169 	.word	0x08004169
 8004148:	08004529 	.word	0x08004529
 800414c:	08004529 	.word	0x08004529
 8004150:	08004529 	.word	0x08004529
 8004154:	08004359 	.word	0x08004359
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4bb9      	ldr	r3, [pc, #740]	; (8004440 <HAL_RCC_GetSysClockFreq+0x358>)
 800415a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800415e:	e1e7      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004160:	4bb8      	ldr	r3, [pc, #736]	; (8004444 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004166:	e1e3      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004168:	4bb4      	ldr	r3, [pc, #720]	; (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004174:	4bb1      	ldr	r3, [pc, #708]	; (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d071      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004180:	4bae      	ldr	r3, [pc, #696]	; (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800418c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041a6:	4622      	mov	r2, r4
 80041a8:	462b      	mov	r3, r5
 80041aa:	f04f 0000 	mov.w	r0, #0
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	0159      	lsls	r1, r3, #5
 80041b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b8:	0150      	lsls	r0, r2, #5
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4621      	mov	r1, r4
 80041c0:	1a51      	subs	r1, r2, r1
 80041c2:	6439      	str	r1, [r7, #64]	; 0x40
 80041c4:	4629      	mov	r1, r5
 80041c6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ca:	647b      	str	r3, [r7, #68]	; 0x44
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80041d8:	4649      	mov	r1, r9
 80041da:	018b      	lsls	r3, r1, #6
 80041dc:	4641      	mov	r1, r8
 80041de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041e2:	4641      	mov	r1, r8
 80041e4:	018a      	lsls	r2, r1, #6
 80041e6:	4641      	mov	r1, r8
 80041e8:	1a51      	subs	r1, r2, r1
 80041ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80041ec:	4649      	mov	r1, r9
 80041ee:	eb63 0301 	sbc.w	r3, r3, r1
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004200:	4649      	mov	r1, r9
 8004202:	00cb      	lsls	r3, r1, #3
 8004204:	4641      	mov	r1, r8
 8004206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420a:	4641      	mov	r1, r8
 800420c:	00ca      	lsls	r2, r1, #3
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	4603      	mov	r3, r0
 8004214:	4622      	mov	r2, r4
 8004216:	189b      	adds	r3, r3, r2
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
 800421a:	462b      	mov	r3, r5
 800421c:	460a      	mov	r2, r1
 800421e:	eb42 0303 	adc.w	r3, r2, r3
 8004222:	637b      	str	r3, [r7, #52]	; 0x34
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004230:	4629      	mov	r1, r5
 8004232:	024b      	lsls	r3, r1, #9
 8004234:	4621      	mov	r1, r4
 8004236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800423a:	4621      	mov	r1, r4
 800423c:	024a      	lsls	r2, r1, #9
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800424c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004250:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004254:	f7fc f82c 	bl	80002b0 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004262:	e067      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004264:	4b75      	ldr	r3, [pc, #468]	; (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004270:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427c:	67bb      	str	r3, [r7, #120]	; 0x78
 800427e:	2300      	movs	r3, #0
 8004280:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004282:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004286:	4622      	mov	r2, r4
 8004288:	462b      	mov	r3, r5
 800428a:	f04f 0000 	mov.w	r0, #0
 800428e:	f04f 0100 	mov.w	r1, #0
 8004292:	0159      	lsls	r1, r3, #5
 8004294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004298:	0150      	lsls	r0, r2, #5
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4621      	mov	r1, r4
 80042a0:	1a51      	subs	r1, r2, r1
 80042a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80042a4:	4629      	mov	r1, r5
 80042a6:	eb63 0301 	sbc.w	r3, r3, r1
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80042b8:	4649      	mov	r1, r9
 80042ba:	018b      	lsls	r3, r1, #6
 80042bc:	4641      	mov	r1, r8
 80042be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042c2:	4641      	mov	r1, r8
 80042c4:	018a      	lsls	r2, r1, #6
 80042c6:	4641      	mov	r1, r8
 80042c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80042cc:	4649      	mov	r1, r9
 80042ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e6:	4692      	mov	sl, r2
 80042e8:	469b      	mov	fp, r3
 80042ea:	4623      	mov	r3, r4
 80042ec:	eb1a 0303 	adds.w	r3, sl, r3
 80042f0:	623b      	str	r3, [r7, #32]
 80042f2:	462b      	mov	r3, r5
 80042f4:	eb4b 0303 	adc.w	r3, fp, r3
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004306:	4629      	mov	r1, r5
 8004308:	028b      	lsls	r3, r1, #10
 800430a:	4621      	mov	r1, r4
 800430c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004310:	4621      	mov	r1, r4
 8004312:	028a      	lsls	r2, r1, #10
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800431c:	2200      	movs	r2, #0
 800431e:	673b      	str	r3, [r7, #112]	; 0x70
 8004320:	677a      	str	r2, [r7, #116]	; 0x74
 8004322:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004326:	f7fb ffc3 	bl	80002b0 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4613      	mov	r3, r2
 8004330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004334:	4b41      	ldr	r3, [pc, #260]	; (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	3301      	adds	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800434a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004356:	e0eb      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004358:	4b38      	ldr	r3, [pc, #224]	; (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004364:	4b35      	ldr	r3, [pc, #212]	; (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d06b      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004370:	4b32      	ldr	r3, [pc, #200]	; (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	099b      	lsrs	r3, r3, #6
 8004376:	2200      	movs	r2, #0
 8004378:	66bb      	str	r3, [r7, #104]	; 0x68
 800437a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800437c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	663b      	str	r3, [r7, #96]	; 0x60
 8004384:	2300      	movs	r3, #0
 8004386:	667b      	str	r3, [r7, #100]	; 0x64
 8004388:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800438c:	4622      	mov	r2, r4
 800438e:	462b      	mov	r3, r5
 8004390:	f04f 0000 	mov.w	r0, #0
 8004394:	f04f 0100 	mov.w	r1, #0
 8004398:	0159      	lsls	r1, r3, #5
 800439a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439e:	0150      	lsls	r0, r2, #5
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4621      	mov	r1, r4
 80043a6:	1a51      	subs	r1, r2, r1
 80043a8:	61b9      	str	r1, [r7, #24]
 80043aa:	4629      	mov	r1, r5
 80043ac:	eb63 0301 	sbc.w	r3, r3, r1
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043be:	4659      	mov	r1, fp
 80043c0:	018b      	lsls	r3, r1, #6
 80043c2:	4651      	mov	r1, sl
 80043c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043c8:	4651      	mov	r1, sl
 80043ca:	018a      	lsls	r2, r1, #6
 80043cc:	4651      	mov	r1, sl
 80043ce:	ebb2 0801 	subs.w	r8, r2, r1
 80043d2:	4659      	mov	r1, fp
 80043d4:	eb63 0901 	sbc.w	r9, r3, r1
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ec:	4690      	mov	r8, r2
 80043ee:	4699      	mov	r9, r3
 80043f0:	4623      	mov	r3, r4
 80043f2:	eb18 0303 	adds.w	r3, r8, r3
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	462b      	mov	r3, r5
 80043fa:	eb49 0303 	adc.w	r3, r9, r3
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800440c:	4629      	mov	r1, r5
 800440e:	024b      	lsls	r3, r1, #9
 8004410:	4621      	mov	r1, r4
 8004412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004416:	4621      	mov	r1, r4
 8004418:	024a      	lsls	r2, r1, #9
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004422:	2200      	movs	r2, #0
 8004424:	65bb      	str	r3, [r7, #88]	; 0x58
 8004426:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004428:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800442c:	f7fb ff40 	bl	80002b0 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800443a:	e065      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x420>
 800443c:	40023800 	.word	0x40023800
 8004440:	00f42400 	.word	0x00f42400
 8004444:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004448:	4b3d      	ldr	r3, [pc, #244]	; (8004540 <HAL_RCC_GetSysClockFreq+0x458>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	2200      	movs	r2, #0
 8004450:	4618      	mov	r0, r3
 8004452:	4611      	mov	r1, r2
 8004454:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004458:	653b      	str	r3, [r7, #80]	; 0x50
 800445a:	2300      	movs	r3, #0
 800445c:	657b      	str	r3, [r7, #84]	; 0x54
 800445e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004462:	4642      	mov	r2, r8
 8004464:	464b      	mov	r3, r9
 8004466:	f04f 0000 	mov.w	r0, #0
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	0159      	lsls	r1, r3, #5
 8004470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004474:	0150      	lsls	r0, r2, #5
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4641      	mov	r1, r8
 800447c:	1a51      	subs	r1, r2, r1
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	4649      	mov	r1, r9
 8004482:	eb63 0301 	sbc.w	r3, r3, r1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004494:	4659      	mov	r1, fp
 8004496:	018b      	lsls	r3, r1, #6
 8004498:	4651      	mov	r1, sl
 800449a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800449e:	4651      	mov	r1, sl
 80044a0:	018a      	lsls	r2, r1, #6
 80044a2:	4651      	mov	r1, sl
 80044a4:	1a54      	subs	r4, r2, r1
 80044a6:	4659      	mov	r1, fp
 80044a8:	eb63 0501 	sbc.w	r5, r3, r1
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	00eb      	lsls	r3, r5, #3
 80044b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ba:	00e2      	lsls	r2, r4, #3
 80044bc:	4614      	mov	r4, r2
 80044be:	461d      	mov	r5, r3
 80044c0:	4643      	mov	r3, r8
 80044c2:	18e3      	adds	r3, r4, r3
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	464b      	mov	r3, r9
 80044c8:	eb45 0303 	adc.w	r3, r5, r3
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044da:	4629      	mov	r1, r5
 80044dc:	028b      	lsls	r3, r1, #10
 80044de:	4621      	mov	r1, r4
 80044e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e4:	4621      	mov	r1, r4
 80044e6:	028a      	lsls	r2, r1, #10
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044f0:	2200      	movs	r2, #0
 80044f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044fa:	f7fb fed9 	bl	80002b0 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4613      	mov	r3, r2
 8004504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004508:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <HAL_RCC_GetSysClockFreq+0x458>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	0f1b      	lsrs	r3, r3, #28
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800451a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800451e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004526:	e003      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCC_GetSysClockFreq+0x45c>)
 800452a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800452e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004534:	4618      	mov	r0, r3
 8004536:	37b8      	adds	r7, #184	; 0xb8
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	00f42400 	.word	0x00f42400

08004548 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e28d      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8083 	beq.w	800466e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004568:	4b94      	ldr	r3, [pc, #592]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 030c 	and.w	r3, r3, #12
 8004570:	2b04      	cmp	r3, #4
 8004572:	d019      	beq.n	80045a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004574:	4b91      	ldr	r3, [pc, #580]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800457c:	2b08      	cmp	r3, #8
 800457e:	d106      	bne.n	800458e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004580:	4b8e      	ldr	r3, [pc, #568]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458c:	d00c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b8b      	ldr	r3, [pc, #556]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d112      	bne.n	80045c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b88      	ldr	r3, [pc, #544]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b84      	ldr	r3, [pc, #528]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x124>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e25a      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x90>
 80045ca:	4b7c      	ldr	r3, [pc, #496]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7b      	ldr	r2, [pc, #492]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xcc>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0xb4>
 80045e2:	4b76      	ldr	r3, [pc, #472]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a75      	ldr	r2, [pc, #468]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b73      	ldr	r3, [pc, #460]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a72      	ldr	r2, [pc, #456]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xcc>
 80045fc:	4b6f      	ldr	r3, [pc, #444]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a6e      	ldr	r2, [pc, #440]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b6c      	ldr	r3, [pc, #432]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a6b      	ldr	r2, [pc, #428]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fc fd8e 	bl	800113c <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004624:	f7fc fd8a 	bl	800113c <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e21f      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	4b61      	ldr	r3, [pc, #388]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xdc>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fc fd7a 	bl	800113c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800464c:	f7fc fd76 	bl	800113c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e20b      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	4b57      	ldr	r3, [pc, #348]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x104>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d06f      	beq.n	800475a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800467a:	4b50      	ldr	r3, [pc, #320]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b00      	cmp	r3, #0
 8004684:	d017      	beq.n	80046b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004686:	4b4d      	ldr	r3, [pc, #308]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800468e:	2b08      	cmp	r3, #8
 8004690:	d105      	bne.n	800469e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004692:	4b4a      	ldr	r3, [pc, #296]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469e:	4b47      	ldr	r3, [pc, #284]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d11c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046aa:	4b44      	ldr	r3, [pc, #272]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d116      	bne.n	80046e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b6:	4b41      	ldr	r3, [pc, #260]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <HAL_RCC_OscConfig+0x186>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d001      	beq.n	80046ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e1d3      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ce:	4b3b      	ldr	r3, [pc, #236]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4937      	ldr	r1, [pc, #220]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e2:	e03a      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d020      	beq.n	800472e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ec:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <HAL_RCC_OscConfig+0x278>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f2:	f7fc fd23 	bl	800113c <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046fa:	f7fc fd1f 	bl	800113c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e1b4      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470c:	4b2b      	ldr	r3, [pc, #172]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004718:	4b28      	ldr	r3, [pc, #160]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4925      	ldr	r1, [pc, #148]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004728:	4313      	orrs	r3, r2
 800472a:	600b      	str	r3, [r1, #0]
 800472c:	e015      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_RCC_OscConfig+0x278>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fc fd02 	bl	800113c <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800473c:	f7fc fcfe 	bl	800113c <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e193      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474e:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d036      	beq.n	80047d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d016      	beq.n	800479c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <HAL_RCC_OscConfig+0x27c>)
 8004770:	2201      	movs	r2, #1
 8004772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fc fce2 	bl	800113c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800477c:	f7fc fcde 	bl	800113c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e173      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCC_OscConfig+0x274>)
 8004790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x234>
 800479a:	e01b      	b.n	80047d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <HAL_RCC_OscConfig+0x27c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fc fccb 	bl	800113c <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a8:	e00e      	b.n	80047c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047aa:	f7fc fcc7 	bl	800113c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d907      	bls.n	80047c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e15c      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
 80047bc:	40023800 	.word	0x40023800
 80047c0:	42470000 	.word	0x42470000
 80047c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c8:	4b8a      	ldr	r3, [pc, #552]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ea      	bne.n	80047aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8097 	beq.w	8004910 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b83      	ldr	r3, [pc, #524]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10f      	bne.n	8004812 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	4b7f      	ldr	r3, [pc, #508]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a7e      	ldr	r2, [pc, #504]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
 8004802:	4b7c      	ldr	r3, [pc, #496]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480e:	2301      	movs	r3, #1
 8004810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004812:	4b79      	ldr	r3, [pc, #484]	; (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d118      	bne.n	8004850 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800481e:	4b76      	ldr	r3, [pc, #472]	; (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a75      	ldr	r2, [pc, #468]	; (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482a:	f7fc fc87 	bl	800113c <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004832:	f7fc fc83 	bl	800113c <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e118      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004844:	4b6c      	ldr	r3, [pc, #432]	; (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d106      	bne.n	8004866 <HAL_RCC_OscConfig+0x31e>
 8004858:	4b66      	ldr	r3, [pc, #408]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485c:	4a65      	ldr	r2, [pc, #404]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6713      	str	r3, [r2, #112]	; 0x70
 8004864:	e01c      	b.n	80048a0 <HAL_RCC_OscConfig+0x358>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b05      	cmp	r3, #5
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x340>
 800486e:	4b61      	ldr	r3, [pc, #388]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4a60      	ldr	r2, [pc, #384]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	6713      	str	r3, [r2, #112]	; 0x70
 800487a:	4b5e      	ldr	r3, [pc, #376]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	4a5d      	ldr	r2, [pc, #372]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	6713      	str	r3, [r2, #112]	; 0x70
 8004886:	e00b      	b.n	80048a0 <HAL_RCC_OscConfig+0x358>
 8004888:	4b5a      	ldr	r3, [pc, #360]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488c:	4a59      	ldr	r2, [pc, #356]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	6713      	str	r3, [r2, #112]	; 0x70
 8004894:	4b57      	ldr	r3, [pc, #348]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	4a56      	ldr	r2, [pc, #344]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800489a:	f023 0304 	bic.w	r3, r3, #4
 800489e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fc fc48 	bl	800113c <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fc fc44 	bl	800113c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e0d7      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c6:	4b4b      	ldr	r3, [pc, #300]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ee      	beq.n	80048b0 <HAL_RCC_OscConfig+0x368>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fc fc32 	bl	800113c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048da:	e00a      	b.n	80048f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048dc:	f7fc fc2e 	bl	800113c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e0c1      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f2:	4b40      	ldr	r3, [pc, #256]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1ee      	bne.n	80048dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d105      	bne.n	8004910 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004904:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	4a3a      	ldr	r2, [pc, #232]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800490a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80ad 	beq.w	8004a74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800491a:	4b36      	ldr	r3, [pc, #216]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b08      	cmp	r3, #8
 8004924:	d060      	beq.n	80049e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d145      	bne.n	80049ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b33      	ldr	r3, [pc, #204]	; (80049fc <HAL_RCC_OscConfig+0x4b4>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fc fc02 	bl	800113c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493c:	f7fc fbfe 	bl	800113c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e093      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69da      	ldr	r2, [r3, #28]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	019b      	lsls	r3, r3, #6
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	3b01      	subs	r3, #1
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	071b      	lsls	r3, r3, #28
 8004986:	491b      	ldr	r1, [pc, #108]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498c:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <HAL_RCC_OscConfig+0x4b4>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fc fbd3 	bl	800113c <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499a:	f7fc fbcf 	bl	800113c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e064      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ac:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x452>
 80049b8:	e05c      	b.n	8004a74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b10      	ldr	r3, [pc, #64]	; (80049fc <HAL_RCC_OscConfig+0x4b4>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fc fbbc 	bl	800113c <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fc fbb8 	bl	800113c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e04d      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x480>
 80049e6:	e045      	b.n	8004a74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e040      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40007000 	.word	0x40007000
 80049fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a00:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <HAL_RCC_OscConfig+0x538>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d030      	beq.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d129      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d122      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d119      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d10f      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800

08004a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e041      	b.n	8004b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc f886 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 fa96 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d001      	beq.n	8004b3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e04e      	b.n	8004bda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a23      	ldr	r2, [pc, #140]	; (8004be8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d022      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x80>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b66:	d01d      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x80>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1f      	ldr	r2, [pc, #124]	; (8004bec <HAL_TIM_Base_Start_IT+0xc8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d018      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x80>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x80>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1c      	ldr	r2, [pc, #112]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00e      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x80>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x80>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <HAL_TIM_Base_Start_IT+0xd8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x80>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a18      	ldr	r2, [pc, #96]	; (8004c00 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d111      	bne.n	8004bc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d010      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc6:	e007      	b.n	8004bd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40000c00 	.word	0x40000c00
 8004bf8:	40010400 	.word	0x40010400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40001800 	.word	0x40001800

08004c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d122      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d11b      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0202 	mvn.w	r2, #2
 8004c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9b5 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9a7 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f9b8 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d122      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d11b      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0204 	mvn.w	r2, #4
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f98b 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f97d 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f98e 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d122      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d11b      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0208 	mvn.w	r2, #8
 8004cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2204      	movs	r2, #4
 8004cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f961 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e005      	b.n	8004d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f953 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f964 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d122      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d11b      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0210 	mvn.w	r2, #16
 8004d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2208      	movs	r2, #8
 8004d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f937 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004d48:	e005      	b.n	8004d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f929 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f93a 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d10e      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d107      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0201 	mvn.w	r2, #1
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fb fe72 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d10e      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da0:	2b80      	cmp	r3, #128	; 0x80
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fae0 	bl	8005374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbe:	2b40      	cmp	r3, #64	; 0x40
 8004dc0:	d10e      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f8ff 	bl	8004fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d10e      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0220 	mvn.w	r2, #32
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 faaa 	bl	8005360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIM_ConfigClockSource+0x1c>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e0b4      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x186>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e68:	d03e      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6e:	f200 8087 	bhi.w	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e76:	f000 8086 	beq.w	8004f86 <HAL_TIM_ConfigClockSource+0x172>
 8004e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7e:	d87f      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b70      	cmp	r3, #112	; 0x70
 8004e82:	d01a      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0xa6>
 8004e84:	2b70      	cmp	r3, #112	; 0x70
 8004e86:	d87b      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d050      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x11a>
 8004e8c:	2b60      	cmp	r3, #96	; 0x60
 8004e8e:	d877      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b50      	cmp	r3, #80	; 0x50
 8004e92:	d03c      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0xfa>
 8004e94:	2b50      	cmp	r3, #80	; 0x50
 8004e96:	d873      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d058      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0x13a>
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d86f      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b30      	cmp	r3, #48	; 0x30
 8004ea2:	d064      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15a>
 8004ea4:	2b30      	cmp	r3, #48	; 0x30
 8004ea6:	d86b      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d060      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15a>
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d867      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d05c      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15a>
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d05a      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15a>
 8004eb8:	e062      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6899      	ldr	r1, [r3, #8]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f000 f9ad 	bl	8005228 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	609a      	str	r2, [r3, #8]
      break;
 8004ee6:	e04f      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6899      	ldr	r1, [r3, #8]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f000 f996 	bl	8005228 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0a:	609a      	str	r2, [r3, #8]
      break;
 8004f0c:	e03c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6859      	ldr	r1, [r3, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f000 f90a 	bl	8005134 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2150      	movs	r1, #80	; 0x50
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f963 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f2c:	e02c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6859      	ldr	r1, [r3, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f000 f929 	bl	8005192 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2160      	movs	r1, #96	; 0x60
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f953 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f4c:	e01c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6859      	ldr	r1, [r3, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f000 f8ea 	bl	8005134 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2140      	movs	r1, #64	; 0x40
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f943 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f6c:	e00c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f000 f93a 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f7e:	e003      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      break;
 8004f84:	e000      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a40      	ldr	r2, [pc, #256]	; (8005108 <TIM_Base_SetConfig+0x114>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005012:	d00f      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a3d      	ldr	r2, [pc, #244]	; (800510c <TIM_Base_SetConfig+0x118>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3c      	ldr	r2, [pc, #240]	; (8005110 <TIM_Base_SetConfig+0x11c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a3b      	ldr	r2, [pc, #236]	; (8005114 <TIM_Base_SetConfig+0x120>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a3a      	ldr	r2, [pc, #232]	; (8005118 <TIM_Base_SetConfig+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2f      	ldr	r2, [pc, #188]	; (8005108 <TIM_Base_SetConfig+0x114>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d02b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d027      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2c      	ldr	r2, [pc, #176]	; (800510c <TIM_Base_SetConfig+0x118>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d023      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2b      	ldr	r2, [pc, #172]	; (8005110 <TIM_Base_SetConfig+0x11c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01f      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <TIM_Base_SetConfig+0x120>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a29      	ldr	r2, [pc, #164]	; (8005118 <TIM_Base_SetConfig+0x124>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d017      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a28      	ldr	r2, [pc, #160]	; (800511c <TIM_Base_SetConfig+0x128>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a27      	ldr	r2, [pc, #156]	; (8005120 <TIM_Base_SetConfig+0x12c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00f      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a26      	ldr	r2, [pc, #152]	; (8005124 <TIM_Base_SetConfig+0x130>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a25      	ldr	r2, [pc, #148]	; (8005128 <TIM_Base_SetConfig+0x134>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d007      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a24      	ldr	r2, [pc, #144]	; (800512c <TIM_Base_SetConfig+0x138>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d003      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a23      	ldr	r2, [pc, #140]	; (8005130 <TIM_Base_SetConfig+0x13c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <TIM_Base_SetConfig+0x114>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0xf8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a0c      	ldr	r2, [pc, #48]	; (8005118 <TIM_Base_SetConfig+0x124>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d103      	bne.n	80050f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	615a      	str	r2, [r3, #20]
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40010400 	.word	0x40010400
 800511c:	40014000 	.word	0x40014000
 8005120:	40014400 	.word	0x40014400
 8005124:	40014800 	.word	0x40014800
 8005128:	40001800 	.word	0x40001800
 800512c:	40001c00 	.word	0x40001c00
 8005130:	40002000 	.word	0x40002000

08005134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f023 0201 	bic.w	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800515e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 030a 	bic.w	r3, r3, #10
 8005170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005192:	b480      	push	{r7}
 8005194:	b087      	sub	sp, #28
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f023 0210 	bic.w	r2, r3, #16
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	031b      	lsls	r3, r3, #12
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	f043 0307 	orr.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	431a      	orrs	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800527c:	2302      	movs	r3, #2
 800527e:	e05a      	b.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a21      	ldr	r2, [pc, #132]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d022      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d01d      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a18      	ldr	r2, [pc, #96]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a15      	ldr	r2, [pc, #84]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10c      	bne.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40010000 	.word	0x40010000
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40010400 	.word	0x40010400
 8005358:	40014000 	.word	0x40014000
 800535c:	40001800 	.word	0x40001800

08005360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e03f      	b.n	800541a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fb fc2a 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2224      	movs	r2, #36	; 0x24
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fe43 	bl	8006058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695a      	ldr	r2, [r3, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b08a      	sub	sp, #40	; 0x28
 8005426:	af02      	add	r7, sp, #8
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b20      	cmp	r3, #32
 8005440:	d17c      	bne.n	800553c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_UART_Transmit+0x2c>
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e075      	b.n	800553e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_UART_Transmit+0x3e>
 800545c:	2302      	movs	r3, #2
 800545e:	e06e      	b.n	800553e <HAL_UART_Transmit+0x11c>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2221      	movs	r2, #33	; 0x21
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005476:	f7fb fe61 	bl	800113c <HAL_GetTick>
 800547a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	88fa      	ldrh	r2, [r7, #6]
 8005486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005490:	d108      	bne.n	80054a4 <HAL_UART_Transmit+0x82>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d104      	bne.n	80054a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	e003      	b.n	80054ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054b4:	e02a      	b.n	800550c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2200      	movs	r2, #0
 80054be:	2180      	movs	r1, #128	; 0x80
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 fb83 	bl	8005bcc <UART_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e036      	b.n	800553e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10b      	bne.n	80054ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	3302      	adds	r3, #2
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	e007      	b.n	80054fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	781a      	ldrb	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	3301      	adds	r3, #1
 80054fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1cf      	bne.n	80054b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2200      	movs	r2, #0
 800551e:	2140      	movs	r1, #64	; 0x40
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 fb53 	bl	8005bcc <UART_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e006      	b.n	800553e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e000      	b.n	800553e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800553c:	2302      	movs	r3, #2
  }
}
 800553e:	4618      	mov	r0, r3
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	4613      	mov	r3, r2
 8005552:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b20      	cmp	r3, #32
 800555e:	d130      	bne.n	80055c2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_UART_Transmit_IT+0x26>
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e029      	b.n	80055c4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_UART_Transmit_IT+0x38>
 800557a:	2302      	movs	r3, #2
 800557c:	e022      	b.n	80055c4 <HAL_UART_Transmit_IT+0x7e>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	88fa      	ldrh	r2, [r7, #6]
 8005590:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	88fa      	ldrh	r2, [r7, #6]
 8005596:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2221      	movs	r2, #33	; 0x21
 80055a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
  }
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08c      	sub	sp, #48	; 0x30
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d152      	bne.n	8005690 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e04b      	b.n	8005692 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8005604:	2302      	movs	r3, #2
 8005606:	e044      	b.n	8005692 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	461a      	mov	r2, r3
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fb43 	bl	8005ca8 <UART_Start_Receive_IT>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800562c:	2b00      	cmp	r3, #0
 800562e:	d12c      	bne.n	800568a <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	2b01      	cmp	r3, #1
 8005636:	d125      	bne.n	8005684 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	617b      	str	r3, [r7, #20]
   return(result);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f043 0310 	orr.w	r3, r3, #16
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800566e:	627a      	str	r2, [r7, #36]	; 0x24
 8005670:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6a39      	ldr	r1, [r7, #32]
 8005674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	61fb      	str	r3, [r7, #28]
   return(result);
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8005682:	e002      	b.n	800568a <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800568a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800568e:	e000      	b.n	8005692 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	3730      	adds	r7, #48	; 0x30
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b0ba      	sub	sp, #232	; 0xe8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10f      	bne.n	8005702 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_UART_IRQHandler+0x66>
 80056ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fbf1 	bl	8005ee2 <UART_Receive_IT>
      return;
 8005700:	e256      	b.n	8005bb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80de 	beq.w	80058c8 <HAL_UART_IRQHandler+0x22c>
 800570c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80d1 	beq.w	80058c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_UART_IRQHandler+0xae>
 8005732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f043 0201 	orr.w	r2, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <HAL_UART_IRQHandler+0xd2>
 8005756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f043 0202 	orr.w	r2, r3, #2
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <HAL_UART_IRQHandler+0xf6>
 800577a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f043 0204 	orr.w	r2, r3, #4
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d011      	beq.n	80057c2 <HAL_UART_IRQHandler+0x126>
 800579e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d105      	bne.n	80057b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f043 0208 	orr.w	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 81ed 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d008      	beq.n	80057ea <HAL_UART_IRQHandler+0x14e>
 80057d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fb7c 	bl	8005ee2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	bf0c      	ite	eq
 80057f8:	2301      	moveq	r3, #1
 80057fa:	2300      	movne	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <HAL_UART_IRQHandler+0x17a>
 800580e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d04f      	beq.n	80058b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fa84 	bl	8005d24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d141      	bne.n	80058ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3314      	adds	r3, #20
 8005830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3314      	adds	r3, #20
 8005852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005856:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800585a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800586e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1d9      	bne.n	800582a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	2b00      	cmp	r3, #0
 800587c:	d013      	beq.n	80058a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4a7d      	ldr	r2, [pc, #500]	; (8005a78 <HAL_UART_IRQHandler+0x3dc>)
 8005884:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	4618      	mov	r0, r3
 800588c:	f7fb fdd8 	bl	8001440 <HAL_DMA_Abort_IT>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d016      	beq.n	80058c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058a0:	4610      	mov	r0, r2
 80058a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	e00e      	b.n	80058c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f002 fce4 	bl	8008274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	e00a      	b.n	80058c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f002 fce0 	bl	8008274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b4:	e006      	b.n	80058c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f002 fcdc 	bl	8008274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058c2:	e170      	b.n	8005ba6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	bf00      	nop
    return;
 80058c6:	e16e      	b.n	8005ba6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	f040 814a 	bne.w	8005b66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 8143 	beq.w	8005b66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 813c 	beq.w	8005b66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058ee:	2300      	movs	r3, #0
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590e:	2b40      	cmp	r3, #64	; 0x40
 8005910:	f040 80b4 	bne.w	8005a7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005920:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8140 	beq.w	8005baa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800592e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005932:	429a      	cmp	r2, r3
 8005934:	f080 8139 	bcs.w	8005baa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800593e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594a:	f000 8088 	beq.w	8005a5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800596c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800597a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800597e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005986:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1d9      	bne.n	800594e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3314      	adds	r3, #20
 80059a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e1      	bne.n	800599a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3314      	adds	r3, #20
 80059dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e3      	bne.n	80059d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2e:	f023 0310 	bic.w	r3, r3, #16
 8005a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a40:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e3      	bne.n	8005a1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fb fc81 	bl	8001360 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f002 fc0b 	bl	800828a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a74:	e099      	b.n	8005baa <HAL_UART_IRQHandler+0x50e>
 8005a76:	bf00      	nop
 8005a78:	08005deb 	.word	0x08005deb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 808b 	beq.w	8005bae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8086 	beq.w	8005bae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ac6:	647a      	str	r2, [r7, #68]	; 0x44
 8005ac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e3      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3314      	adds	r3, #20
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3314      	adds	r3, #20
 8005afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005afe:	633a      	str	r2, [r7, #48]	; 0x30
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e3      	bne.n	8005ada <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0310 	bic.w	r3, r3, #16
 8005b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	330c      	adds	r3, #12
 8005b40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b44:	61fa      	str	r2, [r7, #28]
 8005b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	69b9      	ldr	r1, [r7, #24]
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	617b      	str	r3, [r7, #20]
   return(result);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e3      	bne.n	8005b20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f002 fb93 	bl	800828a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b64:	e023      	b.n	8005bae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <HAL_UART_IRQHandler+0x4ea>
 8005b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f947 	bl	8005e12 <UART_Transmit_IT>
    return;
 8005b84:	e014      	b.n	8005bb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00e      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x514>
 8005b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f987 	bl	8005eb2 <UART_EndTransmit_IT>
    return;
 8005ba4:	e004      	b.n	8005bb0 <HAL_UART_IRQHandler+0x514>
    return;
 8005ba6:	bf00      	nop
 8005ba8:	e002      	b.n	8005bb0 <HAL_UART_IRQHandler+0x514>
      return;
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <HAL_UART_IRQHandler+0x514>
      return;
 8005bae:	bf00      	nop
  }
}
 8005bb0:	37e8      	adds	r7, #232	; 0xe8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop

08005bb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b090      	sub	sp, #64	; 0x40
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bdc:	e050      	b.n	8005c80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d04c      	beq.n	8005c80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005bec:	f7fb faa6 	bl	800113c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d241      	bcs.n	8005c80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c1c:	637a      	str	r2, [r7, #52]	; 0x34
 8005c1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e5      	bne.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f023 0301 	bic.w	r3, r3, #1
 8005c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c50:	623a      	str	r2, [r7, #32]
 8005c52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	69f9      	ldr	r1, [r7, #28]
 8005c56:	6a3a      	ldr	r2, [r7, #32]
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e5      	bne.n	8005c30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e00f      	b.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d09f      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3740      	adds	r7, #64	; 0x40
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	88fa      	ldrh	r2, [r7, #6]
 8005cc0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2222      	movs	r2, #34	; 0x22
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0201 	orr.w	r2, r2, #1
 8005d04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0220 	orr.w	r2, r2, #32
 8005d14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b095      	sub	sp, #84	; 0x54
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d4c:	643a      	str	r2, [r7, #64]	; 0x40
 8005d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3314      	adds	r3, #20
 8005d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f023 0301 	bic.w	r3, r3, #1
 8005d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3314      	adds	r3, #20
 8005d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e5      	bne.n	8005d60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d119      	bne.n	8005dd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f023 0310 	bic.w	r3, r3, #16
 8005db2:	647b      	str	r3, [r7, #68]	; 0x44
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dbc:	61ba      	str	r2, [r7, #24]
 8005dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6979      	ldr	r1, [r7, #20]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dde:	bf00      	nop
 8005de0:	3754      	adds	r7, #84	; 0x54
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f002 fa35 	bl	8008274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b21      	cmp	r3, #33	; 0x21
 8005e24:	d13e      	bne.n	8005ea4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2e:	d114      	bne.n	8005e5a <UART_Transmit_IT+0x48>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d110      	bne.n	8005e5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	1c9a      	adds	r2, r3, #2
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	621a      	str	r2, [r3, #32]
 8005e58:	e008      	b.n	8005e6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	1c59      	adds	r1, r3, #1
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6211      	str	r1, [r2, #32]
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10f      	bne.n	8005ea0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e000      	b.n	8005ea6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f002 f9e8 	bl	80082a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b08c      	sub	sp, #48	; 0x30
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b22      	cmp	r3, #34	; 0x22
 8005ef4:	f040 80ab 	bne.w	800604e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d117      	bne.n	8005f32 <UART_Receive_IT+0x50>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d113      	bne.n	8005f32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	1c9a      	adds	r2, r3, #2
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f30:	e026      	b.n	8005f80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f44:	d007      	beq.n	8005f56 <UART_Receive_IT+0x74>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10a      	bne.n	8005f64 <UART_Receive_IT+0x82>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	e008      	b.n	8005f76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d15a      	bne.n	800604a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0220 	bic.w	r2, r2, #32
 8005fa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695a      	ldr	r2, [r3, #20]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d135      	bne.n	8006040 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f023 0310 	bic.w	r3, r3, #16
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffa:	623a      	str	r2, [r7, #32]
 8005ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	69f9      	ldr	r1, [r7, #28]
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	61bb      	str	r3, [r7, #24]
   return(result);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e5      	bne.n	8005fda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b10      	cmp	r3, #16
 800601a:	d10a      	bne.n	8006032 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f002 f926 	bl	800828a <HAL_UARTEx_RxEventCallback>
 800603e:	e002      	b.n	8006046 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fdb9 	bl	8005bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	e002      	b.n	8006050 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	e000      	b.n	8006050 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800604e:	2302      	movs	r3, #2
  }
}
 8006050:	4618      	mov	r0, r3
 8006052:	3730      	adds	r7, #48	; 0x30
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800605c:	b0c0      	sub	sp, #256	; 0x100
 800605e:	af00      	add	r7, sp, #0
 8006060:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006074:	68d9      	ldr	r1, [r3, #12]
 8006076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	ea40 0301 	orr.w	r3, r0, r1
 8006080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	431a      	orrs	r2, r3
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	431a      	orrs	r2, r3
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060b0:	f021 010c 	bic.w	r1, r1, #12
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060be:	430b      	orrs	r3, r1
 80060c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d2:	6999      	ldr	r1, [r3, #24]
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	ea40 0301 	orr.w	r3, r0, r1
 80060de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b8f      	ldr	r3, [pc, #572]	; (8006324 <UART_SetConfig+0x2cc>)
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d005      	beq.n	80060f8 <UART_SetConfig+0xa0>
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b8d      	ldr	r3, [pc, #564]	; (8006328 <UART_SetConfig+0x2d0>)
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d104      	bne.n	8006102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060f8:	f7fd fc86 	bl	8003a08 <HAL_RCC_GetPCLK2Freq>
 80060fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006100:	e003      	b.n	800610a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006102:	f7fd fc6d 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8006106:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006114:	f040 810c 	bne.w	8006330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800611c:	2200      	movs	r2, #0
 800611e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006122:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800612a:	4622      	mov	r2, r4
 800612c:	462b      	mov	r3, r5
 800612e:	1891      	adds	r1, r2, r2
 8006130:	65b9      	str	r1, [r7, #88]	; 0x58
 8006132:	415b      	adcs	r3, r3
 8006134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800613a:	4621      	mov	r1, r4
 800613c:	eb12 0801 	adds.w	r8, r2, r1
 8006140:	4629      	mov	r1, r5
 8006142:	eb43 0901 	adc.w	r9, r3, r1
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800615a:	4690      	mov	r8, r2
 800615c:	4699      	mov	r9, r3
 800615e:	4623      	mov	r3, r4
 8006160:	eb18 0303 	adds.w	r3, r8, r3
 8006164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006168:	462b      	mov	r3, r5
 800616a:	eb49 0303 	adc.w	r3, r9, r3
 800616e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800617e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006186:	460b      	mov	r3, r1
 8006188:	18db      	adds	r3, r3, r3
 800618a:	653b      	str	r3, [r7, #80]	; 0x50
 800618c:	4613      	mov	r3, r2
 800618e:	eb42 0303 	adc.w	r3, r2, r3
 8006192:	657b      	str	r3, [r7, #84]	; 0x54
 8006194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800619c:	f7fa f888 	bl	80002b0 <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4b61      	ldr	r3, [pc, #388]	; (800632c <UART_SetConfig+0x2d4>)
 80061a6:	fba3 2302 	umull	r2, r3, r3, r2
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	011c      	lsls	r4, r3, #4
 80061ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061c0:	4642      	mov	r2, r8
 80061c2:	464b      	mov	r3, r9
 80061c4:	1891      	adds	r1, r2, r2
 80061c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80061c8:	415b      	adcs	r3, r3
 80061ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061d0:	4641      	mov	r1, r8
 80061d2:	eb12 0a01 	adds.w	sl, r2, r1
 80061d6:	4649      	mov	r1, r9
 80061d8:	eb43 0b01 	adc.w	fp, r3, r1
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061f0:	4692      	mov	sl, r2
 80061f2:	469b      	mov	fp, r3
 80061f4:	4643      	mov	r3, r8
 80061f6:	eb1a 0303 	adds.w	r3, sl, r3
 80061fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061fe:	464b      	mov	r3, r9
 8006200:	eb4b 0303 	adc.w	r3, fp, r3
 8006204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006214:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800621c:	460b      	mov	r3, r1
 800621e:	18db      	adds	r3, r3, r3
 8006220:	643b      	str	r3, [r7, #64]	; 0x40
 8006222:	4613      	mov	r3, r2
 8006224:	eb42 0303 	adc.w	r3, r2, r3
 8006228:	647b      	str	r3, [r7, #68]	; 0x44
 800622a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800622e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006232:	f7fa f83d 	bl	80002b0 <__aeabi_uldivmod>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4611      	mov	r1, r2
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <UART_SetConfig+0x2d4>)
 800623e:	fba3 2301 	umull	r2, r3, r3, r1
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	2264      	movs	r2, #100	; 0x64
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	1acb      	subs	r3, r1, r3
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006252:	4b36      	ldr	r3, [pc, #216]	; (800632c <UART_SetConfig+0x2d4>)
 8006254:	fba3 2302 	umull	r2, r3, r3, r2
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006260:	441c      	add	r4, r3
 8006262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006266:	2200      	movs	r2, #0
 8006268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800626c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	1891      	adds	r1, r2, r2
 800627a:	63b9      	str	r1, [r7, #56]	; 0x38
 800627c:	415b      	adcs	r3, r3
 800627e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006284:	4641      	mov	r1, r8
 8006286:	1851      	adds	r1, r2, r1
 8006288:	6339      	str	r1, [r7, #48]	; 0x30
 800628a:	4649      	mov	r1, r9
 800628c:	414b      	adcs	r3, r1
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800629c:	4659      	mov	r1, fp
 800629e:	00cb      	lsls	r3, r1, #3
 80062a0:	4651      	mov	r1, sl
 80062a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a6:	4651      	mov	r1, sl
 80062a8:	00ca      	lsls	r2, r1, #3
 80062aa:	4610      	mov	r0, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	4642      	mov	r2, r8
 80062b2:	189b      	adds	r3, r3, r2
 80062b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062b8:	464b      	mov	r3, r9
 80062ba:	460a      	mov	r2, r1
 80062bc:	eb42 0303 	adc.w	r3, r2, r3
 80062c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062d8:	460b      	mov	r3, r1
 80062da:	18db      	adds	r3, r3, r3
 80062dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80062de:	4613      	mov	r3, r2
 80062e0:	eb42 0303 	adc.w	r3, r2, r3
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062ee:	f7f9 ffdf 	bl	80002b0 <__aeabi_uldivmod>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4b0d      	ldr	r3, [pc, #52]	; (800632c <UART_SetConfig+0x2d4>)
 80062f8:	fba3 1302 	umull	r1, r3, r3, r2
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	2164      	movs	r1, #100	; 0x64
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	3332      	adds	r3, #50	; 0x32
 800630a:	4a08      	ldr	r2, [pc, #32]	; (800632c <UART_SetConfig+0x2d4>)
 800630c:	fba2 2303 	umull	r2, r3, r2, r3
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	f003 0207 	and.w	r2, r3, #7
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4422      	add	r2, r4
 800631e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006320:	e106      	b.n	8006530 <UART_SetConfig+0x4d8>
 8006322:	bf00      	nop
 8006324:	40011000 	.word	0x40011000
 8006328:	40011400 	.word	0x40011400
 800632c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006334:	2200      	movs	r2, #0
 8006336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800633a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800633e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006342:	4642      	mov	r2, r8
 8006344:	464b      	mov	r3, r9
 8006346:	1891      	adds	r1, r2, r2
 8006348:	6239      	str	r1, [r7, #32]
 800634a:	415b      	adcs	r3, r3
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
 800634e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006352:	4641      	mov	r1, r8
 8006354:	1854      	adds	r4, r2, r1
 8006356:	4649      	mov	r1, r9
 8006358:	eb43 0501 	adc.w	r5, r3, r1
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	00eb      	lsls	r3, r5, #3
 8006366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800636a:	00e2      	lsls	r2, r4, #3
 800636c:	4614      	mov	r4, r2
 800636e:	461d      	mov	r5, r3
 8006370:	4643      	mov	r3, r8
 8006372:	18e3      	adds	r3, r4, r3
 8006374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006378:	464b      	mov	r3, r9
 800637a:	eb45 0303 	adc.w	r3, r5, r3
 800637e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800638e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800639e:	4629      	mov	r1, r5
 80063a0:	008b      	lsls	r3, r1, #2
 80063a2:	4621      	mov	r1, r4
 80063a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063a8:	4621      	mov	r1, r4
 80063aa:	008a      	lsls	r2, r1, #2
 80063ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063b0:	f7f9 ff7e 	bl	80002b0 <__aeabi_uldivmod>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4b60      	ldr	r3, [pc, #384]	; (800653c <UART_SetConfig+0x4e4>)
 80063ba:	fba3 2302 	umull	r2, r3, r3, r2
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	011c      	lsls	r4, r3, #4
 80063c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063d4:	4642      	mov	r2, r8
 80063d6:	464b      	mov	r3, r9
 80063d8:	1891      	adds	r1, r2, r2
 80063da:	61b9      	str	r1, [r7, #24]
 80063dc:	415b      	adcs	r3, r3
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063e4:	4641      	mov	r1, r8
 80063e6:	1851      	adds	r1, r2, r1
 80063e8:	6139      	str	r1, [r7, #16]
 80063ea:	4649      	mov	r1, r9
 80063ec:	414b      	adcs	r3, r1
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063fc:	4659      	mov	r1, fp
 80063fe:	00cb      	lsls	r3, r1, #3
 8006400:	4651      	mov	r1, sl
 8006402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006406:	4651      	mov	r1, sl
 8006408:	00ca      	lsls	r2, r1, #3
 800640a:	4610      	mov	r0, r2
 800640c:	4619      	mov	r1, r3
 800640e:	4603      	mov	r3, r0
 8006410:	4642      	mov	r2, r8
 8006412:	189b      	adds	r3, r3, r2
 8006414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006418:	464b      	mov	r3, r9
 800641a:	460a      	mov	r2, r1
 800641c:	eb42 0303 	adc.w	r3, r2, r3
 8006420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	67bb      	str	r3, [r7, #120]	; 0x78
 800642e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800643c:	4649      	mov	r1, r9
 800643e:	008b      	lsls	r3, r1, #2
 8006440:	4641      	mov	r1, r8
 8006442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006446:	4641      	mov	r1, r8
 8006448:	008a      	lsls	r2, r1, #2
 800644a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800644e:	f7f9 ff2f 	bl	80002b0 <__aeabi_uldivmod>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4611      	mov	r1, r2
 8006458:	4b38      	ldr	r3, [pc, #224]	; (800653c <UART_SetConfig+0x4e4>)
 800645a:	fba3 2301 	umull	r2, r3, r3, r1
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	2264      	movs	r2, #100	; 0x64
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	1acb      	subs	r3, r1, r3
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	3332      	adds	r3, #50	; 0x32
 800646c:	4a33      	ldr	r2, [pc, #204]	; (800653c <UART_SetConfig+0x4e4>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006478:	441c      	add	r4, r3
 800647a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800647e:	2200      	movs	r2, #0
 8006480:	673b      	str	r3, [r7, #112]	; 0x70
 8006482:	677a      	str	r2, [r7, #116]	; 0x74
 8006484:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	1891      	adds	r1, r2, r2
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	415b      	adcs	r3, r3
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006498:	4641      	mov	r1, r8
 800649a:	1851      	adds	r1, r2, r1
 800649c:	6039      	str	r1, [r7, #0]
 800649e:	4649      	mov	r1, r9
 80064a0:	414b      	adcs	r3, r1
 80064a2:	607b      	str	r3, [r7, #4]
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064b0:	4659      	mov	r1, fp
 80064b2:	00cb      	lsls	r3, r1, #3
 80064b4:	4651      	mov	r1, sl
 80064b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ba:	4651      	mov	r1, sl
 80064bc:	00ca      	lsls	r2, r1, #3
 80064be:	4610      	mov	r0, r2
 80064c0:	4619      	mov	r1, r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	4642      	mov	r2, r8
 80064c6:	189b      	adds	r3, r3, r2
 80064c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064ca:	464b      	mov	r3, r9
 80064cc:	460a      	mov	r2, r1
 80064ce:	eb42 0303 	adc.w	r3, r2, r3
 80064d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	663b      	str	r3, [r7, #96]	; 0x60
 80064de:	667a      	str	r2, [r7, #100]	; 0x64
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064ec:	4649      	mov	r1, r9
 80064ee:	008b      	lsls	r3, r1, #2
 80064f0:	4641      	mov	r1, r8
 80064f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f6:	4641      	mov	r1, r8
 80064f8:	008a      	lsls	r2, r1, #2
 80064fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064fe:	f7f9 fed7 	bl	80002b0 <__aeabi_uldivmod>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4b0d      	ldr	r3, [pc, #52]	; (800653c <UART_SetConfig+0x4e4>)
 8006508:	fba3 1302 	umull	r1, r3, r3, r2
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	2164      	movs	r1, #100	; 0x64
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	3332      	adds	r3, #50	; 0x32
 800651a:	4a08      	ldr	r2, [pc, #32]	; (800653c <UART_SetConfig+0x4e4>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	f003 020f 	and.w	r2, r3, #15
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4422      	add	r2, r4
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	bf00      	nop
 8006532:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006536:	46bd      	mov	sp, r7
 8006538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800653c:	51eb851f 	.word	0x51eb851f

08006540 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006540:	b084      	sub	sp, #16
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	f107 001c 	add.w	r0, r7, #28
 800654e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	2b01      	cmp	r3, #1
 8006556:	d122      	bne.n	800659e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800656c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006582:	2b01      	cmp	r3, #1
 8006584:	d105      	bne.n	8006592 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa9c 	bl	8006ad0 <USB_CoreReset>
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]
 800659c:	e01a      	b.n	80065d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa90 	bl	8006ad0 <USB_CoreReset>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	639a      	str	r2, [r3, #56]	; 0x38
 80065c6:	e005      	b.n	80065d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d10b      	bne.n	80065f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f043 0206 	orr.w	r2, r3, #6
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065fe:	b004      	add	sp, #16
 8006600:	4770      	bx	lr

08006602 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f023 0201 	bic.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d115      	bne.n	8006672 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006652:	2001      	movs	r0, #1
 8006654:	f7fa fd7e 	bl	8001154 <HAL_Delay>
      ms++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3301      	adds	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fa28 	bl	8006ab4 <USB_GetMode>
 8006664:	4603      	mov	r3, r0
 8006666:	2b01      	cmp	r3, #1
 8006668:	d01e      	beq.n	80066a8 <USB_SetCurrentMode+0x84>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b31      	cmp	r3, #49	; 0x31
 800666e:	d9f0      	bls.n	8006652 <USB_SetCurrentMode+0x2e>
 8006670:	e01a      	b.n	80066a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d115      	bne.n	80066a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006684:	2001      	movs	r0, #1
 8006686:	f7fa fd65 	bl	8001154 <HAL_Delay>
      ms++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fa0f 	bl	8006ab4 <USB_GetMode>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <USB_SetCurrentMode+0x84>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b31      	cmp	r3, #49	; 0x31
 80066a0:	d9f0      	bls.n	8006684 <USB_SetCurrentMode+0x60>
 80066a2:	e001      	b.n	80066a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e005      	b.n	80066b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b32      	cmp	r3, #50	; 0x32
 80066ac:	d101      	bne.n	80066b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066bc:	b084      	sub	sp, #16
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	e009      	b.n	80066f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3340      	adds	r3, #64	; 0x40
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3301      	adds	r3, #1
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	2b0e      	cmp	r3, #14
 80066f4:	d9f2      	bls.n	80066dc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d11c      	bne.n	8006736 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800670a:	f043 0302 	orr.w	r3, r3, #2
 800670e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e005      	b.n	8006742 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006748:	461a      	mov	r2, r3
 800674a:	2300      	movs	r3, #0
 800674c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	4619      	mov	r1, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675c:	461a      	mov	r2, r3
 800675e:	680b      	ldr	r3, [r1, #0]
 8006760:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	2b01      	cmp	r3, #1
 8006766:	d10c      	bne.n	8006782 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800676e:	2100      	movs	r1, #0
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f965 	bl	8006a40 <USB_SetDevSpeed>
 8006776:	e008      	b.n	800678a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006778:	2101      	movs	r1, #1
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f960 	bl	8006a40 <USB_SetDevSpeed>
 8006780:	e003      	b.n	800678a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006782:	2103      	movs	r1, #3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f95b 	bl	8006a40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800678a:	2110      	movs	r1, #16
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8f3 	bl	8006978 <USB_FlushTxFifo>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f91f 	bl	80069e0 <USB_FlushRxFifo>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	461a      	mov	r2, r3
 80067b4:	2300      	movs	r3, #0
 80067b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	461a      	mov	r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	e043      	b.n	800685e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ec:	d118      	bne.n	8006820 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	461a      	mov	r2, r3
 8006802:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	e013      	b.n	8006832 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	461a      	mov	r2, r3
 8006818:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e008      	b.n	8006832 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	461a      	mov	r2, r3
 800682e:	2300      	movs	r3, #0
 8006830:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	461a      	mov	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006850:	461a      	mov	r2, r3
 8006852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006856:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	3301      	adds	r3, #1
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	429a      	cmp	r2, r3
 8006864:	d3b7      	bcc.n	80067d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006866:	2300      	movs	r3, #0
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	e043      	b.n	80068f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800687e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006882:	d118      	bne.n	80068b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	461a      	mov	r2, r3
 8006898:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e013      	b.n	80068c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	461a      	mov	r2, r3
 80068ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	e008      	b.n	80068c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	461a      	mov	r2, r3
 80068c4:	2300      	movs	r3, #0
 80068c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	461a      	mov	r2, r3
 80068d6:	2300      	movs	r3, #0
 80068d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	461a      	mov	r2, r3
 80068e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	3301      	adds	r3, #1
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d3b7      	bcc.n	800686c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800690a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800690e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800691c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f043 0210 	orr.w	r2, r3, #16
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699a      	ldr	r2, [r3, #24]
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <USB_DevInit+0x2b8>)
 8006936:	4313      	orrs	r3, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800693c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f043 0208 	orr.w	r2, r3, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d107      	bne.n	8006964 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800695c:	f043 0304 	orr.w	r3, r3, #4
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006970:	b004      	add	sp, #16
 8006972:	4770      	bx	lr
 8006974:	803c3800 	.word	0x803c3800

08006978 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a13      	ldr	r2, [pc, #76]	; (80069dc <USB_FlushTxFifo+0x64>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d901      	bls.n	8006998 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e01b      	b.n	80069d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	daf2      	bge.n	8006986 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	019b      	lsls	r3, r3, #6
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a08      	ldr	r2, [pc, #32]	; (80069dc <USB_FlushTxFifo+0x64>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e006      	b.n	80069d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d0f0      	beq.n	80069b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	00030d40 	.word	0x00030d40

080069e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a11      	ldr	r2, [pc, #68]	; (8006a3c <USB_FlushRxFifo+0x5c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e018      	b.n	8006a30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	daf2      	bge.n	80069ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2210      	movs	r2, #16
 8006a0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3301      	adds	r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <USB_FlushRxFifo+0x5c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d901      	bls.n	8006a22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e006      	b.n	8006a30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b10      	cmp	r3, #16
 8006a2c:	d0f0      	beq.n	8006a10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	00030d40 	.word	0x00030d40

08006a40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	68f9      	ldr	r1, [r7, #12]
 8006a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a60:	4313      	orrs	r3, r2
 8006a62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b085      	sub	sp, #20
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a8c:	f023 0303 	bic.w	r3, r3, #3
 8006a90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aa0:	f043 0302 	orr.w	r3, r3, #2
 8006aa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <USB_CoreReset+0x64>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d901      	bls.n	8006aee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e01b      	b.n	8006b26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	daf2      	bge.n	8006adc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f043 0201 	orr.w	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <USB_CoreReset+0x64>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d901      	bls.n	8006b18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e006      	b.n	8006b26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d0f0      	beq.n	8006b06 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	00030d40 	.word	0x00030d40

08006b38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b4a:	2b84      	cmp	r3, #132	; 0x84
 8006b4c:	d005      	beq.n	8006b5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006b4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	3303      	adds	r3, #3
 8006b58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006b6c:	f000 fb08 	bl	8007180 <vTaskStartScheduler>
  
  return osOK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b78:	b089      	sub	sp, #36	; 0x24
 8006b7a:	af04      	add	r7, sp, #16
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d020      	beq.n	8006bca <osThreadCreate+0x54>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01c      	beq.n	8006bca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685c      	ldr	r4, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691e      	ldr	r6, [r3, #16]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff ffc8 	bl	8006b38 <makeFreeRtosPriority>
 8006ba8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bb2:	9202      	str	r2, [sp, #8]
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	9100      	str	r1, [sp, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	4632      	mov	r2, r6
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 f8ed 	bl	8006d9e <xTaskCreateStatic>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e01c      	b.n	8006c04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685c      	ldr	r4, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bd6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff ffaa 	bl	8006b38 <makeFreeRtosPriority>
 8006be4:	4602      	mov	r2, r0
 8006be6:	f107 030c 	add.w	r3, r7, #12
 8006bea:	9301      	str	r3, [sp, #4]
 8006bec:	9200      	str	r2, [sp, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	4632      	mov	r2, r6
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f000 f92f 	bl	8006e58 <xTaskCreate>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d001      	beq.n	8006c04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006c04:	68fb      	ldr	r3, [r7, #12]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <osDelay+0x16>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e000      	b.n	8006c26 <osDelay+0x18>
 8006c24:	2301      	movs	r3, #1
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fa76 	bl	8007118 <vTaskDelay>
  
  return osOK;
 8006c2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f103 0208 	add.w	r2, r3, #8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f103 0208 	add.w	r2, r3, #8
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f103 0208 	add.w	r2, r3, #8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	601a      	str	r2, [r3, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cee:	d103      	bne.n	8006cf8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	e00c      	b.n	8006d12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	e002      	b.n	8006d06 <vListInsert+0x2e>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d2f6      	bcs.n	8006d00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
}
 8006d3e:	bf00      	nop
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6892      	ldr	r2, [r2, #8]
 8006d60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6852      	ldr	r2, [r2, #4]
 8006d6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d103      	bne.n	8006d7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	1e5a      	subs	r2, r3, #1
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b08e      	sub	sp, #56	; 0x38
 8006da2:	af04      	add	r7, sp, #16
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006dc4:	bf00      	nop
 8006dc6:	e7fe      	b.n	8006dc6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <xTaskCreateStatic+0x46>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	61fb      	str	r3, [r7, #28]
}
 8006de0:	bf00      	nop
 8006de2:	e7fe      	b.n	8006de2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006de4:	23b0      	movs	r3, #176	; 0xb0
 8006de6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2bb0      	cmp	r3, #176	; 0xb0
 8006dec:	d00a      	beq.n	8006e04 <xTaskCreateStatic+0x66>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	61bb      	str	r3, [r7, #24]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01e      	beq.n	8006e4a <xTaskCreateStatic+0xac>
 8006e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01b      	beq.n	8006e4a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e24:	2300      	movs	r3, #0
 8006e26:	9303      	str	r3, [sp, #12]
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	9302      	str	r3, [sp, #8]
 8006e2c:	f107 0314 	add.w	r3, r7, #20
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f851 	bl	8006ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e44:	f000 f8fa 	bl	800703c <prvAddNewTaskToReadyList>
 8006e48:	e001      	b.n	8006e4e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e4e:	697b      	ldr	r3, [r7, #20]
	}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3728      	adds	r7, #40	; 0x28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08c      	sub	sp, #48	; 0x30
 8006e5c:	af04      	add	r7, sp, #16
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	4613      	mov	r3, r2
 8006e66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 ff23 	bl	8007cb8 <pvPortMalloc>
 8006e72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00e      	beq.n	8006e98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e7a:	20b0      	movs	r0, #176	; 0xb0
 8006e7c:	f000 ff1c 	bl	8007cb8 <pvPortMalloc>
 8006e80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8006e8e:	e005      	b.n	8006e9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e90:	6978      	ldr	r0, [r7, #20]
 8006e92:	f000 ffdd 	bl	8007e50 <vPortFree>
 8006e96:	e001      	b.n	8006e9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d017      	beq.n	8006ed2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006eaa:	88fa      	ldrh	r2, [r7, #6]
 8006eac:	2300      	movs	r3, #0
 8006eae:	9303      	str	r3, [sp, #12]
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	9302      	str	r3, [sp, #8]
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	68b9      	ldr	r1, [r7, #8]
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f80f 	bl	8006ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ec6:	69f8      	ldr	r0, [r7, #28]
 8006ec8:	f000 f8b8 	bl	800703c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	61bb      	str	r3, [r7, #24]
 8006ed0:	e002      	b.n	8006ed8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ed8:	69bb      	ldr	r3, [r7, #24]
	}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b088      	sub	sp, #32
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	461a      	mov	r2, r3
 8006efc:	21a5      	movs	r1, #165	; 0xa5
 8006efe:	f001 fde8 	bl	8008ad2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	f023 0307 	bic.w	r3, r3, #7
 8006f1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	617b      	str	r3, [r7, #20]
}
 8006f38:	bf00      	nop
 8006f3a:	e7fe      	b.n	8006f3a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01f      	beq.n	8006f88 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61fb      	str	r3, [r7, #28]
 8006f4c:	e012      	b.n	8006f74 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	7819      	ldrb	r1, [r3, #0]
 8006f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3334      	adds	r3, #52	; 0x34
 8006f5e:	460a      	mov	r2, r1
 8006f60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d006      	beq.n	8006f7c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	3301      	adds	r3, #1
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	2b0f      	cmp	r3, #15
 8006f78:	d9e9      	bls.n	8006f4e <prvInitialiseNewTask+0x6a>
 8006f7a:	e000      	b.n	8006f7e <prvInitialiseNewTask+0x9a>
			{
				break;
 8006f7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f86:	e003      	b.n	8006f90 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	2b06      	cmp	r3, #6
 8006f94:	d901      	bls.n	8006f9a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f96:	2306      	movs	r3, #6
 8006f98:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fa4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	2200      	movs	r2, #0
 8006faa:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fe60 	bl	8006c76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	3318      	adds	r3, #24
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff fe5b 	bl	8006c76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	f1c3 0207 	rsb	r2, r3, #7
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	2200      	movs	r2, #0
 8006fda:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	335c      	adds	r3, #92	; 0x5c
 8006ff0:	224c      	movs	r2, #76	; 0x4c
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 fd6c 	bl	8008ad2 <memset>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	4a0c      	ldr	r2, [pc, #48]	; (8007030 <prvInitialiseNewTask+0x14c>)
 8006ffe:	661a      	str	r2, [r3, #96]	; 0x60
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	4a0c      	ldr	r2, [pc, #48]	; (8007034 <prvInitialiseNewTask+0x150>)
 8007004:	665a      	str	r2, [r3, #100]	; 0x64
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	4a0b      	ldr	r2, [pc, #44]	; (8007038 <prvInitialiseNewTask+0x154>)
 800700a:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	69b8      	ldr	r0, [r7, #24]
 8007012:	f000 fc41 	bl	8007898 <pxPortInitialiseStack>
 8007016:	4602      	mov	r2, r0
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007026:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007028:	bf00      	nop
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20004c88 	.word	0x20004c88
 8007034:	20004cf0 	.word	0x20004cf0
 8007038:	20004d58 	.word	0x20004d58

0800703c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007044:	f000 fd56 	bl	8007af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007048:	4b2c      	ldr	r3, [pc, #176]	; (80070fc <prvAddNewTaskToReadyList+0xc0>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3301      	adds	r3, #1
 800704e:	4a2b      	ldr	r2, [pc, #172]	; (80070fc <prvAddNewTaskToReadyList+0xc0>)
 8007050:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007052:	4b2b      	ldr	r3, [pc, #172]	; (8007100 <prvAddNewTaskToReadyList+0xc4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d109      	bne.n	800706e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800705a:	4a29      	ldr	r2, [pc, #164]	; (8007100 <prvAddNewTaskToReadyList+0xc4>)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007060:	4b26      	ldr	r3, [pc, #152]	; (80070fc <prvAddNewTaskToReadyList+0xc0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d110      	bne.n	800708a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007068:	f000 faee 	bl	8007648 <prvInitialiseTaskLists>
 800706c:	e00d      	b.n	800708a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800706e:	4b25      	ldr	r3, [pc, #148]	; (8007104 <prvAddNewTaskToReadyList+0xc8>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007076:	4b22      	ldr	r3, [pc, #136]	; (8007100 <prvAddNewTaskToReadyList+0xc4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	429a      	cmp	r2, r3
 8007082:	d802      	bhi.n	800708a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007084:	4a1e      	ldr	r2, [pc, #120]	; (8007100 <prvAddNewTaskToReadyList+0xc4>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800708a:	4b1f      	ldr	r3, [pc, #124]	; (8007108 <prvAddNewTaskToReadyList+0xcc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3301      	adds	r3, #1
 8007090:	4a1d      	ldr	r2, [pc, #116]	; (8007108 <prvAddNewTaskToReadyList+0xcc>)
 8007092:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007094:	4b1c      	ldr	r3, [pc, #112]	; (8007108 <prvAddNewTaskToReadyList+0xcc>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	2201      	movs	r2, #1
 80070a2:	409a      	lsls	r2, r3
 80070a4:	4b19      	ldr	r3, [pc, #100]	; (800710c <prvAddNewTaskToReadyList+0xd0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	4a18      	ldr	r2, [pc, #96]	; (800710c <prvAddNewTaskToReadyList+0xd0>)
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b2:	4613      	mov	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4a15      	ldr	r2, [pc, #84]	; (8007110 <prvAddNewTaskToReadyList+0xd4>)
 80070bc:	441a      	add	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4619      	mov	r1, r3
 80070c4:	4610      	mov	r0, r2
 80070c6:	f7ff fde3 	bl	8006c90 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070ca:	f000 fd43 	bl	8007b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070ce:	4b0d      	ldr	r3, [pc, #52]	; (8007104 <prvAddNewTaskToReadyList+0xc8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00e      	beq.n	80070f4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070d6:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <prvAddNewTaskToReadyList+0xc4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d207      	bcs.n	80070f4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070e4:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <prvAddNewTaskToReadyList+0xd8>)
 80070e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20000ad8 	.word	0x20000ad8
 8007100:	200009d8 	.word	0x200009d8
 8007104:	20000ae4 	.word	0x20000ae4
 8007108:	20000af4 	.word	0x20000af4
 800710c:	20000ae0 	.word	0x20000ae0
 8007110:	200009dc 	.word	0x200009dc
 8007114:	e000ed04 	.word	0xe000ed04

08007118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d017      	beq.n	800715a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800712a:	4b13      	ldr	r3, [pc, #76]	; (8007178 <vTaskDelay+0x60>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <vTaskDelay+0x30>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	60bb      	str	r3, [r7, #8]
}
 8007144:	bf00      	nop
 8007146:	e7fe      	b.n	8007146 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007148:	f000 f886 	bl	8007258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800714c:	2100      	movs	r1, #0
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fb3c 	bl	80077cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007154:	f000 f88e 	bl	8007274 <xTaskResumeAll>
 8007158:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d107      	bne.n	8007170 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007160:	4b06      	ldr	r3, [pc, #24]	; (800717c <vTaskDelay+0x64>)
 8007162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007170:	bf00      	nop
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000b00 	.word	0x20000b00
 800717c:	e000ed04 	.word	0xe000ed04

08007180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	; 0x28
 8007184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007186:	2300      	movs	r3, #0
 8007188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800718e:	463a      	mov	r2, r7
 8007190:	1d39      	adds	r1, r7, #4
 8007192:	f107 0308 	add.w	r3, r7, #8
 8007196:	4618      	mov	r0, r3
 8007198:	f7f9 fa08 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	9202      	str	r2, [sp, #8]
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	2300      	movs	r3, #0
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	2300      	movs	r3, #0
 80071ac:	460a      	mov	r2, r1
 80071ae:	4922      	ldr	r1, [pc, #136]	; (8007238 <vTaskStartScheduler+0xb8>)
 80071b0:	4822      	ldr	r0, [pc, #136]	; (800723c <vTaskStartScheduler+0xbc>)
 80071b2:	f7ff fdf4 	bl	8006d9e <xTaskCreateStatic>
 80071b6:	4603      	mov	r3, r0
 80071b8:	4a21      	ldr	r2, [pc, #132]	; (8007240 <vTaskStartScheduler+0xc0>)
 80071ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071bc:	4b20      	ldr	r3, [pc, #128]	; (8007240 <vTaskStartScheduler+0xc0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071c4:	2301      	movs	r3, #1
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e001      	b.n	80071ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d11d      	bne.n	8007210 <vTaskStartScheduler+0x90>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	613b      	str	r3, [r7, #16]
}
 80071e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071e8:	4b16      	ldr	r3, [pc, #88]	; (8007244 <vTaskStartScheduler+0xc4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	335c      	adds	r3, #92	; 0x5c
 80071ee:	4a16      	ldr	r2, [pc, #88]	; (8007248 <vTaskStartScheduler+0xc8>)
 80071f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071f2:	4b16      	ldr	r3, [pc, #88]	; (800724c <vTaskStartScheduler+0xcc>)
 80071f4:	f04f 32ff 	mov.w	r2, #4294967295
 80071f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071fa:	4b15      	ldr	r3, [pc, #84]	; (8007250 <vTaskStartScheduler+0xd0>)
 80071fc:	2201      	movs	r2, #1
 80071fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007200:	4b14      	ldr	r3, [pc, #80]	; (8007254 <vTaskStartScheduler+0xd4>)
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007206:	f7f9 fc0f 	bl	8000a28 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800720a:	f000 fbd1 	bl	80079b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800720e:	e00e      	b.n	800722e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007216:	d10a      	bne.n	800722e <vTaskStartScheduler+0xae>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	60fb      	str	r3, [r7, #12]
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <vTaskStartScheduler+0xac>
}
 800722e:	bf00      	nop
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	080096d4 	.word	0x080096d4
 800723c:	08007619 	.word	0x08007619
 8007240:	20000afc 	.word	0x20000afc
 8007244:	200009d8 	.word	0x200009d8
 8007248:	200000c4 	.word	0x200000c4
 800724c:	20000af8 	.word	0x20000af8
 8007250:	20000ae4 	.word	0x20000ae4
 8007254:	20000adc 	.word	0x20000adc

08007258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <vTaskSuspendAll+0x18>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3301      	adds	r3, #1
 8007262:	4a03      	ldr	r2, [pc, #12]	; (8007270 <vTaskSuspendAll+0x18>)
 8007264:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007266:	bf00      	nop
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	20000b00 	.word	0x20000b00

08007274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800727e:	2300      	movs	r3, #0
 8007280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007282:	4b41      	ldr	r3, [pc, #260]	; (8007388 <xTaskResumeAll+0x114>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	603b      	str	r3, [r7, #0]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072a0:	f000 fc28 	bl	8007af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072a4:	4b38      	ldr	r3, [pc, #224]	; (8007388 <xTaskResumeAll+0x114>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	4a37      	ldr	r2, [pc, #220]	; (8007388 <xTaskResumeAll+0x114>)
 80072ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ae:	4b36      	ldr	r3, [pc, #216]	; (8007388 <xTaskResumeAll+0x114>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d161      	bne.n	800737a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072b6:	4b35      	ldr	r3, [pc, #212]	; (800738c <xTaskResumeAll+0x118>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d05d      	beq.n	800737a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072be:	e02e      	b.n	800731e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c0:	4b33      	ldr	r3, [pc, #204]	; (8007390 <xTaskResumeAll+0x11c>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3318      	adds	r3, #24
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fd3c 	bl	8006d4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3304      	adds	r3, #4
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff fd37 	bl	8006d4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	2201      	movs	r2, #1
 80072e2:	409a      	lsls	r2, r3
 80072e4:	4b2b      	ldr	r3, [pc, #172]	; (8007394 <xTaskResumeAll+0x120>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	4a2a      	ldr	r2, [pc, #168]	; (8007394 <xTaskResumeAll+0x120>)
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4a27      	ldr	r2, [pc, #156]	; (8007398 <xTaskResumeAll+0x124>)
 80072fc:	441a      	add	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3304      	adds	r3, #4
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f7ff fcc3 	bl	8006c90 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730e:	4b23      	ldr	r3, [pc, #140]	; (800739c <xTaskResumeAll+0x128>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	429a      	cmp	r2, r3
 8007316:	d302      	bcc.n	800731e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007318:	4b21      	ldr	r3, [pc, #132]	; (80073a0 <xTaskResumeAll+0x12c>)
 800731a:	2201      	movs	r2, #1
 800731c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800731e:	4b1c      	ldr	r3, [pc, #112]	; (8007390 <xTaskResumeAll+0x11c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1cc      	bne.n	80072c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800732c:	f000 fa2e 	bl	800778c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007330:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <xTaskResumeAll+0x130>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d010      	beq.n	800735e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800733c:	f000 f836 	bl	80073ac <xTaskIncrementTick>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007346:	4b16      	ldr	r3, [pc, #88]	; (80073a0 <xTaskResumeAll+0x12c>)
 8007348:	2201      	movs	r2, #1
 800734a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3b01      	subs	r3, #1
 8007350:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f1      	bne.n	800733c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007358:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <xTaskResumeAll+0x130>)
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800735e:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <xTaskResumeAll+0x12c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d009      	beq.n	800737a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007366:	2301      	movs	r3, #1
 8007368:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800736a:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <xTaskResumeAll+0x134>)
 800736c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800737a:	f000 fbeb 	bl	8007b54 <vPortExitCritical>

	return xAlreadyYielded;
 800737e:	68bb      	ldr	r3, [r7, #8]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20000b00 	.word	0x20000b00
 800738c:	20000ad8 	.word	0x20000ad8
 8007390:	20000a98 	.word	0x20000a98
 8007394:	20000ae0 	.word	0x20000ae0
 8007398:	200009dc 	.word	0x200009dc
 800739c:	200009d8 	.word	0x200009d8
 80073a0:	20000aec 	.word	0x20000aec
 80073a4:	20000ae8 	.word	0x20000ae8
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b6:	4b4e      	ldr	r3, [pc, #312]	; (80074f0 <xTaskIncrementTick+0x144>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 808e 	bne.w	80074dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073c0:	4b4c      	ldr	r3, [pc, #304]	; (80074f4 <xTaskIncrementTick+0x148>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073c8:	4a4a      	ldr	r2, [pc, #296]	; (80074f4 <xTaskIncrementTick+0x148>)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d120      	bne.n	8007416 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80073d4:	4b48      	ldr	r3, [pc, #288]	; (80074f8 <xTaskIncrementTick+0x14c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	603b      	str	r3, [r7, #0]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <xTaskIncrementTick+0x46>
 80073f4:	4b40      	ldr	r3, [pc, #256]	; (80074f8 <xTaskIncrementTick+0x14c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	4b40      	ldr	r3, [pc, #256]	; (80074fc <xTaskIncrementTick+0x150>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a3e      	ldr	r2, [pc, #248]	; (80074f8 <xTaskIncrementTick+0x14c>)
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	4a3e      	ldr	r2, [pc, #248]	; (80074fc <xTaskIncrementTick+0x150>)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	4b3d      	ldr	r3, [pc, #244]	; (8007500 <xTaskIncrementTick+0x154>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3301      	adds	r3, #1
 800740e:	4a3c      	ldr	r2, [pc, #240]	; (8007500 <xTaskIncrementTick+0x154>)
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	f000 f9bb 	bl	800778c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007416:	4b3b      	ldr	r3, [pc, #236]	; (8007504 <xTaskIncrementTick+0x158>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	429a      	cmp	r2, r3
 800741e:	d348      	bcc.n	80074b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007420:	4b35      	ldr	r3, [pc, #212]	; (80074f8 <xTaskIncrementTick+0x14c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742a:	4b36      	ldr	r3, [pc, #216]	; (8007504 <xTaskIncrementTick+0x158>)
 800742c:	f04f 32ff 	mov.w	r2, #4294967295
 8007430:	601a      	str	r2, [r3, #0]
					break;
 8007432:	e03e      	b.n	80074b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007434:	4b30      	ldr	r3, [pc, #192]	; (80074f8 <xTaskIncrementTick+0x14c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	429a      	cmp	r2, r3
 800744a:	d203      	bcs.n	8007454 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800744c:	4a2d      	ldr	r2, [pc, #180]	; (8007504 <xTaskIncrementTick+0x158>)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007452:	e02e      	b.n	80074b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	3304      	adds	r3, #4
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff fc76 	bl	8006d4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	3318      	adds	r3, #24
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff fc6d 	bl	8006d4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	2201      	movs	r2, #1
 8007476:	409a      	lsls	r2, r3
 8007478:	4b23      	ldr	r3, [pc, #140]	; (8007508 <xTaskIncrementTick+0x15c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4313      	orrs	r3, r2
 800747e:	4a22      	ldr	r2, [pc, #136]	; (8007508 <xTaskIncrementTick+0x15c>)
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4a1f      	ldr	r2, [pc, #124]	; (800750c <xTaskIncrementTick+0x160>)
 8007490:	441a      	add	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	3304      	adds	r3, #4
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f7ff fbf9 	bl	8006c90 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a2:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <xTaskIncrementTick+0x164>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d3b9      	bcc.n	8007420 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80074ac:	2301      	movs	r3, #1
 80074ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074b0:	e7b6      	b.n	8007420 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074b2:	4b17      	ldr	r3, [pc, #92]	; (8007510 <xTaskIncrementTick+0x164>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b8:	4914      	ldr	r1, [pc, #80]	; (800750c <xTaskIncrementTick+0x160>)
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	440b      	add	r3, r1
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d901      	bls.n	80074ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80074ca:	2301      	movs	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074ce:	4b11      	ldr	r3, [pc, #68]	; (8007514 <xTaskIncrementTick+0x168>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d007      	beq.n	80074e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80074d6:	2301      	movs	r3, #1
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	e004      	b.n	80074e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80074dc:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <xTaskIncrementTick+0x16c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	4a0d      	ldr	r2, [pc, #52]	; (8007518 <xTaskIncrementTick+0x16c>)
 80074e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80074e6:	697b      	ldr	r3, [r7, #20]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20000b00 	.word	0x20000b00
 80074f4:	20000adc 	.word	0x20000adc
 80074f8:	20000a90 	.word	0x20000a90
 80074fc:	20000a94 	.word	0x20000a94
 8007500:	20000af0 	.word	0x20000af0
 8007504:	20000af8 	.word	0x20000af8
 8007508:	20000ae0 	.word	0x20000ae0
 800750c:	200009dc 	.word	0x200009dc
 8007510:	200009d8 	.word	0x200009d8
 8007514:	20000aec 	.word	0x20000aec
 8007518:	20000ae8 	.word	0x20000ae8

0800751c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007522:	4b35      	ldr	r3, [pc, #212]	; (80075f8 <vTaskSwitchContext+0xdc>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800752a:	4b34      	ldr	r3, [pc, #208]	; (80075fc <vTaskSwitchContext+0xe0>)
 800752c:	2201      	movs	r2, #1
 800752e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007530:	e05d      	b.n	80075ee <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 8007532:	4b32      	ldr	r3, [pc, #200]	; (80075fc <vTaskSwitchContext+0xe0>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007538:	f7f9 fa82 	bl	8000a40 <getRunTimeCounterValue>
 800753c:	4603      	mov	r3, r0
 800753e:	4a30      	ldr	r2, [pc, #192]	; (8007600 <vTaskSwitchContext+0xe4>)
 8007540:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007542:	4b2f      	ldr	r3, [pc, #188]	; (8007600 <vTaskSwitchContext+0xe4>)
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	4b2f      	ldr	r3, [pc, #188]	; (8007604 <vTaskSwitchContext+0xe8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d909      	bls.n	8007562 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800754e:	4b2e      	ldr	r3, [pc, #184]	; (8007608 <vTaskSwitchContext+0xec>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007554:	4a2a      	ldr	r2, [pc, #168]	; (8007600 <vTaskSwitchContext+0xe4>)
 8007556:	6810      	ldr	r0, [r2, #0]
 8007558:	4a2a      	ldr	r2, [pc, #168]	; (8007604 <vTaskSwitchContext+0xe8>)
 800755a:	6812      	ldr	r2, [r2, #0]
 800755c:	1a82      	subs	r2, r0, r2
 800755e:	440a      	add	r2, r1
 8007560:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007562:	4b27      	ldr	r3, [pc, #156]	; (8007600 <vTaskSwitchContext+0xe4>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a27      	ldr	r2, [pc, #156]	; (8007604 <vTaskSwitchContext+0xe8>)
 8007568:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756a:	4b28      	ldr	r3, [pc, #160]	; (800760c <vTaskSwitchContext+0xf0>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	fab3 f383 	clz	r3, r3
 8007576:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	f1c3 031f 	rsb	r3, r3, #31
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	4923      	ldr	r1, [pc, #140]	; (8007610 <vTaskSwitchContext+0xf4>)
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	440b      	add	r3, r1
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <vTaskSwitchContext+0x8e>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	607b      	str	r3, [r7, #4]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <vTaskSwitchContext+0x8c>
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4a16      	ldr	r2, [pc, #88]	; (8007610 <vTaskSwitchContext+0xf4>)
 80075b6:	4413      	add	r3, r2
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	605a      	str	r2, [r3, #4]
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	3308      	adds	r3, #8
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d104      	bne.n	80075da <vTaskSwitchContext+0xbe>
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	605a      	str	r2, [r3, #4]
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	4a09      	ldr	r2, [pc, #36]	; (8007608 <vTaskSwitchContext+0xec>)
 80075e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075e4:	4b08      	ldr	r3, [pc, #32]	; (8007608 <vTaskSwitchContext+0xec>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	335c      	adds	r3, #92	; 0x5c
 80075ea:	4a0a      	ldr	r2, [pc, #40]	; (8007614 <vTaskSwitchContext+0xf8>)
 80075ec:	6013      	str	r3, [r2, #0]
}
 80075ee:	bf00      	nop
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000b00 	.word	0x20000b00
 80075fc:	20000aec 	.word	0x20000aec
 8007600:	20000b08 	.word	0x20000b08
 8007604:	20000b04 	.word	0x20000b04
 8007608:	200009d8 	.word	0x200009d8
 800760c:	20000ae0 	.word	0x20000ae0
 8007610:	200009dc 	.word	0x200009dc
 8007614:	200000c4 	.word	0x200000c4

08007618 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007620:	f000 f852 	bl	80076c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007624:	4b06      	ldr	r3, [pc, #24]	; (8007640 <prvIdleTask+0x28>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d9f9      	bls.n	8007620 <prvIdleTask+0x8>
			{
				taskYIELD();
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <prvIdleTask+0x2c>)
 800762e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800763c:	e7f0      	b.n	8007620 <prvIdleTask+0x8>
 800763e:	bf00      	nop
 8007640:	200009dc 	.word	0x200009dc
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800764e:	2300      	movs	r3, #0
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	e00c      	b.n	800766e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4a12      	ldr	r2, [pc, #72]	; (80076a8 <prvInitialiseTaskLists+0x60>)
 8007660:	4413      	add	r3, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff fae7 	bl	8006c36 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3301      	adds	r3, #1
 800766c:	607b      	str	r3, [r7, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b06      	cmp	r3, #6
 8007672:	d9ef      	bls.n	8007654 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007674:	480d      	ldr	r0, [pc, #52]	; (80076ac <prvInitialiseTaskLists+0x64>)
 8007676:	f7ff fade 	bl	8006c36 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800767a:	480d      	ldr	r0, [pc, #52]	; (80076b0 <prvInitialiseTaskLists+0x68>)
 800767c:	f7ff fadb 	bl	8006c36 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007680:	480c      	ldr	r0, [pc, #48]	; (80076b4 <prvInitialiseTaskLists+0x6c>)
 8007682:	f7ff fad8 	bl	8006c36 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007686:	480c      	ldr	r0, [pc, #48]	; (80076b8 <prvInitialiseTaskLists+0x70>)
 8007688:	f7ff fad5 	bl	8006c36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800768c:	480b      	ldr	r0, [pc, #44]	; (80076bc <prvInitialiseTaskLists+0x74>)
 800768e:	f7ff fad2 	bl	8006c36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007692:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <prvInitialiseTaskLists+0x78>)
 8007694:	4a05      	ldr	r2, [pc, #20]	; (80076ac <prvInitialiseTaskLists+0x64>)
 8007696:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <prvInitialiseTaskLists+0x7c>)
 800769a:	4a05      	ldr	r2, [pc, #20]	; (80076b0 <prvInitialiseTaskLists+0x68>)
 800769c:	601a      	str	r2, [r3, #0]
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	200009dc 	.word	0x200009dc
 80076ac:	20000a68 	.word	0x20000a68
 80076b0:	20000a7c 	.word	0x20000a7c
 80076b4:	20000a98 	.word	0x20000a98
 80076b8:	20000aac 	.word	0x20000aac
 80076bc:	20000ac4 	.word	0x20000ac4
 80076c0:	20000a90 	.word	0x20000a90
 80076c4:	20000a94 	.word	0x20000a94

080076c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076ce:	e019      	b.n	8007704 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076d0:	f000 fa10 	bl	8007af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d4:	4b10      	ldr	r3, [pc, #64]	; (8007718 <prvCheckTasksWaitingTermination+0x50>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3304      	adds	r3, #4
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff fb32 	bl	8006d4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <prvCheckTasksWaitingTermination+0x54>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	4a0b      	ldr	r2, [pc, #44]	; (800771c <prvCheckTasksWaitingTermination+0x54>)
 80076ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <prvCheckTasksWaitingTermination+0x58>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	4a0a      	ldr	r2, [pc, #40]	; (8007720 <prvCheckTasksWaitingTermination+0x58>)
 80076f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076fa:	f000 fa2b 	bl	8007b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f810 	bl	8007724 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007704:	4b06      	ldr	r3, [pc, #24]	; (8007720 <prvCheckTasksWaitingTermination+0x58>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e1      	bne.n	80076d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800770c:	bf00      	nop
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000aac 	.word	0x20000aac
 800771c:	20000ad8 	.word	0x20000ad8
 8007720:	20000ac0 	.word	0x20000ac0

08007724 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	335c      	adds	r3, #92	; 0x5c
 8007730:	4618      	mov	r0, r3
 8007732:	f001 f9e7 	bl	8008b04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800773c:	2b00      	cmp	r3, #0
 800773e:	d108      	bne.n	8007752 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fb83 	bl	8007e50 <vPortFree>
				vPortFree( pxTCB );
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fb80 	bl	8007e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007750:	e018      	b.n	8007784 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8007758:	2b01      	cmp	r3, #1
 800775a:	d103      	bne.n	8007764 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fb77 	bl	8007e50 <vPortFree>
	}
 8007762:	e00f      	b.n	8007784 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800776a:	2b02      	cmp	r3, #2
 800776c:	d00a      	beq.n	8007784 <prvDeleteTCB+0x60>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	60fb      	str	r3, [r7, #12]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <prvDeleteTCB+0x5e>
	}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007792:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <prvResetNextTaskUnblockTime+0x38>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d104      	bne.n	80077a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800779c:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <prvResetNextTaskUnblockTime+0x3c>)
 800779e:	f04f 32ff 	mov.w	r2, #4294967295
 80077a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077a4:	e008      	b.n	80077b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a6:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <prvResetNextTaskUnblockTime+0x38>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	4a04      	ldr	r2, [pc, #16]	; (80077c8 <prvResetNextTaskUnblockTime+0x3c>)
 80077b6:	6013      	str	r3, [r2, #0]
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	20000a90 	.word	0x20000a90
 80077c8:	20000af8 	.word	0x20000af8

080077cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077d6:	4b29      	ldr	r3, [pc, #164]	; (800787c <prvAddCurrentTaskToDelayedList+0xb0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077dc:	4b28      	ldr	r3, [pc, #160]	; (8007880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3304      	adds	r3, #4
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff fab1 	bl	8006d4a <uxListRemove>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10b      	bne.n	8007806 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80077ee:	4b24      	ldr	r3, [pc, #144]	; (8007880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	2201      	movs	r2, #1
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	43da      	mvns	r2, r3
 80077fc:	4b21      	ldr	r3, [pc, #132]	; (8007884 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4013      	ands	r3, r2
 8007802:	4a20      	ldr	r2, [pc, #128]	; (8007884 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007804:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780c:	d10a      	bne.n	8007824 <prvAddCurrentTaskToDelayedList+0x58>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d007      	beq.n	8007824 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007814:	4b1a      	ldr	r3, [pc, #104]	; (8007880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3304      	adds	r3, #4
 800781a:	4619      	mov	r1, r3
 800781c:	481a      	ldr	r0, [pc, #104]	; (8007888 <prvAddCurrentTaskToDelayedList+0xbc>)
 800781e:	f7ff fa37 	bl	8006c90 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007822:	e026      	b.n	8007872 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800782c:	4b14      	ldr	r3, [pc, #80]	; (8007880 <prvAddCurrentTaskToDelayedList+0xb4>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	429a      	cmp	r2, r3
 800783a:	d209      	bcs.n	8007850 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800783c:	4b13      	ldr	r3, [pc, #76]	; (800788c <prvAddCurrentTaskToDelayedList+0xc0>)
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	4b0f      	ldr	r3, [pc, #60]	; (8007880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3304      	adds	r3, #4
 8007846:	4619      	mov	r1, r3
 8007848:	4610      	mov	r0, r2
 800784a:	f7ff fa45 	bl	8006cd8 <vListInsert>
}
 800784e:	e010      	b.n	8007872 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007850:	4b0f      	ldr	r3, [pc, #60]	; (8007890 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3304      	adds	r3, #4
 800785a:	4619      	mov	r1, r3
 800785c:	4610      	mov	r0, r2
 800785e:	f7ff fa3b 	bl	8006cd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007862:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	429a      	cmp	r2, r3
 800786a:	d202      	bcs.n	8007872 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800786c:	4a09      	ldr	r2, [pc, #36]	; (8007894 <prvAddCurrentTaskToDelayedList+0xc8>)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	6013      	str	r3, [r2, #0]
}
 8007872:	bf00      	nop
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000adc 	.word	0x20000adc
 8007880:	200009d8 	.word	0x200009d8
 8007884:	20000ae0 	.word	0x20000ae0
 8007888:	20000ac4 	.word	0x20000ac4
 800788c:	20000a94 	.word	0x20000a94
 8007890:	20000a90 	.word	0x20000a90
 8007894:	20000af8 	.word	0x20000af8

08007898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3b04      	subs	r3, #4
 80078a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3b04      	subs	r3, #4
 80078b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f023 0201 	bic.w	r2, r3, #1
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3b04      	subs	r3, #4
 80078c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078c8:	4a0c      	ldr	r2, [pc, #48]	; (80078fc <pxPortInitialiseStack+0x64>)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3b14      	subs	r3, #20
 80078d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3b04      	subs	r3, #4
 80078de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f06f 0202 	mvn.w	r2, #2
 80078e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3b20      	subs	r3, #32
 80078ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078ee:	68fb      	ldr	r3, [r7, #12]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	08007901 	.word	0x08007901

08007900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800790a:	4b12      	ldr	r3, [pc, #72]	; (8007954 <prvTaskExitError+0x54>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007912:	d00a      	beq.n	800792a <prvTaskExitError+0x2a>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	60fb      	str	r3, [r7, #12]
}
 8007926:	bf00      	nop
 8007928:	e7fe      	b.n	8007928 <prvTaskExitError+0x28>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	60bb      	str	r3, [r7, #8]
}
 800793c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800793e:	bf00      	nop
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0fc      	beq.n	8007940 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	2000000c 	.word	0x2000000c
	...

08007960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007960:	4b07      	ldr	r3, [pc, #28]	; (8007980 <pxCurrentTCBConst2>)
 8007962:	6819      	ldr	r1, [r3, #0]
 8007964:	6808      	ldr	r0, [r1, #0]
 8007966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	f380 8809 	msr	PSP, r0
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f04f 0000 	mov.w	r0, #0
 8007976:	f380 8811 	msr	BASEPRI, r0
 800797a:	4770      	bx	lr
 800797c:	f3af 8000 	nop.w

08007980 <pxCurrentTCBConst2>:
 8007980:	200009d8 	.word	0x200009d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop

08007988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007988:	4808      	ldr	r0, [pc, #32]	; (80079ac <prvPortStartFirstTask+0x24>)
 800798a:	6800      	ldr	r0, [r0, #0]
 800798c:	6800      	ldr	r0, [r0, #0]
 800798e:	f380 8808 	msr	MSP, r0
 8007992:	f04f 0000 	mov.w	r0, #0
 8007996:	f380 8814 	msr	CONTROL, r0
 800799a:	b662      	cpsie	i
 800799c:	b661      	cpsie	f
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	df00      	svc	0
 80079a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079aa:	bf00      	nop
 80079ac:	e000ed08 	.word	0xe000ed08

080079b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079b6:	4b46      	ldr	r3, [pc, #280]	; (8007ad0 <xPortStartScheduler+0x120>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a46      	ldr	r2, [pc, #280]	; (8007ad4 <xPortStartScheduler+0x124>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d10a      	bne.n	80079d6 <xPortStartScheduler+0x26>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	613b      	str	r3, [r7, #16]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079d6:	4b3e      	ldr	r3, [pc, #248]	; (8007ad0 <xPortStartScheduler+0x120>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a3f      	ldr	r2, [pc, #252]	; (8007ad8 <xPortStartScheduler+0x128>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d10a      	bne.n	80079f6 <xPortStartScheduler+0x46>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	60fb      	str	r3, [r7, #12]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079f6:	4b39      	ldr	r3, [pc, #228]	; (8007adc <xPortStartScheduler+0x12c>)
 80079f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	22ff      	movs	r2, #255	; 0xff
 8007a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	4b31      	ldr	r3, [pc, #196]	; (8007ae0 <xPortStartScheduler+0x130>)
 8007a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a1e:	4b31      	ldr	r3, [pc, #196]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a20:	2207      	movs	r2, #7
 8007a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a24:	e009      	b.n	8007a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a26:	4b2f      	ldr	r3, [pc, #188]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	4a2d      	ldr	r2, [pc, #180]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a42:	2b80      	cmp	r3, #128	; 0x80
 8007a44:	d0ef      	beq.n	8007a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a46:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f1c3 0307 	rsb	r3, r3, #7
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d00a      	beq.n	8007a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	60bb      	str	r3, [r7, #8]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a68:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a72:	4b1c      	ldr	r3, [pc, #112]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a86:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a92:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a9e:	f000 f8dd 	bl	8007c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007aa2:	4b12      	ldr	r3, [pc, #72]	; (8007aec <xPortStartScheduler+0x13c>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007aa8:	f000 f8fc 	bl	8007ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007aac:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <xPortStartScheduler+0x140>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a0f      	ldr	r2, [pc, #60]	; (8007af0 <xPortStartScheduler+0x140>)
 8007ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ab8:	f7ff ff66 	bl	8007988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007abc:	f7ff fd2e 	bl	800751c <vTaskSwitchContext>
	prvTaskExitError();
 8007ac0:	f7ff ff1e 	bl	8007900 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	e000ed00 	.word	0xe000ed00
 8007ad4:	410fc271 	.word	0x410fc271
 8007ad8:	410fc270 	.word	0x410fc270
 8007adc:	e000e400 	.word	0xe000e400
 8007ae0:	20000b0c 	.word	0x20000b0c
 8007ae4:	20000b10 	.word	0x20000b10
 8007ae8:	e000ed20 	.word	0xe000ed20
 8007aec:	2000000c 	.word	0x2000000c
 8007af0:	e000ef34 	.word	0xe000ef34

08007af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	607b      	str	r3, [r7, #4]
}
 8007b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <vPortEnterCritical+0x58>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	4a0d      	ldr	r2, [pc, #52]	; (8007b4c <vPortEnterCritical+0x58>)
 8007b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b18:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <vPortEnterCritical+0x58>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d10f      	bne.n	8007b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <vPortEnterCritical+0x5c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	603b      	str	r3, [r7, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <vPortEnterCritical+0x4a>
	}
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	2000000c 	.word	0x2000000c
 8007b50:	e000ed04 	.word	0xe000ed04

08007b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b5a:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <vPortExitCritical+0x24>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	607b      	str	r3, [r7, #4]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	4a09      	ldr	r2, [pc, #36]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b82:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d105      	bne.n	8007b96 <vPortExitCritical+0x42>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	2000000c 	.word	0x2000000c
	...

08007bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bb0:	f3ef 8009 	mrs	r0, PSP
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <pxCurrentTCBConst>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	f01e 0f10 	tst.w	lr, #16
 8007bc0:	bf08      	it	eq
 8007bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	6010      	str	r0, [r2, #0]
 8007bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007bd4:	f380 8811 	msr	BASEPRI, r0
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f7ff fc9c 	bl	800751c <vTaskSwitchContext>
 8007be4:	f04f 0000 	mov.w	r0, #0
 8007be8:	f380 8811 	msr	BASEPRI, r0
 8007bec:	bc09      	pop	{r0, r3}
 8007bee:	6819      	ldr	r1, [r3, #0]
 8007bf0:	6808      	ldr	r0, [r1, #0]
 8007bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf6:	f01e 0f10 	tst.w	lr, #16
 8007bfa:	bf08      	it	eq
 8007bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c00:	f380 8809 	msr	PSP, r0
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	f3af 8000 	nop.w

08007c10 <pxCurrentTCBConst>:
 8007c10:	200009d8 	.word	0x200009d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop

08007c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
}
 8007c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c32:	f7ff fbbb 	bl	80073ac <xTaskIncrementTick>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <SysTick_Handler+0x40>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	2300      	movs	r3, #0
 8007c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f383 8811 	msr	BASEPRI, r3
}
 8007c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <vPortSetupTimerInterrupt+0x34>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c66:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <vPortSetupTimerInterrupt+0x38>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <vPortSetupTimerInterrupt+0x3c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a0a      	ldr	r2, [pc, #40]	; (8007c9c <vPortSetupTimerInterrupt+0x40>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	099b      	lsrs	r3, r3, #6
 8007c78:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <vPortSetupTimerInterrupt+0x44>)
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c7e:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <vPortSetupTimerInterrupt+0x34>)
 8007c80:	2207      	movs	r2, #7
 8007c82:	601a      	str	r2, [r3, #0]
}
 8007c84:	bf00      	nop
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	e000e010 	.word	0xe000e010
 8007c94:	e000e018 	.word	0xe000e018
 8007c98:	20000000 	.word	0x20000000
 8007c9c:	10624dd3 	.word	0x10624dd3
 8007ca0:	e000e014 	.word	0xe000e014

08007ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cb4 <vPortEnableVFP+0x10>
 8007ca8:	6801      	ldr	r1, [r0, #0]
 8007caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cae:	6001      	str	r1, [r0, #0]
 8007cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cb2:	bf00      	nop
 8007cb4:	e000ed88 	.word	0xe000ed88

08007cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08a      	sub	sp, #40	; 0x28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cc4:	f7ff fac8 	bl	8007258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cc8:	4b5b      	ldr	r3, [pc, #364]	; (8007e38 <pvPortMalloc+0x180>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cd0:	f000 f920 	bl	8007f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cd4:	4b59      	ldr	r3, [pc, #356]	; (8007e3c <pvPortMalloc+0x184>)
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f040 8093 	bne.w	8007e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01d      	beq.n	8007d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ce8:	2208      	movs	r2, #8
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4413      	add	r3, r2
 8007cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d014      	beq.n	8007d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f023 0307 	bic.w	r3, r3, #7
 8007d00:	3308      	adds	r3, #8
 8007d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <pvPortMalloc+0x6c>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	617b      	str	r3, [r7, #20]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d06e      	beq.n	8007e08 <pvPortMalloc+0x150>
 8007d2a:	4b45      	ldr	r3, [pc, #276]	; (8007e40 <pvPortMalloc+0x188>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d869      	bhi.n	8007e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d34:	4b43      	ldr	r3, [pc, #268]	; (8007e44 <pvPortMalloc+0x18c>)
 8007d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d38:	4b42      	ldr	r3, [pc, #264]	; (8007e44 <pvPortMalloc+0x18c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d3e:	e004      	b.n	8007d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d903      	bls.n	8007d5c <pvPortMalloc+0xa4>
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f1      	bne.n	8007d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d5c:	4b36      	ldr	r3, [pc, #216]	; (8007e38 <pvPortMalloc+0x180>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d050      	beq.n	8007e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2208      	movs	r2, #8
 8007d6c:	4413      	add	r3, r2
 8007d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	1ad2      	subs	r2, r2, r3
 8007d80:	2308      	movs	r3, #8
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d91f      	bls.n	8007dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <pvPortMalloc+0xf8>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	613b      	str	r3, [r7, #16]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	1ad2      	subs	r2, r2, r3
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dc2:	69b8      	ldr	r0, [r7, #24]
 8007dc4:	f000 f908 	bl	8007fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dc8:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <pvPortMalloc+0x188>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	4a1b      	ldr	r2, [pc, #108]	; (8007e40 <pvPortMalloc+0x188>)
 8007dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	; (8007e40 <pvPortMalloc+0x188>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <pvPortMalloc+0x190>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d203      	bcs.n	8007dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007de2:	4b17      	ldr	r3, [pc, #92]	; (8007e40 <pvPortMalloc+0x188>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <pvPortMalloc+0x190>)
 8007de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <pvPortMalloc+0x184>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <pvPortMalloc+0x194>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	4a11      	ldr	r2, [pc, #68]	; (8007e4c <pvPortMalloc+0x194>)
 8007e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e08:	f7ff fa34 	bl	8007274 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f003 0307 	and.w	r3, r3, #7
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <pvPortMalloc+0x174>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	60fb      	str	r3, [r7, #12]
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <pvPortMalloc+0x172>
	return pvReturn;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3728      	adds	r7, #40	; 0x28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	2000471c 	.word	0x2000471c
 8007e3c:	20004730 	.word	0x20004730
 8007e40:	20004720 	.word	0x20004720
 8007e44:	20004714 	.word	0x20004714
 8007e48:	20004724 	.word	0x20004724
 8007e4c:	20004728 	.word	0x20004728

08007e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04d      	beq.n	8007efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e62:	2308      	movs	r3, #8
 8007e64:	425b      	negs	r3, r3
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <vPortFree+0xb8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10a      	bne.n	8007e94 <vPortFree+0x44>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	60fb      	str	r3, [r7, #12]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <vPortFree+0x62>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	60bb      	str	r3, [r7, #8]
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <vPortFree+0xb8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01e      	beq.n	8007efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d11a      	bne.n	8007efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <vPortFree+0xb8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ed8:	f7ff f9be 	bl	8007258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <vPortFree+0xbc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <vPortFree+0xbc>)
 8007ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eea:	6938      	ldr	r0, [r7, #16]
 8007eec:	f000 f874 	bl	8007fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ef0:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <vPortFree+0xc0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	4a06      	ldr	r2, [pc, #24]	; (8007f10 <vPortFree+0xc0>)
 8007ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007efa:	f7ff f9bb 	bl	8007274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007efe:	bf00      	nop
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20004730 	.word	0x20004730
 8007f0c:	20004720 	.word	0x20004720
 8007f10:	2000472c 	.word	0x2000472c

08007f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f20:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <prvHeapInit+0xac>)
 8007f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00c      	beq.n	8007f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3307      	adds	r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0307 	bic.w	r3, r3, #7
 8007f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <prvHeapInit+0xac>)
 8007f44:	4413      	add	r3, r2
 8007f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f4c:	4a1d      	ldr	r2, [pc, #116]	; (8007fc4 <prvHeapInit+0xb0>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f52:	4b1c      	ldr	r3, [pc, #112]	; (8007fc4 <prvHeapInit+0xb0>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f60:	2208      	movs	r2, #8
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0307 	bic.w	r3, r3, #7
 8007f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a15      	ldr	r2, [pc, #84]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f7e:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f94:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <prvHeapInit+0xb8>)
 8007fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <prvHeapInit+0xbc>)
 8007faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fac:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <prvHeapInit+0xc0>)
 8007fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fb2:	601a      	str	r2, [r3, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	20000b14 	.word	0x20000b14
 8007fc4:	20004714 	.word	0x20004714
 8007fc8:	2000471c 	.word	0x2000471c
 8007fcc:	20004724 	.word	0x20004724
 8007fd0:	20004720 	.word	0x20004720
 8007fd4:	20004730 	.word	0x20004730

08007fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fe0:	4b28      	ldr	r3, [pc, #160]	; (8008084 <prvInsertBlockIntoFreeList+0xac>)
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	e002      	b.n	8007fec <prvInsertBlockIntoFreeList+0x14>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d8f7      	bhi.n	8007fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	429a      	cmp	r2, r3
 8008006:	d108      	bne.n	800801a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	441a      	add	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d118      	bne.n	8008060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <prvInsertBlockIntoFreeList+0xb0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d00d      	beq.n	8008056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	441a      	add	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	e008      	b.n	8008068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008056:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <prvInsertBlockIntoFreeList+0xb0>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	e003      	b.n	8008068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d002      	beq.n	8008076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20004714 	.word	0x20004714
 8008088:	2000471c 	.word	0x2000471c

0800808c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8008094:	1d39      	adds	r1, r7, #4
 8008096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800809a:	2201      	movs	r2, #1
 800809c:	4803      	ldr	r0, [pc, #12]	; (80080ac <__io_putchar+0x20>)
 800809e:	f7fd f9c0 	bl	8005422 <HAL_UART_Transmit>

	return ch;
 80080a2:	687b      	ldr	r3, [r7, #4]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20000430 	.word	0x20000430

080080b0 <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	taskENTER_CRITICAL();
 80080b8:	f7ff fd1c 	bl	8007af4 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	4807      	ldr	r0, [pc, #28]	; (80080dc <vPrintString+0x2c>)
 80080c0:	f000 fcb2 	bl	8008a28 <iprintf>
		fflush( stdout );
 80080c4:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <vPrintString+0x30>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fbd6 	bl	800887c <fflush>
	}
	taskEXIT_CRITICAL();
 80080d0:	f7ff fd40 	bl	8007b54 <vPortExitCritical>
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	08009704 	.word	0x08009704
 80080e0:	200000c4 	.word	0x200000c4

080080e4 <vTask_Alarma>:
		                    "- Jesus    Gonzales               N°SIU e2006\r\n";
//Inicia las tareas de los OA


void vTask_Alarma(void *argument)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]

	char * palabra = "hoala";
 80080ec:	4b05      	ldr	r3, [pc, #20]	; (8008104 <vTask_Alarma+0x20>)
 80080ee:	60fb      	str	r3, [r7, #12]


	while(1)
	{

		i2c_enviar((uint8_t *)palabra,(size_t)4,(uint16_t)0x30);
 80080f0:	2230      	movs	r2, #48	; 0x30
 80080f2:	2104      	movs	r1, #4
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 f84f 	bl	8008198 <i2c_enviar>

		vTaskDelay(1000);
 80080fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080fe:	f7ff f80b 	bl	8007118 <vTaskDelay>
		i2c_enviar((uint8_t *)palabra,(size_t)4,(uint16_t)0x30);
 8008102:	e7f5      	b.n	80080f0 <vTask_Alarma+0xc>
 8008104:	080097bc 	.word	0x080097bc

08008108 <app_init>:




	/* App Initialization */
void app_init( void ){
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af02      	add	r7, sp, #8
		  	vPrintString( pcTextForMain );
 800810e:	4b12      	ldr	r3, [pc, #72]	; (8008158 <app_init+0x50>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff ffcc 	bl	80080b0 <vPrintString>
		    // drivers
		    {
		      eboard_init();
 8008118:	f000 f92c 	bl	8008374 <eboard_init>
		    }

			BaseType_t ret;

			/* Task Alarma thread at priority 2 */
			ret = xTaskCreate(vTask_Alarma, /* Pointer to the function thats implement the task. */
 800811c:	4b0f      	ldr	r3, [pc, #60]	; (800815c <app_init+0x54>)
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	2301      	movs	r3, #1
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	2300      	movs	r3, #0
 8008126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800812a:	490d      	ldr	r1, [pc, #52]	; (8008160 <app_init+0x58>)
 800812c:	480d      	ldr	r0, [pc, #52]	; (8008164 <app_init+0x5c>)
 800812e:	f7fe fe93 	bl	8006e58 <xTaskCreate>
 8008132:	6078      	str	r0, [r7, #4]
			NULL, /* We are not using the task parameter.		*/
			(tskIDLE_PRIORITY + 1UL), /* This task will run at priority 1. 		*/
			&Task_Alarma_Handle); /* We are using a variable as task handle.	*/

			/* Check the task was created successfully. */
			configASSERT(ret == pdPASS);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d00a      	beq.n	8008150 <app_init+0x48>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	603b      	str	r3, [r7, #0]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <app_init+0x46>


			return;
 8008150:	bf00      	nop

}
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20000010 	.word	0x20000010
 800815c:	20004734 	.word	0x20004734
 8008160:	080097c4 	.word	0x080097c4
 8008164:	080080e5 	.word	0x080080e5

08008168 <HAL_I2C_MasterTxCpltCallback>:
 *
 * @param[I2C_HandleTypeDef] Handle del I2C
 *
 * @return Función del tipo void.
 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	flag = true;
 8008170:	4b04      	ldr	r3, [pc, #16]	; (8008184 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8008172:	2201      	movs	r2, #1
 8008174:	701a      	strb	r2, [r3, #0]
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	20000014 	.word	0x20000014

08008188 <i2c_error_callback>:
 *
 * @param[void]
 *
 * @return Función del tipo void.
 */
__weak void i2c_error_callback(void) {
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
	return;
 800818c:	bf00      	nop
}
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <i2c_enviar>:
 * @param[size_t]	size		Tamaño de lo que se quiere transmitir
 * @param[uint16_t] 	address	Dirección I2C
 *
 * @return bool true si es que se envió correctamente
 */
bool i2c_enviar(uint8_t *buffer, size_t size, uint16_t address) {
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	80fb      	strh	r3, [r7, #6]
	if (NULL == buffer)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <i2c_enviar+0x18>
		i2c_error_callback();
 80081ac:	f7ff ffec 	bl	8008188 <i2c_error_callback>
	ENTER_CRITICAL_();
 80081b0:	f7ff fca0 	bl	8007af4 <vPortEnterCritical>
	if (size <= I2C_BUFFER_SIZE && flag == 1 && size > 0) {
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b20      	cmp	r3, #32
 80081b8:	d82e      	bhi.n	8008218 <i2c_enviar+0x80>
 80081ba:	4b1b      	ldr	r3, [pc, #108]	; (8008228 <i2c_enviar+0x90>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d02a      	beq.n	8008218 <i2c_enviar+0x80>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d027      	beq.n	8008218 <i2c_enviar+0x80>
		HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_IT(I2C_HAL_HANDLE_,
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	88f9      	ldrh	r1, [r7, #6]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	4816      	ldr	r0, [pc, #88]	; (800822c <i2c_enviar+0x94>)
 80081d2:	f7f9 fc7b 	bl	8001acc <HAL_I2C_Master_Transmit_IT>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]
				address, buffer, size);
		EXIT_CRITICAL_();
 80081da:	f7ff fcbb 	bl	8007b54 <vPortExitCritical>
		switch (status) {
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d812      	bhi.n	800820a <i2c_enviar+0x72>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <i2c_enviar+0x54>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	080081fd 	.word	0x080081fd
 80081f0:	08008205 	.word	0x08008205
 80081f4:	08008211 	.word	0x08008211
 80081f8:	08008211 	.word	0x08008211
		case HAL_OK:
			flag = false;
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <i2c_enviar+0x90>)
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
			break;
 8008202:	e006      	b.n	8008212 <i2c_enviar+0x7a>
		case HAL_ERROR:
			i2c_error_callback();
 8008204:	f7ff ffc0 	bl	8008188 <i2c_error_callback>
		case HAL_BUSY:
			break;
 8008208:	e002      	b.n	8008210 <i2c_enviar+0x78>
		case HAL_TIMEOUT:
			break;
		default:
			i2c_error_callback();
 800820a:	f7ff ffbd 	bl	8008188 <i2c_error_callback>
			break;
 800820e:	e000      	b.n	8008212 <i2c_enviar+0x7a>
			break;
 8008210:	bf00      	nop
	if (size <= I2C_BUFFER_SIZE && flag == 1 && size > 0) {
 8008212:	bf00      	nop

	} else {
		EXIT_CRITICAL_();
		return false;
	}
	return true;
 8008214:	2301      	movs	r3, #1
 8008216:	e002      	b.n	800821e <i2c_enviar+0x86>
		EXIT_CRITICAL_();
 8008218:	f7ff fc9c 	bl	8007b54 <vPortExitCritical>
		return false;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000014 	.word	0x20000014
 800822c:	20000394 	.word	0x20000394

08008230 <euart_hal_receive>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void euart_hal_receive(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  HAL_UARTEx_ReceiveToIdle_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	b29b      	uxth	r3, r3
 8008240:	461a      	mov	r2, r3
 8008242:	68b9      	ldr	r1, [r7, #8]
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7fd f9c3 	bl	80055d0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <euart_hal_send>:

void euart_hal_send(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	b29b      	uxth	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7fd f96d 	bl	8005546 <HAL_UART_Transmit_IT>
}
 800826c:	bf00      	nop
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_error((void*)huart);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f84d 	bl	800831c <eboard_hal_port_uart_error>
  // TODO: ¿?
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	807b      	strh	r3, [r7, #2]
  eboard_hal_port_uart_rx_irq((void*)huart, size);
 8008296:	887b      	ldrh	r3, [r7, #2]
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f848 	bl	8008330 <eboard_hal_port_uart_rx_irq>
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_tx_irq((void*)huart);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f84f 	bl	8008354 <eboard_hal_port_uart_tx_irq>
}
 80082b6:	bf00      	nop
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <eboard_uart_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void eboard_uart_init(void* phuart)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af02      	add	r7, sp, #8
 80082c6:	6078      	str	r0, [r7, #4]
  euart_init(pheuart_, phuart, tx_buffer_, RB_TX_BUFFER_SIZE_, rx_buffer_, RB_RX_BUFFER_SIZE_);
 80082c8:	4807      	ldr	r0, [pc, #28]	; (80082e8 <eboard_uart_init+0x28>)
 80082ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <eboard_uart_init+0x2c>)
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082d8:	4a05      	ldr	r2, [pc, #20]	; (80082f0 <eboard_uart_init+0x30>)
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	f000 f9be 	bl	800865c <euart_init>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20004c38 	.word	0x20004c38
 80082ec:	20004b38 	.word	0x20004b38
 80082f0:	20004738 	.word	0x20004738

080082f4 <eboard_gpio_init>:

void eboard_gpio_init(eboard_gpio_idx_t idx, void* hgpio)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	6039      	str	r1, [r7, #0]
 80082fe:	71fb      	strb	r3, [r7, #7]
	gpios_[idx].hgpio = hgpio;
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	4905      	ldr	r1, [pc, #20]	; (8008318 <eboard_gpio_init+0x24>)
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	2000004c 	.word	0x2000004c

0800831c <eboard_hal_port_uart_error>:
  eboard_uart_swrite_line((elog_msg_len < (ELOG_MAXLEN - 1)) ? "" : " ...");
}

// port uart
void eboard_hal_port_uart_error(void* huart)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  // TODO: ¿?
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <eboard_hal_port_uart_rx_irq>:

void eboard_hal_port_uart_rx_irq(void* huart, uint16_t size)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	807b      	strh	r3, [r7, #2]
  euart_rx_irq(pheuart_, huart, size);
 800833c:	4804      	ldr	r0, [pc, #16]	; (8008350 <eboard_hal_port_uart_rx_irq+0x20>)
 800833e:	887b      	ldrh	r3, [r7, #2]
 8008340:	461a      	mov	r2, r3
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	f000 f9ac 	bl	80086a0 <euart_rx_irq>
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20004c38 	.word	0x20004c38

08008354 <eboard_hal_port_uart_tx_irq>:

void eboard_hal_port_uart_tx_irq(void* huart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  euart_tx_irq(pheuart_, (void*)huart);
 800835c:	4b04      	ldr	r3, [pc, #16]	; (8008370 <eboard_hal_port_uart_tx_irq+0x1c>)
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	4618      	mov	r0, r3
 8008362:	f000 f9bc 	bl	80086de <euart_tx_irq>
}
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20004c38 	.word	0x20004c38

08008374 <eboard_init>:

void eboard_init(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
  eboard_uart_init((void*)p_huart_selected_);
 800837a:	4b10      	ldr	r3, [pc, #64]	; (80083bc <eboard_init+0x48>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff ff9e 	bl	80082c0 <eboard_uart_init>

  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 8008384:	2300      	movs	r3, #0
 8008386:	71fb      	strb	r3, [r7, #7]
 8008388:	e00f      	b.n	80083aa <eboard_init+0x36>
  {
    eboard_gpio_init(idx, (void*)(driver_gpios_ + idx));
 800838a:	79fa      	ldrb	r2, [r7, #7]
 800838c:	4613      	mov	r3, r2
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	461a      	mov	r2, r3
 8008396:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <eboard_init+0x4c>)
 8008398:	441a      	add	r2, r3
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff ffa8 	bl	80082f4 <eboard_gpio_init>
  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	3301      	adds	r3, #1
 80083a8:	71fb      	strb	r3, [r7, #7]
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d9ec      	bls.n	800838a <eboard_init+0x16>
  }
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20000048 	.word	0x20000048
 80083c0:	20000018 	.word	0x20000018

080083c4 <inc_idex_>:
 */

#include "eringbuffer.h"

inline static void inc_idex_(size_t *index, size_t size)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  *index += 1;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	601a      	str	r2, [r3, #0]
  if(size <= *index)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d802      	bhi.n	80083e8 <inc_idex_+0x24>
  {
    *index = 0;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
  }
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <write_byte_>:

inline static void write_byte_(eringbuffer_t *rb, uint8_t byte)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  rb->buffer[rb->w] = byte;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	4413      	add	r3, r2
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->w), rb->size);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f103 020c 	add.w	r2, r3, #12
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f7ff ffd2 	bl	80083c4 <inc_idex_>
  rb->len++;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	609a      	str	r2, [r3, #8]
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <read_byte_>:

inline static void read_byte_(eringbuffer_t *rb, uint8_t *byte)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	6039      	str	r1, [r7, #0]
  *byte = rb->buffer[rb->r];
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	4413      	add	r3, r2
 8008446:	781a      	ldrb	r2, [r3, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->r), rb->size);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f103 0210 	add.w	r2, r3, #16
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f7ff ffb3 	bl	80083c4 <inc_idex_>
  rb->len--;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	1e5a      	subs	r2, r3, #1
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	609a      	str	r2, [r3, #8]
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <eringbuffer_init>:

void eringbuffer_init(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  rb->buffer = buffer;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	601a      	str	r2, [r3, #0]
  rb->size = size;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	605a      	str	r2, [r3, #4]
  rb->len = 0;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	609a      	str	r2, [r3, #8]
  rb->w = 0;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	60da      	str	r2, [r3, #12]
  rb->r = 0;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	611a      	str	r2, [r3, #16]
}
 800849a:	bf00      	nop
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <eringbuffer_len>:
{
  return rb->size;
}

size_t eringbuffer_len(const eringbuffer_t *rb)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  return rb->len;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <eringbuffer_free>:

size_t eringbuffer_free(const eringbuffer_t *rb)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  return rb->size - rb->len;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	1ad3      	subs	r3, r2, r3
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <eringbuffer_is_full>:

bool eringbuffer_is_full(const eringbuffer_t *rb)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_free(rb));
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff ffea 	bl	80084be <eringbuffer_free>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bf0c      	ite	eq
 80084f0:	2301      	moveq	r3, #1
 80084f2:	2300      	movne	r3, #0
 80084f4:	b2db      	uxtb	r3, r3
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <eringbuffer_is_empty>:

bool eringbuffer_is_empty(const eringbuffer_t *rb)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_len(rb));
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff ffcd 	bl	80084a6 <eringbuffer_len>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	bf0c      	ite	eq
 8008512:	2301      	moveq	r3, #1
 8008514:	2300      	movne	r3, #0
 8008516:	b2db      	uxtb	r3, r3
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <eringbuffer_write_byte>:

size_t eringbuffer_write_byte(eringbuffer_t *rb, uint8_t byte)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  if(eringbuffer_is_full(rb))
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff ffd5 	bl	80084dc <eringbuffer_is_full>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <eringbuffer_write_byte+0x1c>
  {
    return 0;
 8008538:	2300      	movs	r3, #0
 800853a:	e005      	b.n	8008548 <eringbuffer_write_byte+0x28>
  }
  write_byte_(rb, byte);
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff ff57 	bl	80083f4 <write_byte_>
  return 1;
 8008546:	2301      	movs	r3, #1
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <eringbuffer_write>:

size_t eringbuffer_write(eringbuffer_t *rb, const uint8_t *buffer, size_t size)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	e00d      	b.n	800857e <eringbuffer_write+0x2e>
  {
    if(0 == eringbuffer_write_byte(rb, buffer[i]))
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4413      	add	r3, r2
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	4619      	mov	r1, r3
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f7ff ffd7 	bl	8008520 <eringbuffer_write_byte>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d007      	beq.n	8008588 <eringbuffer_write+0x38>
  for(i = 0; i < size; ++i)
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	3301      	adds	r3, #1
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	429a      	cmp	r2, r3
 8008584:	d3ed      	bcc.n	8008562 <eringbuffer_write+0x12>
 8008586:	e000      	b.n	800858a <eringbuffer_write+0x3a>
    {
      break;
 8008588:	bf00      	nop
    }
  }
  return i;
 800858a:	697b      	ldr	r3, [r7, #20]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <eringbuffer_read_byte>:

size_t eringbuffer_read_byte(eringbuffer_t *rb, uint8_t *byte)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  if(eringbuffer_is_empty(rb))
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff ffad 	bl	80084fe <eringbuffer_is_empty>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <eringbuffer_read_byte+0x1a>
  {
    return 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	e004      	b.n	80085b8 <eringbuffer_read_byte+0x24>
  }
  read_byte_(rb, byte);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff ff3e 	bl	8008432 <read_byte_>
  return 1;
 80085b6:	2301      	movs	r3, #1
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <eringbuffer_read>:

size_t eringbuffer_read(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	e00c      	b.n	80085ec <eringbuffer_read+0x2c>
  {
    if(0 == eringbuffer_read_byte(rb, buffer + i))
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	4413      	add	r3, r2
 80085d8:	4619      	mov	r1, r3
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f7ff ffda 	bl	8008594 <eringbuffer_read_byte>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d007      	beq.n	80085f6 <eringbuffer_read+0x36>
  for(i = 0; i < size; ++i)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	3301      	adds	r3, #1
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d3ee      	bcc.n	80085d2 <eringbuffer_read+0x12>
 80085f4:	e000      	b.n	80085f8 <eringbuffer_read+0x38>
    {
      break;
 80085f6:	bf00      	nop
    }
  }
  return i;
 80085f8:	697b      	ldr	r3, [r7, #20]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <hal_receive_>:
#define pTX_BUFFER      (phandle->tx.pbuffer)
#define pRX_RB          (&(phandle->rx.rb))
#define pRX_BUFFER      (phandle->rx.pbuffer)

void hal_receive_(euart_t *phandle)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b082      	sub	sp, #8
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  euart_hal_receive(phandle->phardware_handle, pRX_BUFFER, EUART_HAL_BUFFER_SIZE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3340      	adds	r3, #64	; 0x40
 8008612:	2210      	movs	r2, #16
 8008614:	4619      	mov	r1, r3
 8008616:	f7ff fe0b 	bl	8008230 <euart_hal_receive>
}
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <hal_send_>:

void hal_send_(euart_t *phandle)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  size_t tx_len = eringbuffer_read(pTX_RB, pTX_BUFFER, EUART_HAL_BUFFER_SIZE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f103 0008 	add.w	r0, r3, #8
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	331c      	adds	r3, #28
 8008634:	2210      	movs	r2, #16
 8008636:	4619      	mov	r1, r3
 8008638:	f7ff ffc2 	bl	80085c0 <eringbuffer_read>
 800863c:	60f8      	str	r0, [r7, #12]
  euart_hal_send(phandle->phardware_handle, pTX_BUFFER, tx_len);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6818      	ldr	r0, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	331c      	adds	r3, #28
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4619      	mov	r1, r3
 800864a:	f7ff fe02 	bl	8008252 <euart_hal_send>
  phandle->tx_free = false;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	711a      	strb	r2, [r3, #4]
}
 8008654:	bf00      	nop
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <euart_init>:

void euart_init(euart_t *phandle, void* phardware_handle, uint8_t* ptx_buffer, size_t tx_buffer_size, uint8_t* prx_buffer, size_t rx_buffer_size)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
  phandle->phardware_handle = phardware_handle;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	601a      	str	r2, [r3, #0]
  eringbuffer_init(pTX_RB, ptx_buffer, tx_buffer_size);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3308      	adds	r3, #8
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	6879      	ldr	r1, [r7, #4]
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff fef9 	bl	8008470 <eringbuffer_init>
  eringbuffer_init(pRX_RB, prx_buffer, rx_buffer_size);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	332c      	adds	r3, #44	; 0x2c
 8008682:	69fa      	ldr	r2, [r7, #28]
 8008684:	69b9      	ldr	r1, [r7, #24]
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff fef2 	bl	8008470 <eringbuffer_init>
  phandle->tx_free = true;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2201      	movs	r2, #1
 8008690:	711a      	strb	r2, [r3, #4]

  hal_receive_(phandle);
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff ffb5 	bl	8008602 <hal_receive_>
}
 8008698:	bf00      	nop
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <euart_rx_irq>:
{
  return eringbuffer_read(pRX_RB, buffer, size);
}

void euart_rx_irq(euart_t *phandle, void *phardware_handle, size_t size)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  if(phandle->phardware_handle != phardware_handle)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d10f      	bne.n	80086d6 <euart_rx_irq+0x36>
  {
    return;
  }

  if(0 < size)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d008      	beq.n	80086ce <euart_rx_irq+0x2e>
  {
    eringbuffer_write(pRX_RB, pRX_BUFFER, size);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3340      	adds	r3, #64	; 0x40
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	4619      	mov	r1, r3
 80086ca:	f7ff ff41 	bl	8008550 <eringbuffer_write>
  }
  hal_receive_(phandle);
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7ff ff97 	bl	8008602 <hal_receive_>
 80086d4:	e000      	b.n	80086d8 <euart_rx_irq+0x38>
    return;
 80086d6:	bf00      	nop
}
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <euart_tx_irq>:

void euart_tx_irq(euart_t *phandle, void *phardware_handle)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  phandle->tx_free = true;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	711a      	strb	r2, [r3, #4]
  if(phandle->phardware_handle != phardware_handle)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d10e      	bne.n	8008716 <euart_tx_irq+0x38>
  {
    return;
  }

  if(!eringbuffer_is_empty(pTX_RB))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3308      	adds	r3, #8
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff fefe 	bl	80084fe <eringbuffer_is_empty>
 8008702:	4603      	mov	r3, r0
 8008704:	f083 0301 	eor.w	r3, r3, #1
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <euart_tx_irq+0x3a>
  {
    hal_send_(phandle);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff ff87 	bl	8008622 <hal_send_>
 8008714:	e000      	b.n	8008718 <euart_tx_irq+0x3a>
    return;
 8008716:	bf00      	nop
  }
}
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <__sflush_r>:
 8008720:	898a      	ldrh	r2, [r1, #12]
 8008722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008726:	4605      	mov	r5, r0
 8008728:	0710      	lsls	r0, r2, #28
 800872a:	460c      	mov	r4, r1
 800872c:	d458      	bmi.n	80087e0 <__sflush_r+0xc0>
 800872e:	684b      	ldr	r3, [r1, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	dc05      	bgt.n	8008740 <__sflush_r+0x20>
 8008734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008736:	2b00      	cmp	r3, #0
 8008738:	dc02      	bgt.n	8008740 <__sflush_r+0x20>
 800873a:	2000      	movs	r0, #0
 800873c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008742:	2e00      	cmp	r6, #0
 8008744:	d0f9      	beq.n	800873a <__sflush_r+0x1a>
 8008746:	2300      	movs	r3, #0
 8008748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800874c:	682f      	ldr	r7, [r5, #0]
 800874e:	6a21      	ldr	r1, [r4, #32]
 8008750:	602b      	str	r3, [r5, #0]
 8008752:	d032      	beq.n	80087ba <__sflush_r+0x9a>
 8008754:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	075a      	lsls	r2, r3, #29
 800875a:	d505      	bpl.n	8008768 <__sflush_r+0x48>
 800875c:	6863      	ldr	r3, [r4, #4]
 800875e:	1ac0      	subs	r0, r0, r3
 8008760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008762:	b10b      	cbz	r3, 8008768 <__sflush_r+0x48>
 8008764:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008766:	1ac0      	subs	r0, r0, r3
 8008768:	2300      	movs	r3, #0
 800876a:	4602      	mov	r2, r0
 800876c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800876e:	6a21      	ldr	r1, [r4, #32]
 8008770:	4628      	mov	r0, r5
 8008772:	47b0      	blx	r6
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	d106      	bne.n	8008788 <__sflush_r+0x68>
 800877a:	6829      	ldr	r1, [r5, #0]
 800877c:	291d      	cmp	r1, #29
 800877e:	d82b      	bhi.n	80087d8 <__sflush_r+0xb8>
 8008780:	4a29      	ldr	r2, [pc, #164]	; (8008828 <__sflush_r+0x108>)
 8008782:	410a      	asrs	r2, r1
 8008784:	07d6      	lsls	r6, r2, #31
 8008786:	d427      	bmi.n	80087d8 <__sflush_r+0xb8>
 8008788:	2200      	movs	r2, #0
 800878a:	6062      	str	r2, [r4, #4]
 800878c:	04d9      	lsls	r1, r3, #19
 800878e:	6922      	ldr	r2, [r4, #16]
 8008790:	6022      	str	r2, [r4, #0]
 8008792:	d504      	bpl.n	800879e <__sflush_r+0x7e>
 8008794:	1c42      	adds	r2, r0, #1
 8008796:	d101      	bne.n	800879c <__sflush_r+0x7c>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b903      	cbnz	r3, 800879e <__sflush_r+0x7e>
 800879c:	6560      	str	r0, [r4, #84]	; 0x54
 800879e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087a0:	602f      	str	r7, [r5, #0]
 80087a2:	2900      	cmp	r1, #0
 80087a4:	d0c9      	beq.n	800873a <__sflush_r+0x1a>
 80087a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087aa:	4299      	cmp	r1, r3
 80087ac:	d002      	beq.n	80087b4 <__sflush_r+0x94>
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 fa62 	bl	8008c78 <_free_r>
 80087b4:	2000      	movs	r0, #0
 80087b6:	6360      	str	r0, [r4, #52]	; 0x34
 80087b8:	e7c0      	b.n	800873c <__sflush_r+0x1c>
 80087ba:	2301      	movs	r3, #1
 80087bc:	4628      	mov	r0, r5
 80087be:	47b0      	blx	r6
 80087c0:	1c41      	adds	r1, r0, #1
 80087c2:	d1c8      	bne.n	8008756 <__sflush_r+0x36>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0c5      	beq.n	8008756 <__sflush_r+0x36>
 80087ca:	2b1d      	cmp	r3, #29
 80087cc:	d001      	beq.n	80087d2 <__sflush_r+0xb2>
 80087ce:	2b16      	cmp	r3, #22
 80087d0:	d101      	bne.n	80087d6 <__sflush_r+0xb6>
 80087d2:	602f      	str	r7, [r5, #0]
 80087d4:	e7b1      	b.n	800873a <__sflush_r+0x1a>
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	e7ad      	b.n	800873c <__sflush_r+0x1c>
 80087e0:	690f      	ldr	r7, [r1, #16]
 80087e2:	2f00      	cmp	r7, #0
 80087e4:	d0a9      	beq.n	800873a <__sflush_r+0x1a>
 80087e6:	0793      	lsls	r3, r2, #30
 80087e8:	680e      	ldr	r6, [r1, #0]
 80087ea:	bf08      	it	eq
 80087ec:	694b      	ldreq	r3, [r1, #20]
 80087ee:	600f      	str	r7, [r1, #0]
 80087f0:	bf18      	it	ne
 80087f2:	2300      	movne	r3, #0
 80087f4:	eba6 0807 	sub.w	r8, r6, r7
 80087f8:	608b      	str	r3, [r1, #8]
 80087fa:	f1b8 0f00 	cmp.w	r8, #0
 80087fe:	dd9c      	ble.n	800873a <__sflush_r+0x1a>
 8008800:	6a21      	ldr	r1, [r4, #32]
 8008802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008804:	4643      	mov	r3, r8
 8008806:	463a      	mov	r2, r7
 8008808:	4628      	mov	r0, r5
 800880a:	47b0      	blx	r6
 800880c:	2800      	cmp	r0, #0
 800880e:	dc06      	bgt.n	800881e <__sflush_r+0xfe>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008816:	81a3      	strh	r3, [r4, #12]
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	e78e      	b.n	800873c <__sflush_r+0x1c>
 800881e:	4407      	add	r7, r0
 8008820:	eba8 0800 	sub.w	r8, r8, r0
 8008824:	e7e9      	b.n	80087fa <__sflush_r+0xda>
 8008826:	bf00      	nop
 8008828:	dfbffffe 	.word	0xdfbffffe

0800882c <_fflush_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	690b      	ldr	r3, [r1, #16]
 8008830:	4605      	mov	r5, r0
 8008832:	460c      	mov	r4, r1
 8008834:	b913      	cbnz	r3, 800883c <_fflush_r+0x10>
 8008836:	2500      	movs	r5, #0
 8008838:	4628      	mov	r0, r5
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	b118      	cbz	r0, 8008846 <_fflush_r+0x1a>
 800883e:	6a03      	ldr	r3, [r0, #32]
 8008840:	b90b      	cbnz	r3, 8008846 <_fflush_r+0x1a>
 8008842:	f000 f8bb 	bl	80089bc <__sinit>
 8008846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0f3      	beq.n	8008836 <_fflush_r+0xa>
 800884e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008850:	07d0      	lsls	r0, r2, #31
 8008852:	d404      	bmi.n	800885e <_fflush_r+0x32>
 8008854:	0599      	lsls	r1, r3, #22
 8008856:	d402      	bmi.n	800885e <_fflush_r+0x32>
 8008858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800885a:	f000 fa0a 	bl	8008c72 <__retarget_lock_acquire_recursive>
 800885e:	4628      	mov	r0, r5
 8008860:	4621      	mov	r1, r4
 8008862:	f7ff ff5d 	bl	8008720 <__sflush_r>
 8008866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008868:	07da      	lsls	r2, r3, #31
 800886a:	4605      	mov	r5, r0
 800886c:	d4e4      	bmi.n	8008838 <_fflush_r+0xc>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	059b      	lsls	r3, r3, #22
 8008872:	d4e1      	bmi.n	8008838 <_fflush_r+0xc>
 8008874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008876:	f000 f9fd 	bl	8008c74 <__retarget_lock_release_recursive>
 800887a:	e7dd      	b.n	8008838 <_fflush_r+0xc>

0800887c <fflush>:
 800887c:	4601      	mov	r1, r0
 800887e:	b920      	cbnz	r0, 800888a <fflush+0xe>
 8008880:	4a04      	ldr	r2, [pc, #16]	; (8008894 <fflush+0x18>)
 8008882:	4905      	ldr	r1, [pc, #20]	; (8008898 <fflush+0x1c>)
 8008884:	4805      	ldr	r0, [pc, #20]	; (800889c <fflush+0x20>)
 8008886:	f000 b8b1 	b.w	80089ec <_fwalk_sglue>
 800888a:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <fflush+0x24>)
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	f7ff bfcd 	b.w	800882c <_fflush_r>
 8008892:	bf00      	nop
 8008894:	2000006c 	.word	0x2000006c
 8008898:	0800882d 	.word	0x0800882d
 800889c:	20000078 	.word	0x20000078
 80088a0:	200000c4 	.word	0x200000c4

080088a4 <std>:
 80088a4:	2300      	movs	r3, #0
 80088a6:	b510      	push	{r4, lr}
 80088a8:	4604      	mov	r4, r0
 80088aa:	e9c0 3300 	strd	r3, r3, [r0]
 80088ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088b2:	6083      	str	r3, [r0, #8]
 80088b4:	8181      	strh	r1, [r0, #12]
 80088b6:	6643      	str	r3, [r0, #100]	; 0x64
 80088b8:	81c2      	strh	r2, [r0, #14]
 80088ba:	6183      	str	r3, [r0, #24]
 80088bc:	4619      	mov	r1, r3
 80088be:	2208      	movs	r2, #8
 80088c0:	305c      	adds	r0, #92	; 0x5c
 80088c2:	f000 f906 	bl	8008ad2 <memset>
 80088c6:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <std+0x58>)
 80088c8:	6263      	str	r3, [r4, #36]	; 0x24
 80088ca:	4b0d      	ldr	r3, [pc, #52]	; (8008900 <std+0x5c>)
 80088cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80088ce:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <std+0x60>)
 80088d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088d2:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <std+0x64>)
 80088d4:	6323      	str	r3, [r4, #48]	; 0x30
 80088d6:	4b0d      	ldr	r3, [pc, #52]	; (800890c <std+0x68>)
 80088d8:	6224      	str	r4, [r4, #32]
 80088da:	429c      	cmp	r4, r3
 80088dc:	d006      	beq.n	80088ec <std+0x48>
 80088de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80088e2:	4294      	cmp	r4, r2
 80088e4:	d002      	beq.n	80088ec <std+0x48>
 80088e6:	33d0      	adds	r3, #208	; 0xd0
 80088e8:	429c      	cmp	r4, r3
 80088ea:	d105      	bne.n	80088f8 <std+0x54>
 80088ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088f4:	f000 b9bc 	b.w	8008c70 <__retarget_lock_init_recursive>
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	bf00      	nop
 80088fc:	08008a4d 	.word	0x08008a4d
 8008900:	08008a6f 	.word	0x08008a6f
 8008904:	08008aa7 	.word	0x08008aa7
 8008908:	08008acb 	.word	0x08008acb
 800890c:	20004c88 	.word	0x20004c88

08008910 <stdio_exit_handler>:
 8008910:	4a02      	ldr	r2, [pc, #8]	; (800891c <stdio_exit_handler+0xc>)
 8008912:	4903      	ldr	r1, [pc, #12]	; (8008920 <stdio_exit_handler+0x10>)
 8008914:	4803      	ldr	r0, [pc, #12]	; (8008924 <stdio_exit_handler+0x14>)
 8008916:	f000 b869 	b.w	80089ec <_fwalk_sglue>
 800891a:	bf00      	nop
 800891c:	2000006c 	.word	0x2000006c
 8008920:	0800882d 	.word	0x0800882d
 8008924:	20000078 	.word	0x20000078

08008928 <cleanup_stdio>:
 8008928:	6841      	ldr	r1, [r0, #4]
 800892a:	4b0c      	ldr	r3, [pc, #48]	; (800895c <cleanup_stdio+0x34>)
 800892c:	4299      	cmp	r1, r3
 800892e:	b510      	push	{r4, lr}
 8008930:	4604      	mov	r4, r0
 8008932:	d001      	beq.n	8008938 <cleanup_stdio+0x10>
 8008934:	f7ff ff7a 	bl	800882c <_fflush_r>
 8008938:	68a1      	ldr	r1, [r4, #8]
 800893a:	4b09      	ldr	r3, [pc, #36]	; (8008960 <cleanup_stdio+0x38>)
 800893c:	4299      	cmp	r1, r3
 800893e:	d002      	beq.n	8008946 <cleanup_stdio+0x1e>
 8008940:	4620      	mov	r0, r4
 8008942:	f7ff ff73 	bl	800882c <_fflush_r>
 8008946:	68e1      	ldr	r1, [r4, #12]
 8008948:	4b06      	ldr	r3, [pc, #24]	; (8008964 <cleanup_stdio+0x3c>)
 800894a:	4299      	cmp	r1, r3
 800894c:	d004      	beq.n	8008958 <cleanup_stdio+0x30>
 800894e:	4620      	mov	r0, r4
 8008950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008954:	f7ff bf6a 	b.w	800882c <_fflush_r>
 8008958:	bd10      	pop	{r4, pc}
 800895a:	bf00      	nop
 800895c:	20004c88 	.word	0x20004c88
 8008960:	20004cf0 	.word	0x20004cf0
 8008964:	20004d58 	.word	0x20004d58

08008968 <global_stdio_init.part.0>:
 8008968:	b510      	push	{r4, lr}
 800896a:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <global_stdio_init.part.0+0x30>)
 800896c:	4c0b      	ldr	r4, [pc, #44]	; (800899c <global_stdio_init.part.0+0x34>)
 800896e:	4a0c      	ldr	r2, [pc, #48]	; (80089a0 <global_stdio_init.part.0+0x38>)
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	4620      	mov	r0, r4
 8008974:	2200      	movs	r2, #0
 8008976:	2104      	movs	r1, #4
 8008978:	f7ff ff94 	bl	80088a4 <std>
 800897c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008980:	2201      	movs	r2, #1
 8008982:	2109      	movs	r1, #9
 8008984:	f7ff ff8e 	bl	80088a4 <std>
 8008988:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800898c:	2202      	movs	r2, #2
 800898e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008992:	2112      	movs	r1, #18
 8008994:	f7ff bf86 	b.w	80088a4 <std>
 8008998:	20004dc0 	.word	0x20004dc0
 800899c:	20004c88 	.word	0x20004c88
 80089a0:	08008911 	.word	0x08008911

080089a4 <__sfp_lock_acquire>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__sfp_lock_acquire+0x8>)
 80089a6:	f000 b964 	b.w	8008c72 <__retarget_lock_acquire_recursive>
 80089aa:	bf00      	nop
 80089ac:	20004dc9 	.word	0x20004dc9

080089b0 <__sfp_lock_release>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__sfp_lock_release+0x8>)
 80089b2:	f000 b95f 	b.w	8008c74 <__retarget_lock_release_recursive>
 80089b6:	bf00      	nop
 80089b8:	20004dc9 	.word	0x20004dc9

080089bc <__sinit>:
 80089bc:	b510      	push	{r4, lr}
 80089be:	4604      	mov	r4, r0
 80089c0:	f7ff fff0 	bl	80089a4 <__sfp_lock_acquire>
 80089c4:	6a23      	ldr	r3, [r4, #32]
 80089c6:	b11b      	cbz	r3, 80089d0 <__sinit+0x14>
 80089c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089cc:	f7ff bff0 	b.w	80089b0 <__sfp_lock_release>
 80089d0:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <__sinit+0x28>)
 80089d2:	6223      	str	r3, [r4, #32]
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <__sinit+0x2c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f5      	bne.n	80089c8 <__sinit+0xc>
 80089dc:	f7ff ffc4 	bl	8008968 <global_stdio_init.part.0>
 80089e0:	e7f2      	b.n	80089c8 <__sinit+0xc>
 80089e2:	bf00      	nop
 80089e4:	08008929 	.word	0x08008929
 80089e8:	20004dc0 	.word	0x20004dc0

080089ec <_fwalk_sglue>:
 80089ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f0:	4607      	mov	r7, r0
 80089f2:	4688      	mov	r8, r1
 80089f4:	4614      	mov	r4, r2
 80089f6:	2600      	movs	r6, #0
 80089f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008a00:	d505      	bpl.n	8008a0e <_fwalk_sglue+0x22>
 8008a02:	6824      	ldr	r4, [r4, #0]
 8008a04:	2c00      	cmp	r4, #0
 8008a06:	d1f7      	bne.n	80089f8 <_fwalk_sglue+0xc>
 8008a08:	4630      	mov	r0, r6
 8008a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0e:	89ab      	ldrh	r3, [r5, #12]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d907      	bls.n	8008a24 <_fwalk_sglue+0x38>
 8008a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	d003      	beq.n	8008a24 <_fwalk_sglue+0x38>
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	4638      	mov	r0, r7
 8008a20:	47c0      	blx	r8
 8008a22:	4306      	orrs	r6, r0
 8008a24:	3568      	adds	r5, #104	; 0x68
 8008a26:	e7e9      	b.n	80089fc <_fwalk_sglue+0x10>

08008a28 <iprintf>:
 8008a28:	b40f      	push	{r0, r1, r2, r3}
 8008a2a:	b507      	push	{r0, r1, r2, lr}
 8008a2c:	4906      	ldr	r1, [pc, #24]	; (8008a48 <iprintf+0x20>)
 8008a2e:	ab04      	add	r3, sp, #16
 8008a30:	6808      	ldr	r0, [r1, #0]
 8008a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a36:	6881      	ldr	r1, [r0, #8]
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	f000 fa3f 	bl	8008ebc <_vfiprintf_r>
 8008a3e:	b003      	add	sp, #12
 8008a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a44:	b004      	add	sp, #16
 8008a46:	4770      	bx	lr
 8008a48:	200000c4 	.word	0x200000c4

08008a4c <__sread>:
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	460c      	mov	r4, r1
 8008a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a54:	f000 f8be 	bl	8008bd4 <_read_r>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	bfab      	itete	ge
 8008a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a60:	181b      	addge	r3, r3, r0
 8008a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a66:	bfac      	ite	ge
 8008a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a6a:	81a3      	strhlt	r3, [r4, #12]
 8008a6c:	bd10      	pop	{r4, pc}

08008a6e <__swrite>:
 8008a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a72:	461f      	mov	r7, r3
 8008a74:	898b      	ldrh	r3, [r1, #12]
 8008a76:	05db      	lsls	r3, r3, #23
 8008a78:	4605      	mov	r5, r0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	4616      	mov	r6, r2
 8008a7e:	d505      	bpl.n	8008a8c <__swrite+0x1e>
 8008a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a84:	2302      	movs	r3, #2
 8008a86:	2200      	movs	r2, #0
 8008a88:	f000 f892 	bl	8008bb0 <_lseek_r>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	4632      	mov	r2, r6
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa2:	f000 b8a9 	b.w	8008bf8 <_write_r>

08008aa6 <__sseek>:
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aae:	f000 f87f 	bl	8008bb0 <_lseek_r>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	bf15      	itete	ne
 8008ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ac2:	81a3      	strheq	r3, [r4, #12]
 8008ac4:	bf18      	it	ne
 8008ac6:	81a3      	strhne	r3, [r4, #12]
 8008ac8:	bd10      	pop	{r4, pc}

08008aca <__sclose>:
 8008aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ace:	f000 b809 	b.w	8008ae4 <_close_r>

08008ad2 <memset>:
 8008ad2:	4402      	add	r2, r0
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d100      	bne.n	8008adc <memset+0xa>
 8008ada:	4770      	bx	lr
 8008adc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ae0:	e7f9      	b.n	8008ad6 <memset+0x4>
	...

08008ae4 <_close_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d06      	ldr	r5, [pc, #24]	; (8008b00 <_close_r+0x1c>)
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	602b      	str	r3, [r5, #0]
 8008af0:	f7f8 fa47 	bl	8000f82 <_close>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_close_r+0x1a>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_close_r+0x1a>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	20004dc4 	.word	0x20004dc4

08008b04 <_reclaim_reent>:
 8008b04:	4b29      	ldr	r3, [pc, #164]	; (8008bac <_reclaim_reent+0xa8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4283      	cmp	r3, r0
 8008b0a:	b570      	push	{r4, r5, r6, lr}
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	d04b      	beq.n	8008ba8 <_reclaim_reent+0xa4>
 8008b10:	69c3      	ldr	r3, [r0, #28]
 8008b12:	b143      	cbz	r3, 8008b26 <_reclaim_reent+0x22>
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d144      	bne.n	8008ba4 <_reclaim_reent+0xa0>
 8008b1a:	69e3      	ldr	r3, [r4, #28]
 8008b1c:	6819      	ldr	r1, [r3, #0]
 8008b1e:	b111      	cbz	r1, 8008b26 <_reclaim_reent+0x22>
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 f8a9 	bl	8008c78 <_free_r>
 8008b26:	6961      	ldr	r1, [r4, #20]
 8008b28:	b111      	cbz	r1, 8008b30 <_reclaim_reent+0x2c>
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 f8a4 	bl	8008c78 <_free_r>
 8008b30:	69e1      	ldr	r1, [r4, #28]
 8008b32:	b111      	cbz	r1, 8008b3a <_reclaim_reent+0x36>
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 f89f 	bl	8008c78 <_free_r>
 8008b3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008b3c:	b111      	cbz	r1, 8008b44 <_reclaim_reent+0x40>
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 f89a 	bl	8008c78 <_free_r>
 8008b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b46:	b111      	cbz	r1, 8008b4e <_reclaim_reent+0x4a>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 f895 	bl	8008c78 <_free_r>
 8008b4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b50:	b111      	cbz	r1, 8008b58 <_reclaim_reent+0x54>
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 f890 	bl	8008c78 <_free_r>
 8008b58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b5a:	b111      	cbz	r1, 8008b62 <_reclaim_reent+0x5e>
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 f88b 	bl	8008c78 <_free_r>
 8008b62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008b64:	b111      	cbz	r1, 8008b6c <_reclaim_reent+0x68>
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 f886 	bl	8008c78 <_free_r>
 8008b6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008b6e:	b111      	cbz	r1, 8008b76 <_reclaim_reent+0x72>
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 f881 	bl	8008c78 <_free_r>
 8008b76:	6a23      	ldr	r3, [r4, #32]
 8008b78:	b1b3      	cbz	r3, 8008ba8 <_reclaim_reent+0xa4>
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b80:	4718      	bx	r3
 8008b82:	5949      	ldr	r1, [r1, r5]
 8008b84:	b941      	cbnz	r1, 8008b98 <_reclaim_reent+0x94>
 8008b86:	3504      	adds	r5, #4
 8008b88:	69e3      	ldr	r3, [r4, #28]
 8008b8a:	2d80      	cmp	r5, #128	; 0x80
 8008b8c:	68d9      	ldr	r1, [r3, #12]
 8008b8e:	d1f8      	bne.n	8008b82 <_reclaim_reent+0x7e>
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 f871 	bl	8008c78 <_free_r>
 8008b96:	e7c0      	b.n	8008b1a <_reclaim_reent+0x16>
 8008b98:	680e      	ldr	r6, [r1, #0]
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 f86c 	bl	8008c78 <_free_r>
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	e7ef      	b.n	8008b84 <_reclaim_reent+0x80>
 8008ba4:	2500      	movs	r5, #0
 8008ba6:	e7ef      	b.n	8008b88 <_reclaim_reent+0x84>
 8008ba8:	bd70      	pop	{r4, r5, r6, pc}
 8008baa:	bf00      	nop
 8008bac:	200000c4 	.word	0x200000c4

08008bb0 <_lseek_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	; (8008bd0 <_lseek_r+0x20>)
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	4611      	mov	r1, r2
 8008bba:	2200      	movs	r2, #0
 8008bbc:	602a      	str	r2, [r5, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f7f8 fa06 	bl	8000fd0 <_lseek>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_lseek_r+0x1e>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_lseek_r+0x1e>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20004dc4 	.word	0x20004dc4

08008bd4 <_read_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	; (8008bf4 <_read_r+0x20>)
 8008bd8:	4604      	mov	r4, r0
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7f8 f994 	bl	8000f10 <_read>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_read_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_read_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20004dc4 	.word	0x20004dc4

08008bf8 <_write_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d07      	ldr	r5, [pc, #28]	; (8008c18 <_write_r+0x20>)
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	4608      	mov	r0, r1
 8008c00:	4611      	mov	r1, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	602a      	str	r2, [r5, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f7f8 f99f 	bl	8000f4a <_write>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_write_r+0x1e>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_write_r+0x1e>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20004dc4 	.word	0x20004dc4

08008c1c <__errno>:
 8008c1c:	4b01      	ldr	r3, [pc, #4]	; (8008c24 <__errno+0x8>)
 8008c1e:	6818      	ldr	r0, [r3, #0]
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	200000c4 	.word	0x200000c4

08008c28 <__libc_init_array>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	4d0d      	ldr	r5, [pc, #52]	; (8008c60 <__libc_init_array+0x38>)
 8008c2c:	4c0d      	ldr	r4, [pc, #52]	; (8008c64 <__libc_init_array+0x3c>)
 8008c2e:	1b64      	subs	r4, r4, r5
 8008c30:	10a4      	asrs	r4, r4, #2
 8008c32:	2600      	movs	r6, #0
 8008c34:	42a6      	cmp	r6, r4
 8008c36:	d109      	bne.n	8008c4c <__libc_init_array+0x24>
 8008c38:	4d0b      	ldr	r5, [pc, #44]	; (8008c68 <__libc_init_array+0x40>)
 8008c3a:	4c0c      	ldr	r4, [pc, #48]	; (8008c6c <__libc_init_array+0x44>)
 8008c3c:	f000 fd12 	bl	8009664 <_init>
 8008c40:	1b64      	subs	r4, r4, r5
 8008c42:	10a4      	asrs	r4, r4, #2
 8008c44:	2600      	movs	r6, #0
 8008c46:	42a6      	cmp	r6, r4
 8008c48:	d105      	bne.n	8008c56 <__libc_init_array+0x2e>
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c50:	4798      	blx	r3
 8008c52:	3601      	adds	r6, #1
 8008c54:	e7ee      	b.n	8008c34 <__libc_init_array+0xc>
 8008c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c5a:	4798      	blx	r3
 8008c5c:	3601      	adds	r6, #1
 8008c5e:	e7f2      	b.n	8008c46 <__libc_init_array+0x1e>
 8008c60:	08009828 	.word	0x08009828
 8008c64:	08009828 	.word	0x08009828
 8008c68:	08009828 	.word	0x08009828
 8008c6c:	0800982c 	.word	0x0800982c

08008c70 <__retarget_lock_init_recursive>:
 8008c70:	4770      	bx	lr

08008c72 <__retarget_lock_acquire_recursive>:
 8008c72:	4770      	bx	lr

08008c74 <__retarget_lock_release_recursive>:
 8008c74:	4770      	bx	lr
	...

08008c78 <_free_r>:
 8008c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	d044      	beq.n	8008d08 <_free_r+0x90>
 8008c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c82:	9001      	str	r0, [sp, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f1a1 0404 	sub.w	r4, r1, #4
 8008c8a:	bfb8      	it	lt
 8008c8c:	18e4      	addlt	r4, r4, r3
 8008c8e:	f000 f8df 	bl	8008e50 <__malloc_lock>
 8008c92:	4a1e      	ldr	r2, [pc, #120]	; (8008d0c <_free_r+0x94>)
 8008c94:	9801      	ldr	r0, [sp, #4]
 8008c96:	6813      	ldr	r3, [r2, #0]
 8008c98:	b933      	cbnz	r3, 8008ca8 <_free_r+0x30>
 8008c9a:	6063      	str	r3, [r4, #4]
 8008c9c:	6014      	str	r4, [r2, #0]
 8008c9e:	b003      	add	sp, #12
 8008ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ca4:	f000 b8da 	b.w	8008e5c <__malloc_unlock>
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	d908      	bls.n	8008cbe <_free_r+0x46>
 8008cac:	6825      	ldr	r5, [r4, #0]
 8008cae:	1961      	adds	r1, r4, r5
 8008cb0:	428b      	cmp	r3, r1
 8008cb2:	bf01      	itttt	eq
 8008cb4:	6819      	ldreq	r1, [r3, #0]
 8008cb6:	685b      	ldreq	r3, [r3, #4]
 8008cb8:	1949      	addeq	r1, r1, r5
 8008cba:	6021      	streq	r1, [r4, #0]
 8008cbc:	e7ed      	b.n	8008c9a <_free_r+0x22>
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	b10b      	cbz	r3, 8008cc8 <_free_r+0x50>
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	d9fa      	bls.n	8008cbe <_free_r+0x46>
 8008cc8:	6811      	ldr	r1, [r2, #0]
 8008cca:	1855      	adds	r5, r2, r1
 8008ccc:	42a5      	cmp	r5, r4
 8008cce:	d10b      	bne.n	8008ce8 <_free_r+0x70>
 8008cd0:	6824      	ldr	r4, [r4, #0]
 8008cd2:	4421      	add	r1, r4
 8008cd4:	1854      	adds	r4, r2, r1
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	6011      	str	r1, [r2, #0]
 8008cda:	d1e0      	bne.n	8008c9e <_free_r+0x26>
 8008cdc:	681c      	ldr	r4, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	6053      	str	r3, [r2, #4]
 8008ce2:	440c      	add	r4, r1
 8008ce4:	6014      	str	r4, [r2, #0]
 8008ce6:	e7da      	b.n	8008c9e <_free_r+0x26>
 8008ce8:	d902      	bls.n	8008cf0 <_free_r+0x78>
 8008cea:	230c      	movs	r3, #12
 8008cec:	6003      	str	r3, [r0, #0]
 8008cee:	e7d6      	b.n	8008c9e <_free_r+0x26>
 8008cf0:	6825      	ldr	r5, [r4, #0]
 8008cf2:	1961      	adds	r1, r4, r5
 8008cf4:	428b      	cmp	r3, r1
 8008cf6:	bf04      	itt	eq
 8008cf8:	6819      	ldreq	r1, [r3, #0]
 8008cfa:	685b      	ldreq	r3, [r3, #4]
 8008cfc:	6063      	str	r3, [r4, #4]
 8008cfe:	bf04      	itt	eq
 8008d00:	1949      	addeq	r1, r1, r5
 8008d02:	6021      	streq	r1, [r4, #0]
 8008d04:	6054      	str	r4, [r2, #4]
 8008d06:	e7ca      	b.n	8008c9e <_free_r+0x26>
 8008d08:	b003      	add	sp, #12
 8008d0a:	bd30      	pop	{r4, r5, pc}
 8008d0c:	20004dcc 	.word	0x20004dcc

08008d10 <sbrk_aligned>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	4e0e      	ldr	r6, [pc, #56]	; (8008d4c <sbrk_aligned+0x3c>)
 8008d14:	460c      	mov	r4, r1
 8008d16:	6831      	ldr	r1, [r6, #0]
 8008d18:	4605      	mov	r5, r0
 8008d1a:	b911      	cbnz	r1, 8008d22 <sbrk_aligned+0x12>
 8008d1c:	f000 fc0e 	bl	800953c <_sbrk_r>
 8008d20:	6030      	str	r0, [r6, #0]
 8008d22:	4621      	mov	r1, r4
 8008d24:	4628      	mov	r0, r5
 8008d26:	f000 fc09 	bl	800953c <_sbrk_r>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	d00a      	beq.n	8008d44 <sbrk_aligned+0x34>
 8008d2e:	1cc4      	adds	r4, r0, #3
 8008d30:	f024 0403 	bic.w	r4, r4, #3
 8008d34:	42a0      	cmp	r0, r4
 8008d36:	d007      	beq.n	8008d48 <sbrk_aligned+0x38>
 8008d38:	1a21      	subs	r1, r4, r0
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f000 fbfe 	bl	800953c <_sbrk_r>
 8008d40:	3001      	adds	r0, #1
 8008d42:	d101      	bne.n	8008d48 <sbrk_aligned+0x38>
 8008d44:	f04f 34ff 	mov.w	r4, #4294967295
 8008d48:	4620      	mov	r0, r4
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	20004dd0 	.word	0x20004dd0

08008d50 <_malloc_r>:
 8008d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d54:	1ccd      	adds	r5, r1, #3
 8008d56:	f025 0503 	bic.w	r5, r5, #3
 8008d5a:	3508      	adds	r5, #8
 8008d5c:	2d0c      	cmp	r5, #12
 8008d5e:	bf38      	it	cc
 8008d60:	250c      	movcc	r5, #12
 8008d62:	2d00      	cmp	r5, #0
 8008d64:	4607      	mov	r7, r0
 8008d66:	db01      	blt.n	8008d6c <_malloc_r+0x1c>
 8008d68:	42a9      	cmp	r1, r5
 8008d6a:	d905      	bls.n	8008d78 <_malloc_r+0x28>
 8008d6c:	230c      	movs	r3, #12
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	2600      	movs	r6, #0
 8008d72:	4630      	mov	r0, r6
 8008d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e4c <_malloc_r+0xfc>
 8008d7c:	f000 f868 	bl	8008e50 <__malloc_lock>
 8008d80:	f8d8 3000 	ldr.w	r3, [r8]
 8008d84:	461c      	mov	r4, r3
 8008d86:	bb5c      	cbnz	r4, 8008de0 <_malloc_r+0x90>
 8008d88:	4629      	mov	r1, r5
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	f7ff ffc0 	bl	8008d10 <sbrk_aligned>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	4604      	mov	r4, r0
 8008d94:	d155      	bne.n	8008e42 <_malloc_r+0xf2>
 8008d96:	f8d8 4000 	ldr.w	r4, [r8]
 8008d9a:	4626      	mov	r6, r4
 8008d9c:	2e00      	cmp	r6, #0
 8008d9e:	d145      	bne.n	8008e2c <_malloc_r+0xdc>
 8008da0:	2c00      	cmp	r4, #0
 8008da2:	d048      	beq.n	8008e36 <_malloc_r+0xe6>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	4631      	mov	r1, r6
 8008da8:	4638      	mov	r0, r7
 8008daa:	eb04 0903 	add.w	r9, r4, r3
 8008dae:	f000 fbc5 	bl	800953c <_sbrk_r>
 8008db2:	4581      	cmp	r9, r0
 8008db4:	d13f      	bne.n	8008e36 <_malloc_r+0xe6>
 8008db6:	6821      	ldr	r1, [r4, #0]
 8008db8:	1a6d      	subs	r5, r5, r1
 8008dba:	4629      	mov	r1, r5
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	f7ff ffa7 	bl	8008d10 <sbrk_aligned>
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d037      	beq.n	8008e36 <_malloc_r+0xe6>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	442b      	add	r3, r5
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d038      	beq.n	8008e46 <_malloc_r+0xf6>
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	42a2      	cmp	r2, r4
 8008dd8:	d12b      	bne.n	8008e32 <_malloc_r+0xe2>
 8008dda:	2200      	movs	r2, #0
 8008ddc:	605a      	str	r2, [r3, #4]
 8008dde:	e00f      	b.n	8008e00 <_malloc_r+0xb0>
 8008de0:	6822      	ldr	r2, [r4, #0]
 8008de2:	1b52      	subs	r2, r2, r5
 8008de4:	d41f      	bmi.n	8008e26 <_malloc_r+0xd6>
 8008de6:	2a0b      	cmp	r2, #11
 8008de8:	d917      	bls.n	8008e1a <_malloc_r+0xca>
 8008dea:	1961      	adds	r1, r4, r5
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	6025      	str	r5, [r4, #0]
 8008df0:	bf18      	it	ne
 8008df2:	6059      	strne	r1, [r3, #4]
 8008df4:	6863      	ldr	r3, [r4, #4]
 8008df6:	bf08      	it	eq
 8008df8:	f8c8 1000 	streq.w	r1, [r8]
 8008dfc:	5162      	str	r2, [r4, r5]
 8008dfe:	604b      	str	r3, [r1, #4]
 8008e00:	4638      	mov	r0, r7
 8008e02:	f104 060b 	add.w	r6, r4, #11
 8008e06:	f000 f829 	bl	8008e5c <__malloc_unlock>
 8008e0a:	f026 0607 	bic.w	r6, r6, #7
 8008e0e:	1d23      	adds	r3, r4, #4
 8008e10:	1af2      	subs	r2, r6, r3
 8008e12:	d0ae      	beq.n	8008d72 <_malloc_r+0x22>
 8008e14:	1b9b      	subs	r3, r3, r6
 8008e16:	50a3      	str	r3, [r4, r2]
 8008e18:	e7ab      	b.n	8008d72 <_malloc_r+0x22>
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	6862      	ldr	r2, [r4, #4]
 8008e1e:	d1dd      	bne.n	8008ddc <_malloc_r+0x8c>
 8008e20:	f8c8 2000 	str.w	r2, [r8]
 8008e24:	e7ec      	b.n	8008e00 <_malloc_r+0xb0>
 8008e26:	4623      	mov	r3, r4
 8008e28:	6864      	ldr	r4, [r4, #4]
 8008e2a:	e7ac      	b.n	8008d86 <_malloc_r+0x36>
 8008e2c:	4634      	mov	r4, r6
 8008e2e:	6876      	ldr	r6, [r6, #4]
 8008e30:	e7b4      	b.n	8008d9c <_malloc_r+0x4c>
 8008e32:	4613      	mov	r3, r2
 8008e34:	e7cc      	b.n	8008dd0 <_malloc_r+0x80>
 8008e36:	230c      	movs	r3, #12
 8008e38:	603b      	str	r3, [r7, #0]
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	f000 f80e 	bl	8008e5c <__malloc_unlock>
 8008e40:	e797      	b.n	8008d72 <_malloc_r+0x22>
 8008e42:	6025      	str	r5, [r4, #0]
 8008e44:	e7dc      	b.n	8008e00 <_malloc_r+0xb0>
 8008e46:	605b      	str	r3, [r3, #4]
 8008e48:	deff      	udf	#255	; 0xff
 8008e4a:	bf00      	nop
 8008e4c:	20004dcc 	.word	0x20004dcc

08008e50 <__malloc_lock>:
 8008e50:	4801      	ldr	r0, [pc, #4]	; (8008e58 <__malloc_lock+0x8>)
 8008e52:	f7ff bf0e 	b.w	8008c72 <__retarget_lock_acquire_recursive>
 8008e56:	bf00      	nop
 8008e58:	20004dc8 	.word	0x20004dc8

08008e5c <__malloc_unlock>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	; (8008e64 <__malloc_unlock+0x8>)
 8008e5e:	f7ff bf09 	b.w	8008c74 <__retarget_lock_release_recursive>
 8008e62:	bf00      	nop
 8008e64:	20004dc8 	.word	0x20004dc8

08008e68 <__sfputc_r>:
 8008e68:	6893      	ldr	r3, [r2, #8]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	b410      	push	{r4}
 8008e70:	6093      	str	r3, [r2, #8]
 8008e72:	da08      	bge.n	8008e86 <__sfputc_r+0x1e>
 8008e74:	6994      	ldr	r4, [r2, #24]
 8008e76:	42a3      	cmp	r3, r4
 8008e78:	db01      	blt.n	8008e7e <__sfputc_r+0x16>
 8008e7a:	290a      	cmp	r1, #10
 8008e7c:	d103      	bne.n	8008e86 <__sfputc_r+0x1e>
 8008e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e82:	f000 bac5 	b.w	8009410 <__swbuf_r>
 8008e86:	6813      	ldr	r3, [r2, #0]
 8008e88:	1c58      	adds	r0, r3, #1
 8008e8a:	6010      	str	r0, [r2, #0]
 8008e8c:	7019      	strb	r1, [r3, #0]
 8008e8e:	4608      	mov	r0, r1
 8008e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <__sfputs_r>:
 8008e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e98:	4606      	mov	r6, r0
 8008e9a:	460f      	mov	r7, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	18d5      	adds	r5, r2, r3
 8008ea0:	42ac      	cmp	r4, r5
 8008ea2:	d101      	bne.n	8008ea8 <__sfputs_r+0x12>
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	e007      	b.n	8008eb8 <__sfputs_r+0x22>
 8008ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eac:	463a      	mov	r2, r7
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7ff ffda 	bl	8008e68 <__sfputc_r>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d1f3      	bne.n	8008ea0 <__sfputs_r+0xa>
 8008eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ebc <_vfiprintf_r>:
 8008ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec0:	460d      	mov	r5, r1
 8008ec2:	b09d      	sub	sp, #116	; 0x74
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	4698      	mov	r8, r3
 8008ec8:	4606      	mov	r6, r0
 8008eca:	b118      	cbz	r0, 8008ed4 <_vfiprintf_r+0x18>
 8008ecc:	6a03      	ldr	r3, [r0, #32]
 8008ece:	b90b      	cbnz	r3, 8008ed4 <_vfiprintf_r+0x18>
 8008ed0:	f7ff fd74 	bl	80089bc <__sinit>
 8008ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ed6:	07d9      	lsls	r1, r3, #31
 8008ed8:	d405      	bmi.n	8008ee6 <_vfiprintf_r+0x2a>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	059a      	lsls	r2, r3, #22
 8008ede:	d402      	bmi.n	8008ee6 <_vfiprintf_r+0x2a>
 8008ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ee2:	f7ff fec6 	bl	8008c72 <__retarget_lock_acquire_recursive>
 8008ee6:	89ab      	ldrh	r3, [r5, #12]
 8008ee8:	071b      	lsls	r3, r3, #28
 8008eea:	d501      	bpl.n	8008ef0 <_vfiprintf_r+0x34>
 8008eec:	692b      	ldr	r3, [r5, #16]
 8008eee:	b99b      	cbnz	r3, 8008f18 <_vfiprintf_r+0x5c>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f000 faca 	bl	800948c <__swsetup_r>
 8008ef8:	b170      	cbz	r0, 8008f18 <_vfiprintf_r+0x5c>
 8008efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008efc:	07dc      	lsls	r4, r3, #31
 8008efe:	d504      	bpl.n	8008f0a <_vfiprintf_r+0x4e>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	b01d      	add	sp, #116	; 0x74
 8008f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	0598      	lsls	r0, r3, #22
 8008f0e:	d4f7      	bmi.n	8008f00 <_vfiprintf_r+0x44>
 8008f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f12:	f7ff feaf 	bl	8008c74 <__retarget_lock_release_recursive>
 8008f16:	e7f3      	b.n	8008f00 <_vfiprintf_r+0x44>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1c:	2320      	movs	r3, #32
 8008f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f26:	2330      	movs	r3, #48	; 0x30
 8008f28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80090dc <_vfiprintf_r+0x220>
 8008f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f30:	f04f 0901 	mov.w	r9, #1
 8008f34:	4623      	mov	r3, r4
 8008f36:	469a      	mov	sl, r3
 8008f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f3c:	b10a      	cbz	r2, 8008f42 <_vfiprintf_r+0x86>
 8008f3e:	2a25      	cmp	r2, #37	; 0x25
 8008f40:	d1f9      	bne.n	8008f36 <_vfiprintf_r+0x7a>
 8008f42:	ebba 0b04 	subs.w	fp, sl, r4
 8008f46:	d00b      	beq.n	8008f60 <_vfiprintf_r+0xa4>
 8008f48:	465b      	mov	r3, fp
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f7ff ffa1 	bl	8008e96 <__sfputs_r>
 8008f54:	3001      	adds	r0, #1
 8008f56:	f000 80a9 	beq.w	80090ac <_vfiprintf_r+0x1f0>
 8008f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f5c:	445a      	add	r2, fp
 8008f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f60:	f89a 3000 	ldrb.w	r3, [sl]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 80a1 	beq.w	80090ac <_vfiprintf_r+0x1f0>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f74:	f10a 0a01 	add.w	sl, sl, #1
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	9307      	str	r3, [sp, #28]
 8008f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f80:	931a      	str	r3, [sp, #104]	; 0x68
 8008f82:	4654      	mov	r4, sl
 8008f84:	2205      	movs	r2, #5
 8008f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f8a:	4854      	ldr	r0, [pc, #336]	; (80090dc <_vfiprintf_r+0x220>)
 8008f8c:	f7f7 f940 	bl	8000210 <memchr>
 8008f90:	9a04      	ldr	r2, [sp, #16]
 8008f92:	b9d8      	cbnz	r0, 8008fcc <_vfiprintf_r+0x110>
 8008f94:	06d1      	lsls	r1, r2, #27
 8008f96:	bf44      	itt	mi
 8008f98:	2320      	movmi	r3, #32
 8008f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f9e:	0713      	lsls	r3, r2, #28
 8008fa0:	bf44      	itt	mi
 8008fa2:	232b      	movmi	r3, #43	; 0x2b
 8008fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fac:	2b2a      	cmp	r3, #42	; 0x2a
 8008fae:	d015      	beq.n	8008fdc <_vfiprintf_r+0x120>
 8008fb0:	9a07      	ldr	r2, [sp, #28]
 8008fb2:	4654      	mov	r4, sl
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f04f 0c0a 	mov.w	ip, #10
 8008fba:	4621      	mov	r1, r4
 8008fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc0:	3b30      	subs	r3, #48	; 0x30
 8008fc2:	2b09      	cmp	r3, #9
 8008fc4:	d94d      	bls.n	8009062 <_vfiprintf_r+0x1a6>
 8008fc6:	b1b0      	cbz	r0, 8008ff6 <_vfiprintf_r+0x13a>
 8008fc8:	9207      	str	r2, [sp, #28]
 8008fca:	e014      	b.n	8008ff6 <_vfiprintf_r+0x13a>
 8008fcc:	eba0 0308 	sub.w	r3, r0, r8
 8008fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	46a2      	mov	sl, r4
 8008fda:	e7d2      	b.n	8008f82 <_vfiprintf_r+0xc6>
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	1d19      	adds	r1, r3, #4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	9103      	str	r1, [sp, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bfbb      	ittet	lt
 8008fe8:	425b      	neglt	r3, r3
 8008fea:	f042 0202 	orrlt.w	r2, r2, #2
 8008fee:	9307      	strge	r3, [sp, #28]
 8008ff0:	9307      	strlt	r3, [sp, #28]
 8008ff2:	bfb8      	it	lt
 8008ff4:	9204      	strlt	r2, [sp, #16]
 8008ff6:	7823      	ldrb	r3, [r4, #0]
 8008ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8008ffa:	d10c      	bne.n	8009016 <_vfiprintf_r+0x15a>
 8008ffc:	7863      	ldrb	r3, [r4, #1]
 8008ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8009000:	d134      	bne.n	800906c <_vfiprintf_r+0x1b0>
 8009002:	9b03      	ldr	r3, [sp, #12]
 8009004:	1d1a      	adds	r2, r3, #4
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	9203      	str	r2, [sp, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	bfb8      	it	lt
 800900e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009012:	3402      	adds	r4, #2
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80090ec <_vfiprintf_r+0x230>
 800901a:	7821      	ldrb	r1, [r4, #0]
 800901c:	2203      	movs	r2, #3
 800901e:	4650      	mov	r0, sl
 8009020:	f7f7 f8f6 	bl	8000210 <memchr>
 8009024:	b138      	cbz	r0, 8009036 <_vfiprintf_r+0x17a>
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	eba0 000a 	sub.w	r0, r0, sl
 800902c:	2240      	movs	r2, #64	; 0x40
 800902e:	4082      	lsls	r2, r0
 8009030:	4313      	orrs	r3, r2
 8009032:	3401      	adds	r4, #1
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800903a:	4829      	ldr	r0, [pc, #164]	; (80090e0 <_vfiprintf_r+0x224>)
 800903c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009040:	2206      	movs	r2, #6
 8009042:	f7f7 f8e5 	bl	8000210 <memchr>
 8009046:	2800      	cmp	r0, #0
 8009048:	d03f      	beq.n	80090ca <_vfiprintf_r+0x20e>
 800904a:	4b26      	ldr	r3, [pc, #152]	; (80090e4 <_vfiprintf_r+0x228>)
 800904c:	bb1b      	cbnz	r3, 8009096 <_vfiprintf_r+0x1da>
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	3307      	adds	r3, #7
 8009052:	f023 0307 	bic.w	r3, r3, #7
 8009056:	3308      	adds	r3, #8
 8009058:	9303      	str	r3, [sp, #12]
 800905a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905c:	443b      	add	r3, r7
 800905e:	9309      	str	r3, [sp, #36]	; 0x24
 8009060:	e768      	b.n	8008f34 <_vfiprintf_r+0x78>
 8009062:	fb0c 3202 	mla	r2, ip, r2, r3
 8009066:	460c      	mov	r4, r1
 8009068:	2001      	movs	r0, #1
 800906a:	e7a6      	b.n	8008fba <_vfiprintf_r+0xfe>
 800906c:	2300      	movs	r3, #0
 800906e:	3401      	adds	r4, #1
 8009070:	9305      	str	r3, [sp, #20]
 8009072:	4619      	mov	r1, r3
 8009074:	f04f 0c0a 	mov.w	ip, #10
 8009078:	4620      	mov	r0, r4
 800907a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800907e:	3a30      	subs	r2, #48	; 0x30
 8009080:	2a09      	cmp	r2, #9
 8009082:	d903      	bls.n	800908c <_vfiprintf_r+0x1d0>
 8009084:	2b00      	cmp	r3, #0
 8009086:	d0c6      	beq.n	8009016 <_vfiprintf_r+0x15a>
 8009088:	9105      	str	r1, [sp, #20]
 800908a:	e7c4      	b.n	8009016 <_vfiprintf_r+0x15a>
 800908c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009090:	4604      	mov	r4, r0
 8009092:	2301      	movs	r3, #1
 8009094:	e7f0      	b.n	8009078 <_vfiprintf_r+0x1bc>
 8009096:	ab03      	add	r3, sp, #12
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	462a      	mov	r2, r5
 800909c:	4b12      	ldr	r3, [pc, #72]	; (80090e8 <_vfiprintf_r+0x22c>)
 800909e:	a904      	add	r1, sp, #16
 80090a0:	4630      	mov	r0, r6
 80090a2:	f3af 8000 	nop.w
 80090a6:	4607      	mov	r7, r0
 80090a8:	1c78      	adds	r0, r7, #1
 80090aa:	d1d6      	bne.n	800905a <_vfiprintf_r+0x19e>
 80090ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ae:	07d9      	lsls	r1, r3, #31
 80090b0:	d405      	bmi.n	80090be <_vfiprintf_r+0x202>
 80090b2:	89ab      	ldrh	r3, [r5, #12]
 80090b4:	059a      	lsls	r2, r3, #22
 80090b6:	d402      	bmi.n	80090be <_vfiprintf_r+0x202>
 80090b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ba:	f7ff fddb 	bl	8008c74 <__retarget_lock_release_recursive>
 80090be:	89ab      	ldrh	r3, [r5, #12]
 80090c0:	065b      	lsls	r3, r3, #25
 80090c2:	f53f af1d 	bmi.w	8008f00 <_vfiprintf_r+0x44>
 80090c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090c8:	e71c      	b.n	8008f04 <_vfiprintf_r+0x48>
 80090ca:	ab03      	add	r3, sp, #12
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	462a      	mov	r2, r5
 80090d0:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <_vfiprintf_r+0x22c>)
 80090d2:	a904      	add	r1, sp, #16
 80090d4:	4630      	mov	r0, r6
 80090d6:	f000 f879 	bl	80091cc <_printf_i>
 80090da:	e7e4      	b.n	80090a6 <_vfiprintf_r+0x1ea>
 80090dc:	080097ec 	.word	0x080097ec
 80090e0:	080097f6 	.word	0x080097f6
 80090e4:	00000000 	.word	0x00000000
 80090e8:	08008e97 	.word	0x08008e97
 80090ec:	080097f2 	.word	0x080097f2

080090f0 <_printf_common>:
 80090f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f4:	4616      	mov	r6, r2
 80090f6:	4699      	mov	r9, r3
 80090f8:	688a      	ldr	r2, [r1, #8]
 80090fa:	690b      	ldr	r3, [r1, #16]
 80090fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009100:	4293      	cmp	r3, r2
 8009102:	bfb8      	it	lt
 8009104:	4613      	movlt	r3, r2
 8009106:	6033      	str	r3, [r6, #0]
 8009108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800910c:	4607      	mov	r7, r0
 800910e:	460c      	mov	r4, r1
 8009110:	b10a      	cbz	r2, 8009116 <_printf_common+0x26>
 8009112:	3301      	adds	r3, #1
 8009114:	6033      	str	r3, [r6, #0]
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	0699      	lsls	r1, r3, #26
 800911a:	bf42      	ittt	mi
 800911c:	6833      	ldrmi	r3, [r6, #0]
 800911e:	3302      	addmi	r3, #2
 8009120:	6033      	strmi	r3, [r6, #0]
 8009122:	6825      	ldr	r5, [r4, #0]
 8009124:	f015 0506 	ands.w	r5, r5, #6
 8009128:	d106      	bne.n	8009138 <_printf_common+0x48>
 800912a:	f104 0a19 	add.w	sl, r4, #25
 800912e:	68e3      	ldr	r3, [r4, #12]
 8009130:	6832      	ldr	r2, [r6, #0]
 8009132:	1a9b      	subs	r3, r3, r2
 8009134:	42ab      	cmp	r3, r5
 8009136:	dc26      	bgt.n	8009186 <_printf_common+0x96>
 8009138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800913c:	1e13      	subs	r3, r2, #0
 800913e:	6822      	ldr	r2, [r4, #0]
 8009140:	bf18      	it	ne
 8009142:	2301      	movne	r3, #1
 8009144:	0692      	lsls	r2, r2, #26
 8009146:	d42b      	bmi.n	80091a0 <_printf_common+0xb0>
 8009148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800914c:	4649      	mov	r1, r9
 800914e:	4638      	mov	r0, r7
 8009150:	47c0      	blx	r8
 8009152:	3001      	adds	r0, #1
 8009154:	d01e      	beq.n	8009194 <_printf_common+0xa4>
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	6922      	ldr	r2, [r4, #16]
 800915a:	f003 0306 	and.w	r3, r3, #6
 800915e:	2b04      	cmp	r3, #4
 8009160:	bf02      	ittt	eq
 8009162:	68e5      	ldreq	r5, [r4, #12]
 8009164:	6833      	ldreq	r3, [r6, #0]
 8009166:	1aed      	subeq	r5, r5, r3
 8009168:	68a3      	ldr	r3, [r4, #8]
 800916a:	bf0c      	ite	eq
 800916c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009170:	2500      	movne	r5, #0
 8009172:	4293      	cmp	r3, r2
 8009174:	bfc4      	itt	gt
 8009176:	1a9b      	subgt	r3, r3, r2
 8009178:	18ed      	addgt	r5, r5, r3
 800917a:	2600      	movs	r6, #0
 800917c:	341a      	adds	r4, #26
 800917e:	42b5      	cmp	r5, r6
 8009180:	d11a      	bne.n	80091b8 <_printf_common+0xc8>
 8009182:	2000      	movs	r0, #0
 8009184:	e008      	b.n	8009198 <_printf_common+0xa8>
 8009186:	2301      	movs	r3, #1
 8009188:	4652      	mov	r2, sl
 800918a:	4649      	mov	r1, r9
 800918c:	4638      	mov	r0, r7
 800918e:	47c0      	blx	r8
 8009190:	3001      	adds	r0, #1
 8009192:	d103      	bne.n	800919c <_printf_common+0xac>
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919c:	3501      	adds	r5, #1
 800919e:	e7c6      	b.n	800912e <_printf_common+0x3e>
 80091a0:	18e1      	adds	r1, r4, r3
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	2030      	movs	r0, #48	; 0x30
 80091a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091aa:	4422      	add	r2, r4
 80091ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091b4:	3302      	adds	r3, #2
 80091b6:	e7c7      	b.n	8009148 <_printf_common+0x58>
 80091b8:	2301      	movs	r3, #1
 80091ba:	4622      	mov	r2, r4
 80091bc:	4649      	mov	r1, r9
 80091be:	4638      	mov	r0, r7
 80091c0:	47c0      	blx	r8
 80091c2:	3001      	adds	r0, #1
 80091c4:	d0e6      	beq.n	8009194 <_printf_common+0xa4>
 80091c6:	3601      	adds	r6, #1
 80091c8:	e7d9      	b.n	800917e <_printf_common+0x8e>
	...

080091cc <_printf_i>:
 80091cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d0:	7e0f      	ldrb	r7, [r1, #24]
 80091d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091d4:	2f78      	cmp	r7, #120	; 0x78
 80091d6:	4691      	mov	r9, r2
 80091d8:	4680      	mov	r8, r0
 80091da:	460c      	mov	r4, r1
 80091dc:	469a      	mov	sl, r3
 80091de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091e2:	d807      	bhi.n	80091f4 <_printf_i+0x28>
 80091e4:	2f62      	cmp	r7, #98	; 0x62
 80091e6:	d80a      	bhi.n	80091fe <_printf_i+0x32>
 80091e8:	2f00      	cmp	r7, #0
 80091ea:	f000 80d4 	beq.w	8009396 <_printf_i+0x1ca>
 80091ee:	2f58      	cmp	r7, #88	; 0x58
 80091f0:	f000 80c0 	beq.w	8009374 <_printf_i+0x1a8>
 80091f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091fc:	e03a      	b.n	8009274 <_printf_i+0xa8>
 80091fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009202:	2b15      	cmp	r3, #21
 8009204:	d8f6      	bhi.n	80091f4 <_printf_i+0x28>
 8009206:	a101      	add	r1, pc, #4	; (adr r1, 800920c <_printf_i+0x40>)
 8009208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800920c:	08009265 	.word	0x08009265
 8009210:	08009279 	.word	0x08009279
 8009214:	080091f5 	.word	0x080091f5
 8009218:	080091f5 	.word	0x080091f5
 800921c:	080091f5 	.word	0x080091f5
 8009220:	080091f5 	.word	0x080091f5
 8009224:	08009279 	.word	0x08009279
 8009228:	080091f5 	.word	0x080091f5
 800922c:	080091f5 	.word	0x080091f5
 8009230:	080091f5 	.word	0x080091f5
 8009234:	080091f5 	.word	0x080091f5
 8009238:	0800937d 	.word	0x0800937d
 800923c:	080092a5 	.word	0x080092a5
 8009240:	08009337 	.word	0x08009337
 8009244:	080091f5 	.word	0x080091f5
 8009248:	080091f5 	.word	0x080091f5
 800924c:	0800939f 	.word	0x0800939f
 8009250:	080091f5 	.word	0x080091f5
 8009254:	080092a5 	.word	0x080092a5
 8009258:	080091f5 	.word	0x080091f5
 800925c:	080091f5 	.word	0x080091f5
 8009260:	0800933f 	.word	0x0800933f
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	1d1a      	adds	r2, r3, #4
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	602a      	str	r2, [r5, #0]
 800926c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009274:	2301      	movs	r3, #1
 8009276:	e09f      	b.n	80093b8 <_printf_i+0x1ec>
 8009278:	6820      	ldr	r0, [r4, #0]
 800927a:	682b      	ldr	r3, [r5, #0]
 800927c:	0607      	lsls	r7, r0, #24
 800927e:	f103 0104 	add.w	r1, r3, #4
 8009282:	6029      	str	r1, [r5, #0]
 8009284:	d501      	bpl.n	800928a <_printf_i+0xbe>
 8009286:	681e      	ldr	r6, [r3, #0]
 8009288:	e003      	b.n	8009292 <_printf_i+0xc6>
 800928a:	0646      	lsls	r6, r0, #25
 800928c:	d5fb      	bpl.n	8009286 <_printf_i+0xba>
 800928e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009292:	2e00      	cmp	r6, #0
 8009294:	da03      	bge.n	800929e <_printf_i+0xd2>
 8009296:	232d      	movs	r3, #45	; 0x2d
 8009298:	4276      	negs	r6, r6
 800929a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929e:	485a      	ldr	r0, [pc, #360]	; (8009408 <_printf_i+0x23c>)
 80092a0:	230a      	movs	r3, #10
 80092a2:	e012      	b.n	80092ca <_printf_i+0xfe>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	6820      	ldr	r0, [r4, #0]
 80092a8:	1d19      	adds	r1, r3, #4
 80092aa:	6029      	str	r1, [r5, #0]
 80092ac:	0605      	lsls	r5, r0, #24
 80092ae:	d501      	bpl.n	80092b4 <_printf_i+0xe8>
 80092b0:	681e      	ldr	r6, [r3, #0]
 80092b2:	e002      	b.n	80092ba <_printf_i+0xee>
 80092b4:	0641      	lsls	r1, r0, #25
 80092b6:	d5fb      	bpl.n	80092b0 <_printf_i+0xe4>
 80092b8:	881e      	ldrh	r6, [r3, #0]
 80092ba:	4853      	ldr	r0, [pc, #332]	; (8009408 <_printf_i+0x23c>)
 80092bc:	2f6f      	cmp	r7, #111	; 0x6f
 80092be:	bf0c      	ite	eq
 80092c0:	2308      	moveq	r3, #8
 80092c2:	230a      	movne	r3, #10
 80092c4:	2100      	movs	r1, #0
 80092c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ca:	6865      	ldr	r5, [r4, #4]
 80092cc:	60a5      	str	r5, [r4, #8]
 80092ce:	2d00      	cmp	r5, #0
 80092d0:	bfa2      	ittt	ge
 80092d2:	6821      	ldrge	r1, [r4, #0]
 80092d4:	f021 0104 	bicge.w	r1, r1, #4
 80092d8:	6021      	strge	r1, [r4, #0]
 80092da:	b90e      	cbnz	r6, 80092e0 <_printf_i+0x114>
 80092dc:	2d00      	cmp	r5, #0
 80092de:	d04b      	beq.n	8009378 <_printf_i+0x1ac>
 80092e0:	4615      	mov	r5, r2
 80092e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80092e6:	fb03 6711 	mls	r7, r3, r1, r6
 80092ea:	5dc7      	ldrb	r7, [r0, r7]
 80092ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092f0:	4637      	mov	r7, r6
 80092f2:	42bb      	cmp	r3, r7
 80092f4:	460e      	mov	r6, r1
 80092f6:	d9f4      	bls.n	80092e2 <_printf_i+0x116>
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d10b      	bne.n	8009314 <_printf_i+0x148>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	07de      	lsls	r6, r3, #31
 8009300:	d508      	bpl.n	8009314 <_printf_i+0x148>
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	6861      	ldr	r1, [r4, #4]
 8009306:	4299      	cmp	r1, r3
 8009308:	bfde      	ittt	le
 800930a:	2330      	movle	r3, #48	; 0x30
 800930c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009310:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009314:	1b52      	subs	r2, r2, r5
 8009316:	6122      	str	r2, [r4, #16]
 8009318:	f8cd a000 	str.w	sl, [sp]
 800931c:	464b      	mov	r3, r9
 800931e:	aa03      	add	r2, sp, #12
 8009320:	4621      	mov	r1, r4
 8009322:	4640      	mov	r0, r8
 8009324:	f7ff fee4 	bl	80090f0 <_printf_common>
 8009328:	3001      	adds	r0, #1
 800932a:	d14a      	bne.n	80093c2 <_printf_i+0x1f6>
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	b004      	add	sp, #16
 8009332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	f043 0320 	orr.w	r3, r3, #32
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	4833      	ldr	r0, [pc, #204]	; (800940c <_printf_i+0x240>)
 8009340:	2778      	movs	r7, #120	; 0x78
 8009342:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	6829      	ldr	r1, [r5, #0]
 800934a:	061f      	lsls	r7, r3, #24
 800934c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009350:	d402      	bmi.n	8009358 <_printf_i+0x18c>
 8009352:	065f      	lsls	r7, r3, #25
 8009354:	bf48      	it	mi
 8009356:	b2b6      	uxthmi	r6, r6
 8009358:	07df      	lsls	r7, r3, #31
 800935a:	bf48      	it	mi
 800935c:	f043 0320 	orrmi.w	r3, r3, #32
 8009360:	6029      	str	r1, [r5, #0]
 8009362:	bf48      	it	mi
 8009364:	6023      	strmi	r3, [r4, #0]
 8009366:	b91e      	cbnz	r6, 8009370 <_printf_i+0x1a4>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	f023 0320 	bic.w	r3, r3, #32
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	2310      	movs	r3, #16
 8009372:	e7a7      	b.n	80092c4 <_printf_i+0xf8>
 8009374:	4824      	ldr	r0, [pc, #144]	; (8009408 <_printf_i+0x23c>)
 8009376:	e7e4      	b.n	8009342 <_printf_i+0x176>
 8009378:	4615      	mov	r5, r2
 800937a:	e7bd      	b.n	80092f8 <_printf_i+0x12c>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	6826      	ldr	r6, [r4, #0]
 8009380:	6961      	ldr	r1, [r4, #20]
 8009382:	1d18      	adds	r0, r3, #4
 8009384:	6028      	str	r0, [r5, #0]
 8009386:	0635      	lsls	r5, r6, #24
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	d501      	bpl.n	8009390 <_printf_i+0x1c4>
 800938c:	6019      	str	r1, [r3, #0]
 800938e:	e002      	b.n	8009396 <_printf_i+0x1ca>
 8009390:	0670      	lsls	r0, r6, #25
 8009392:	d5fb      	bpl.n	800938c <_printf_i+0x1c0>
 8009394:	8019      	strh	r1, [r3, #0]
 8009396:	2300      	movs	r3, #0
 8009398:	6123      	str	r3, [r4, #16]
 800939a:	4615      	mov	r5, r2
 800939c:	e7bc      	b.n	8009318 <_printf_i+0x14c>
 800939e:	682b      	ldr	r3, [r5, #0]
 80093a0:	1d1a      	adds	r2, r3, #4
 80093a2:	602a      	str	r2, [r5, #0]
 80093a4:	681d      	ldr	r5, [r3, #0]
 80093a6:	6862      	ldr	r2, [r4, #4]
 80093a8:	2100      	movs	r1, #0
 80093aa:	4628      	mov	r0, r5
 80093ac:	f7f6 ff30 	bl	8000210 <memchr>
 80093b0:	b108      	cbz	r0, 80093b6 <_printf_i+0x1ea>
 80093b2:	1b40      	subs	r0, r0, r5
 80093b4:	6060      	str	r0, [r4, #4]
 80093b6:	6863      	ldr	r3, [r4, #4]
 80093b8:	6123      	str	r3, [r4, #16]
 80093ba:	2300      	movs	r3, #0
 80093bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093c0:	e7aa      	b.n	8009318 <_printf_i+0x14c>
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	462a      	mov	r2, r5
 80093c6:	4649      	mov	r1, r9
 80093c8:	4640      	mov	r0, r8
 80093ca:	47d0      	blx	sl
 80093cc:	3001      	adds	r0, #1
 80093ce:	d0ad      	beq.n	800932c <_printf_i+0x160>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	079b      	lsls	r3, r3, #30
 80093d4:	d413      	bmi.n	80093fe <_printf_i+0x232>
 80093d6:	68e0      	ldr	r0, [r4, #12]
 80093d8:	9b03      	ldr	r3, [sp, #12]
 80093da:	4298      	cmp	r0, r3
 80093dc:	bfb8      	it	lt
 80093de:	4618      	movlt	r0, r3
 80093e0:	e7a6      	b.n	8009330 <_printf_i+0x164>
 80093e2:	2301      	movs	r3, #1
 80093e4:	4632      	mov	r2, r6
 80093e6:	4649      	mov	r1, r9
 80093e8:	4640      	mov	r0, r8
 80093ea:	47d0      	blx	sl
 80093ec:	3001      	adds	r0, #1
 80093ee:	d09d      	beq.n	800932c <_printf_i+0x160>
 80093f0:	3501      	adds	r5, #1
 80093f2:	68e3      	ldr	r3, [r4, #12]
 80093f4:	9903      	ldr	r1, [sp, #12]
 80093f6:	1a5b      	subs	r3, r3, r1
 80093f8:	42ab      	cmp	r3, r5
 80093fa:	dcf2      	bgt.n	80093e2 <_printf_i+0x216>
 80093fc:	e7eb      	b.n	80093d6 <_printf_i+0x20a>
 80093fe:	2500      	movs	r5, #0
 8009400:	f104 0619 	add.w	r6, r4, #25
 8009404:	e7f5      	b.n	80093f2 <_printf_i+0x226>
 8009406:	bf00      	nop
 8009408:	080097fd 	.word	0x080097fd
 800940c:	0800980e 	.word	0x0800980e

08009410 <__swbuf_r>:
 8009410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009412:	460e      	mov	r6, r1
 8009414:	4614      	mov	r4, r2
 8009416:	4605      	mov	r5, r0
 8009418:	b118      	cbz	r0, 8009422 <__swbuf_r+0x12>
 800941a:	6a03      	ldr	r3, [r0, #32]
 800941c:	b90b      	cbnz	r3, 8009422 <__swbuf_r+0x12>
 800941e:	f7ff facd 	bl	80089bc <__sinit>
 8009422:	69a3      	ldr	r3, [r4, #24]
 8009424:	60a3      	str	r3, [r4, #8]
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	071a      	lsls	r2, r3, #28
 800942a:	d525      	bpl.n	8009478 <__swbuf_r+0x68>
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	b31b      	cbz	r3, 8009478 <__swbuf_r+0x68>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	6922      	ldr	r2, [r4, #16]
 8009434:	1a98      	subs	r0, r3, r2
 8009436:	6963      	ldr	r3, [r4, #20]
 8009438:	b2f6      	uxtb	r6, r6
 800943a:	4283      	cmp	r3, r0
 800943c:	4637      	mov	r7, r6
 800943e:	dc04      	bgt.n	800944a <__swbuf_r+0x3a>
 8009440:	4621      	mov	r1, r4
 8009442:	4628      	mov	r0, r5
 8009444:	f7ff f9f2 	bl	800882c <_fflush_r>
 8009448:	b9e0      	cbnz	r0, 8009484 <__swbuf_r+0x74>
 800944a:	68a3      	ldr	r3, [r4, #8]
 800944c:	3b01      	subs	r3, #1
 800944e:	60a3      	str	r3, [r4, #8]
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	6022      	str	r2, [r4, #0]
 8009456:	701e      	strb	r6, [r3, #0]
 8009458:	6962      	ldr	r2, [r4, #20]
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	429a      	cmp	r2, r3
 800945e:	d004      	beq.n	800946a <__swbuf_r+0x5a>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	07db      	lsls	r3, r3, #31
 8009464:	d506      	bpl.n	8009474 <__swbuf_r+0x64>
 8009466:	2e0a      	cmp	r6, #10
 8009468:	d104      	bne.n	8009474 <__swbuf_r+0x64>
 800946a:	4621      	mov	r1, r4
 800946c:	4628      	mov	r0, r5
 800946e:	f7ff f9dd 	bl	800882c <_fflush_r>
 8009472:	b938      	cbnz	r0, 8009484 <__swbuf_r+0x74>
 8009474:	4638      	mov	r0, r7
 8009476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009478:	4621      	mov	r1, r4
 800947a:	4628      	mov	r0, r5
 800947c:	f000 f806 	bl	800948c <__swsetup_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	d0d5      	beq.n	8009430 <__swbuf_r+0x20>
 8009484:	f04f 37ff 	mov.w	r7, #4294967295
 8009488:	e7f4      	b.n	8009474 <__swbuf_r+0x64>
	...

0800948c <__swsetup_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4b2a      	ldr	r3, [pc, #168]	; (8009538 <__swsetup_r+0xac>)
 8009490:	4605      	mov	r5, r0
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	460c      	mov	r4, r1
 8009496:	b118      	cbz	r0, 80094a0 <__swsetup_r+0x14>
 8009498:	6a03      	ldr	r3, [r0, #32]
 800949a:	b90b      	cbnz	r3, 80094a0 <__swsetup_r+0x14>
 800949c:	f7ff fa8e 	bl	80089bc <__sinit>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094a6:	0718      	lsls	r0, r3, #28
 80094a8:	d422      	bmi.n	80094f0 <__swsetup_r+0x64>
 80094aa:	06d9      	lsls	r1, r3, #27
 80094ac:	d407      	bmi.n	80094be <__swsetup_r+0x32>
 80094ae:	2309      	movs	r3, #9
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	e034      	b.n	8009528 <__swsetup_r+0x9c>
 80094be:	0758      	lsls	r0, r3, #29
 80094c0:	d512      	bpl.n	80094e8 <__swsetup_r+0x5c>
 80094c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094c4:	b141      	cbz	r1, 80094d8 <__swsetup_r+0x4c>
 80094c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094ca:	4299      	cmp	r1, r3
 80094cc:	d002      	beq.n	80094d4 <__swsetup_r+0x48>
 80094ce:	4628      	mov	r0, r5
 80094d0:	f7ff fbd2 	bl	8008c78 <_free_r>
 80094d4:	2300      	movs	r3, #0
 80094d6:	6363      	str	r3, [r4, #52]	; 0x34
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094de:	81a3      	strh	r3, [r4, #12]
 80094e0:	2300      	movs	r3, #0
 80094e2:	6063      	str	r3, [r4, #4]
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f043 0308 	orr.w	r3, r3, #8
 80094ee:	81a3      	strh	r3, [r4, #12]
 80094f0:	6923      	ldr	r3, [r4, #16]
 80094f2:	b94b      	cbnz	r3, 8009508 <__swsetup_r+0x7c>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094fe:	d003      	beq.n	8009508 <__swsetup_r+0x7c>
 8009500:	4621      	mov	r1, r4
 8009502:	4628      	mov	r0, r5
 8009504:	f000 f850 	bl	80095a8 <__smakebuf_r>
 8009508:	89a0      	ldrh	r0, [r4, #12]
 800950a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800950e:	f010 0301 	ands.w	r3, r0, #1
 8009512:	d00a      	beq.n	800952a <__swsetup_r+0x9e>
 8009514:	2300      	movs	r3, #0
 8009516:	60a3      	str	r3, [r4, #8]
 8009518:	6963      	ldr	r3, [r4, #20]
 800951a:	425b      	negs	r3, r3
 800951c:	61a3      	str	r3, [r4, #24]
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	b943      	cbnz	r3, 8009534 <__swsetup_r+0xa8>
 8009522:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009526:	d1c4      	bne.n	80094b2 <__swsetup_r+0x26>
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	0781      	lsls	r1, r0, #30
 800952c:	bf58      	it	pl
 800952e:	6963      	ldrpl	r3, [r4, #20]
 8009530:	60a3      	str	r3, [r4, #8]
 8009532:	e7f4      	b.n	800951e <__swsetup_r+0x92>
 8009534:	2000      	movs	r0, #0
 8009536:	e7f7      	b.n	8009528 <__swsetup_r+0x9c>
 8009538:	200000c4 	.word	0x200000c4

0800953c <_sbrk_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d06      	ldr	r5, [pc, #24]	; (8009558 <_sbrk_r+0x1c>)
 8009540:	2300      	movs	r3, #0
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	f7f7 fd50 	bl	8000fec <_sbrk>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_sbrk_r+0x1a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_sbrk_r+0x1a>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	20004dc4 	.word	0x20004dc4

0800955c <__swhatbuf_r>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	460c      	mov	r4, r1
 8009560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009564:	2900      	cmp	r1, #0
 8009566:	b096      	sub	sp, #88	; 0x58
 8009568:	4615      	mov	r5, r2
 800956a:	461e      	mov	r6, r3
 800956c:	da0d      	bge.n	800958a <__swhatbuf_r+0x2e>
 800956e:	89a3      	ldrh	r3, [r4, #12]
 8009570:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009574:	f04f 0100 	mov.w	r1, #0
 8009578:	bf0c      	ite	eq
 800957a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800957e:	2340      	movne	r3, #64	; 0x40
 8009580:	2000      	movs	r0, #0
 8009582:	6031      	str	r1, [r6, #0]
 8009584:	602b      	str	r3, [r5, #0]
 8009586:	b016      	add	sp, #88	; 0x58
 8009588:	bd70      	pop	{r4, r5, r6, pc}
 800958a:	466a      	mov	r2, sp
 800958c:	f000 f848 	bl	8009620 <_fstat_r>
 8009590:	2800      	cmp	r0, #0
 8009592:	dbec      	blt.n	800956e <__swhatbuf_r+0x12>
 8009594:	9901      	ldr	r1, [sp, #4]
 8009596:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800959a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800959e:	4259      	negs	r1, r3
 80095a0:	4159      	adcs	r1, r3
 80095a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095a6:	e7eb      	b.n	8009580 <__swhatbuf_r+0x24>

080095a8 <__smakebuf_r>:
 80095a8:	898b      	ldrh	r3, [r1, #12]
 80095aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095ac:	079d      	lsls	r5, r3, #30
 80095ae:	4606      	mov	r6, r0
 80095b0:	460c      	mov	r4, r1
 80095b2:	d507      	bpl.n	80095c4 <__smakebuf_r+0x1c>
 80095b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	6123      	str	r3, [r4, #16]
 80095bc:	2301      	movs	r3, #1
 80095be:	6163      	str	r3, [r4, #20]
 80095c0:	b002      	add	sp, #8
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
 80095c4:	ab01      	add	r3, sp, #4
 80095c6:	466a      	mov	r2, sp
 80095c8:	f7ff ffc8 	bl	800955c <__swhatbuf_r>
 80095cc:	9900      	ldr	r1, [sp, #0]
 80095ce:	4605      	mov	r5, r0
 80095d0:	4630      	mov	r0, r6
 80095d2:	f7ff fbbd 	bl	8008d50 <_malloc_r>
 80095d6:	b948      	cbnz	r0, 80095ec <__smakebuf_r+0x44>
 80095d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095dc:	059a      	lsls	r2, r3, #22
 80095de:	d4ef      	bmi.n	80095c0 <__smakebuf_r+0x18>
 80095e0:	f023 0303 	bic.w	r3, r3, #3
 80095e4:	f043 0302 	orr.w	r3, r3, #2
 80095e8:	81a3      	strh	r3, [r4, #12]
 80095ea:	e7e3      	b.n	80095b4 <__smakebuf_r+0xc>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	6020      	str	r0, [r4, #0]
 80095f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f4:	81a3      	strh	r3, [r4, #12]
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	6163      	str	r3, [r4, #20]
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	6120      	str	r0, [r4, #16]
 80095fe:	b15b      	cbz	r3, 8009618 <__smakebuf_r+0x70>
 8009600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009604:	4630      	mov	r0, r6
 8009606:	f000 f81d 	bl	8009644 <_isatty_r>
 800960a:	b128      	cbz	r0, 8009618 <__smakebuf_r+0x70>
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f023 0303 	bic.w	r3, r3, #3
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	431d      	orrs	r5, r3
 800961c:	81a5      	strh	r5, [r4, #12]
 800961e:	e7cf      	b.n	80095c0 <__smakebuf_r+0x18>

08009620 <_fstat_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4d07      	ldr	r5, [pc, #28]	; (8009640 <_fstat_r+0x20>)
 8009624:	2300      	movs	r3, #0
 8009626:	4604      	mov	r4, r0
 8009628:	4608      	mov	r0, r1
 800962a:	4611      	mov	r1, r2
 800962c:	602b      	str	r3, [r5, #0]
 800962e:	f7f7 fcb4 	bl	8000f9a <_fstat>
 8009632:	1c43      	adds	r3, r0, #1
 8009634:	d102      	bne.n	800963c <_fstat_r+0x1c>
 8009636:	682b      	ldr	r3, [r5, #0]
 8009638:	b103      	cbz	r3, 800963c <_fstat_r+0x1c>
 800963a:	6023      	str	r3, [r4, #0]
 800963c:	bd38      	pop	{r3, r4, r5, pc}
 800963e:	bf00      	nop
 8009640:	20004dc4 	.word	0x20004dc4

08009644 <_isatty_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d06      	ldr	r5, [pc, #24]	; (8009660 <_isatty_r+0x1c>)
 8009648:	2300      	movs	r3, #0
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	602b      	str	r3, [r5, #0]
 8009650:	f7f7 fcb3 	bl	8000fba <_isatty>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_isatty_r+0x1a>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b103      	cbz	r3, 800965e <_isatty_r+0x1a>
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	20004dc4 	.word	0x20004dc4

08009664 <_init>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	bf00      	nop
 8009668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966a:	bc08      	pop	{r3}
 800966c:	469e      	mov	lr, r3
 800966e:	4770      	bx	lr

08009670 <_fini>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	bf00      	nop
 8009674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009676:	bc08      	pop	{r3}
 8009678:	469e      	mov	lr, r3
 800967a:	4770      	bx	lr
